import{LitElement,html,css}from"https://unpkg.com/lit-element@2.0.1/lit-element.js?module";class TodoApp extends LitElement{static get properties(){return{todos:{type:Array}}}constructor(){super(),this.todos=[{text:"Make a demo",checked:!0},{text:"The boring stuff",checked:!1},{text:"Setting properties",checked:!1},{text:"Setting attributes",checked:!1},{text:"Reflecting properties to attributes",checked:!1},{text:"Events",checked:!1},{text:"Wrap it up",checked:!1}]}firstUpdated(){}_addTodo(t){t.preventDefault(),this.$input.value.length>0&&(this.todos=[...this.todos,{text:this.$input.value,checked:!1}],this.$input.value="")}static get styles(){return css`
      :host {
        display: block;
        font-family: sans-serif;
        text-align: center;
      }
      button {
        border: none;
        cursor: pointer;
        background-color: Transparent;
      }
      ul {
        list-style: none;
        padding: 0;
      }
    `}render(){return html`
      <h3>LitElement</h3>
      <br>
      <h1>To do</h1>
      <form id="todo-input">
          <input type="text" placeholder="Add a new to do"></input>
          <button @click=${this._addTodo}>âœ…</button>
      </form>
      <ul id="todos">
          ${this.todos.map((t,e)=>html`
                <to-do-item 
                    ?checked=${t.checked}
                    .index=${e}
                    text=${t.text}
                    @onRemove=${this._removeTodo}
                    @onToggle=${this._toggleTodo}>    
                </to-do-item>`)}
      </ul>
    `}}window.customElements.define("to-do-app",TodoApp);