"use strict";

exports.__esModule = true;
exports.process = process;

var _url = _interopRequireDefault(require("url"));

var _page = _interopRequireDefault(require("./page"));

var _manifest = _interopRequireDefault(require("./manifest"));

var _script = _interopRequireDefault(require("./script"));

var _stylesheet = _interopRequireDefault(require("./stylesheet"));

var urlUtil = _interopRequireWildcard(require("../../utils/url"));

var _encoding = require("../encoding");

var _os = require("os");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const IS_WIN = (0, _os.platform)() === 'win32';
const DISK_RE = /^[A-Za-z]:/;

function getResourceUrlReplacer(ctx) {
  return function (resourceUrl, resourceType, charsetAttrValue, baseUrl) {
    if (!urlUtil.isSupportedProtocol(resourceUrl) && !urlUtil.isSpecialPage(resourceUrl)) return resourceUrl;
    if (IS_WIN && ctx.dest.protocol === 'file:' && DISK_RE.test(resourceUrl)) resourceUrl = '/' + resourceUrl; // NOTE: Resolves base URLs without a protocol ('//google.com/path' for example).

    baseUrl = baseUrl ? _url.default.resolve(ctx.dest.url, baseUrl) : '';
    resourceUrl = urlUtil.processSpecialChars(resourceUrl);

    let resolvedUrl = _url.default.resolve(baseUrl || ctx.dest.url, resourceUrl);

    if (!urlUtil.isValidUrl(resolvedUrl)) return resourceUrl;
    const isScript = urlUtil.parseResourceType(resourceType).isScript;
    const charsetStr = charsetAttrValue || isScript && ctx.contentInfo.charset.get();
    resolvedUrl = urlUtil.ensureTrailingSlash(resourceUrl, resolvedUrl);
    if (!urlUtil.isValidUrl(resolvedUrl)) return resolvedUrl;
    return ctx.toProxyUrl(resolvedUrl, false, resourceType, charsetStr);
  };
}

function process(_x) {
  return _process.apply(this, arguments);
}

function _process() {
  _process = _asyncToGenerator(function* (ctx) {
    const processors = [_page.default, _manifest.default, _script.default, _stylesheet.default];
    const body = ctx.destResBody;
    const contentInfo = ctx.contentInfo;
    const encoding = contentInfo.encoding;
    const charset = contentInfo.charset;
    const decoded = yield (0, _encoding.decodeContent)(body, encoding, charset);

    for (let i = 0; i < processors.length; i++) {
      if (processors[i].shouldProcessResource(ctx)) {
        const urlReplacer = getResourceUrlReplacer(ctx); // @ts-ignore: Cannot invoke an expression whose type lacks a call signature

        const processed = processors[i].processResource(decoded, ctx, charset, urlReplacer, false);
        if (processed === _page.default.RESTART_PROCESSING) return yield process(ctx);
        return yield (0, _encoding.encodeContent)(processed, encoding, charset);
      }
    }

    return body;
  });
  return _process.apply(this, arguments);
}