"use strict";

exports.__esModule = true;
exports.assign = assign;

var _promisifiedFunctions = require("../../utils/promisified-functions");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*eslint-enable no-unused-vars*/
let cached = null;

function queryOSForCredential(_x) {
  return _queryOSForCredential.apply(this, arguments);
}

function _queryOSForCredential() {
  _queryOSForCredential = _asyncToGenerator(function* (cmd) {
    try {
      const credential = yield (0, _promisifiedFunctions.exec)(cmd);
      return credential.replace(/\s/g, '');
    } catch (err) {
      return '';
    }
  });
  return _queryOSForCredential.apply(this, arguments);
}

function assign(_x2) {
  return _assign.apply(this, arguments);
}

function _assign() {
  _assign = _asyncToGenerator(function* (credentials) {
    if (!cached) {
      cached = {
        domain: yield queryOSForCredential('echo %userdomain%'),
        workstation: yield queryOSForCredential('hostname')
      };
    }

    credentials.domain = credentials.domain || cached.domain;
    credentials.workstation = credentials.workstation || cached.workstation;
  });
  return _assign.apply(this, arguments);
}