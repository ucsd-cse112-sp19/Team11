"use strict";

exports.__esModule = true;
exports.preventCaching = preventCaching;
exports.respond204 = respond204;
exports.respond404 = respond404;
exports.respond500 = respond500;
exports.respondWithJSON = respondWithJSON;
exports.respondStatic = respondStatic;
exports.fetchBody = fetchBody;

var _lodash = require("lodash");

var _promisifyStream = _interopRequireDefault(require("../utils/promisify-stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*eslint-disable no-unused-vars*/

/*eslint-enable no-unused-vars*/
const STATIC_RESOURCES_DEFAULT_CACHING_OPTIONS = {
  maxAge: 30,
  mustRevalidate: true
};

function preventCaching(res) {
  res.setHeader('cache-control', 'no-cache, no-store, must-revalidate');
  res.setHeader('pragma', 'no-cache');
}

function respond204(res) {
  res.statusCode = 204;
  res.end();
}

function respond404(res) {
  res.statusCode = 404;
  res.end();
}

function respond500(res, err) {
  res.statusCode = 500;
  res.end(err || '');
}

function respondWithJSON(res, data, skipContentType) {
  if (!skipContentType) res.setHeader('content-type', 'application/json'); // NOTE: GH-105

  preventCaching(res);
  res.end(data ? JSON.stringify(data) : '');
}

function respondStatic(req, res, resource, cachingOptions = {}) {
  cachingOptions = (0, _lodash.defaultsDeep)(cachingOptions, STATIC_RESOURCES_DEFAULT_CACHING_OPTIONS);

  if (resource.etag === req.headers['if-none-match']) {
    res.statusCode = 304;
    res.end();
  } else {
    const _cachingOptions = cachingOptions,
          maxAge = _cachingOptions.maxAge,
          mustRevalidate = _cachingOptions.mustRevalidate;
    res.setHeader('cache-control', `max-age=${maxAge}${mustRevalidate ? ', must-revalidate' : ''}`);
    res.setHeader('etag', resource.etag);
    res.setHeader('content-type', resource.contentType);
    res.end(resource.content);
  }
}

function fetchBody(r) {
  return (0, _promisifyStream.default)(r);
}