"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const lodash_1 = require("lodash");
class RequestHook {
    constructor(requestFilterRules, responseEventConfigureOpts) {
        this.requestFilterRules = this._prepareRequestFilterRules(requestFilterRules);
        this._instantiatedRequestFilterRules = [];
        this.responseEventConfigureOpts = responseEventConfigureOpts;
        this.warningLog = null;
    }
    _prepareRequestFilterRules(rules) {
        if (rules)
            return lodash_1.castArray(rules);
        return [testcafe_hammerhead_1.RequestFilterRule.ANY];
    }
    _instantiateRequestFilterRules() {
        this._instantiatedRequestFilterRules = [];
        this.requestFilterRules.forEach(rule => {
            const instantiatedRule = rule instanceof testcafe_hammerhead_1.RequestFilterRule ? rule : new testcafe_hammerhead_1.RequestFilterRule(rule);
            this._instantiatedRequestFilterRules.push(instantiatedRule);
        });
    }
    async onRequest( /*RequestEvent event*/) {
        throw new Error('Not implemented');
    }
    _onConfigureResponse(event) {
        if (!this.responseEventConfigureOpts)
            return;
        event.opts.includeHeaders = this.responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this.responseEventConfigureOpts.includeBody;
    }
    async onResponse( /*ResponseEvent event*/) {
        throw new Error('Not implemented');
    }
}
exports.default = RequestHook;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBQXdEO0FBQ3hELG1DQUFtQztBQUVuQyxNQUFxQixXQUFXO0lBQzVCLFlBQWEsa0JBQWtCLEVBQUUsMEJBQTBCO1FBQ3ZELElBQUksQ0FBQyxrQkFBa0IsR0FBZ0IsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLCtCQUErQixHQUFHLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsMEJBQTBCLEdBQVEsMEJBQTBCLENBQUM7UUFFbEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELDBCQUEwQixDQUFFLEtBQUs7UUFDN0IsSUFBSSxLQUFLO1lBQ0wsT0FBTyxrQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVCLE9BQU8sQ0FBQyx1Q0FBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsOEJBQThCO1FBQzFCLElBQUksQ0FBQywrQkFBK0IsR0FBRyxFQUFFLENBQUM7UUFFMUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxNQUFNLGdCQUFnQixHQUFHLElBQUksWUFBWSx1Q0FBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHVDQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhHLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxFQUFFLHNCQUFzQjtRQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELG9CQUFvQixDQUFFLEtBQUs7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEI7WUFDaEMsT0FBTztRQUVYLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxjQUFjLENBQUM7UUFDM0UsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQU0sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsQ0FBQztJQUM1RSxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsRUFBRSx1QkFBdUI7UUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjtBQXpDRCw4QkF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0RmlsdGVyUnVsZSB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IHsgY2FzdEFycmF5IH0gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdEhvb2sge1xuICAgIGNvbnN0cnVjdG9yIChyZXF1ZXN0RmlsdGVyUnVsZXMsIHJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZpbHRlclJ1bGVzICAgICAgICAgICAgICA9IHRoaXMuX3ByZXBhcmVSZXF1ZXN0RmlsdGVyUnVsZXMocmVxdWVzdEZpbHRlclJ1bGVzKTtcbiAgICAgICAgdGhpcy5faW5zdGFudGlhdGVkUmVxdWVzdEZpbHRlclJ1bGVzID0gW107XG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMgICAgICA9IHJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzO1xuXG4gICAgICAgIHRoaXMud2FybmluZ0xvZyA9IG51bGw7XG4gICAgfVxuXG4gICAgX3ByZXBhcmVSZXF1ZXN0RmlsdGVyUnVsZXMgKHJ1bGVzKSB7XG4gICAgICAgIGlmIChydWxlcylcbiAgICAgICAgICAgIHJldHVybiBjYXN0QXJyYXkocnVsZXMpO1xuXG4gICAgICAgIHJldHVybiBbUmVxdWVzdEZpbHRlclJ1bGUuQU5ZXTtcbiAgICB9XG5cbiAgICBfaW5zdGFudGlhdGVSZXF1ZXN0RmlsdGVyUnVsZXMgKCkge1xuICAgICAgICB0aGlzLl9pbnN0YW50aWF0ZWRSZXF1ZXN0RmlsdGVyUnVsZXMgPSBbXTtcblxuICAgICAgICB0aGlzLnJlcXVlc3RGaWx0ZXJSdWxlcy5mb3JFYWNoKHJ1bGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5zdGFudGlhdGVkUnVsZSA9IHJ1bGUgaW5zdGFuY2VvZiBSZXF1ZXN0RmlsdGVyUnVsZSA/IHJ1bGUgOiBuZXcgUmVxdWVzdEZpbHRlclJ1bGUocnVsZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcy5wdXNoKGluc3RhbnRpYXRlZFJ1bGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBvblJlcXVlc3QgKC8qUmVxdWVzdEV2ZW50IGV2ZW50Ki8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBfb25Db25maWd1cmVSZXNwb25zZSAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGV2ZW50Lm9wdHMuaW5jbHVkZUhlYWRlcnMgPSB0aGlzLnJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzLmluY2x1ZGVIZWFkZXJzO1xuICAgICAgICBldmVudC5vcHRzLmluY2x1ZGVCb2R5ICAgID0gdGhpcy5yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cy5pbmNsdWRlQm9keTtcbiAgICB9XG5cbiAgICBhc3luYyBvblJlc3BvbnNlICgvKlJlc3BvbnNlRXZlbnQgZXZlbnQqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbn1cbiJdfQ==