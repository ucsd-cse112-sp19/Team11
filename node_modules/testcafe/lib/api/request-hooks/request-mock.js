'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

exports.default = createRequestMock;

var _hook = require('./hook');

var _hook2 = _interopRequireDefault(_hook);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _runtime = require('../../errors/runtime');

var _types = require('../../errors/types');

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RequestMock extends _hook2.default {
    constructor() {
        super([]);

        this.pendingRequestFilterRuleInit = null;
        this.mocks = new _map2.default();
    }

    onRequest(event) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const mock = _this.mocks.get(event._requestFilterRule);

            event.setMock(mock);
        })();
    }

    onResponse(event) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (event.statusCode === _testcafeHammerhead.SAME_ORIGIN_CHECK_FAILED_STATUS_CODE) _this2.warningLog.addWarning(_warningMessage2.default.requestMockCORSValidationFailed, RequestMock.name, event._requestFilterRule);
        })();
    }

    // API
    onRequestTo(requestFilterRuleInit) {
        if (this.pendingRequestFilterRuleInit) throw new _runtime.APIError('onRequestTo', _types.RUNTIME_ERRORS.requestHookConfigureAPIError, RequestMock.name, "The 'respond' method was not called after 'onRequestTo'. You must call the 'respond' method to provide the mocked response.");

        this.pendingRequestFilterRuleInit = requestFilterRuleInit;

        return this;
    }

    respond(body, statusCode, headers) {
        if (!this.pendingRequestFilterRuleInit) throw new _runtime.APIError('respond', _types.RUNTIME_ERRORS.requestHookConfigureAPIError, RequestMock.name, "The 'onRequestTo' method was not called before 'respond'. You must call the 'onRequestTo' method to provide the URL requests to which are mocked.");

        const mock = new _testcafeHammerhead.ResponseMock(body, statusCode, headers);
        const rule = new _testcafeHammerhead.RequestFilterRule(this.pendingRequestFilterRuleInit);

        this.requestFilterRules.push(rule);
        this.mocks.set(rule, mock);
        this.pendingRequestFilterRuleInit = null;

        return this;
    }
}

function createRequestMock() {
    return new RequestMock();
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9yZXF1ZXN0LW1vY2suanMiXSwibmFtZXMiOlsiY3JlYXRlUmVxdWVzdE1vY2siLCJSZXF1ZXN0TW9jayIsIlJlcXVlc3RIb29rIiwiY29uc3RydWN0b3IiLCJwZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0IiwibW9ja3MiLCJvblJlcXVlc3QiLCJldmVudCIsIm1vY2siLCJnZXQiLCJfcmVxdWVzdEZpbHRlclJ1bGUiLCJzZXRNb2NrIiwib25SZXNwb25zZSIsInN0YXR1c0NvZGUiLCJTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUiLCJ3YXJuaW5nTG9nIiwiYWRkV2FybmluZyIsIldBUk5JTkdfTUVTU0FHRSIsInJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQiLCJuYW1lIiwib25SZXF1ZXN0VG8iLCJyZXF1ZXN0RmlsdGVyUnVsZUluaXQiLCJBUElFcnJvciIsIlJVTlRJTUVfRVJST1JTIiwicmVxdWVzdEhvb2tDb25maWd1cmVBUElFcnJvciIsInJlc3BvbmQiLCJib2R5IiwiaGVhZGVycyIsIlJlc3BvbnNlTW9jayIsInJ1bGUiLCJSZXF1ZXN0RmlsdGVyUnVsZSIsInJlcXVlc3RGaWx0ZXJSdWxlcyIsInB1c2giLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztrQkFrRHdCQSxpQjs7QUFsRHhCOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLFdBQU4sU0FBMEJDLGNBQTFCLENBQXNDO0FBQ2xDQyxrQkFBZTtBQUNYLGNBQU0sRUFBTjs7QUFFQSxhQUFLQyw0QkFBTCxHQUFvQyxJQUFwQztBQUNBLGFBQUtDLEtBQUwsR0FBb0MsbUJBQXBDO0FBQ0g7O0FBRUtDLGFBQU4sQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQUE7O0FBQUE7QUFDcEIsa0JBQU1DLE9BQU8sTUFBS0gsS0FBTCxDQUFXSSxHQUFYLENBQWVGLE1BQU1HLGtCQUFyQixDQUFiOztBQUVBSCxrQkFBTUksT0FBTixDQUFjSCxJQUFkO0FBSG9CO0FBSXZCOztBQUVLSSxjQUFOLENBQWtCTCxLQUFsQixFQUF5QjtBQUFBOztBQUFBO0FBQ3JCLGdCQUFJQSxNQUFNTSxVQUFOLEtBQXFCQyx3REFBekIsRUFDSSxPQUFLQyxVQUFMLENBQWdCQyxVQUFoQixDQUEyQkMseUJBQWdCQywrQkFBM0MsRUFBNEVqQixZQUFZa0IsSUFBeEYsRUFBOEZaLE1BQU1HLGtCQUFwRztBQUZpQjtBQUd4Qjs7QUFFRDtBQUNBVSxnQkFBYUMscUJBQWIsRUFBb0M7QUFDaEMsWUFBSSxLQUFLakIsNEJBQVQsRUFDSSxNQUFNLElBQUlrQixpQkFBSixDQUFhLGFBQWIsRUFBNEJDLHNCQUFlQyw0QkFBM0MsRUFBeUV2QixZQUFZa0IsSUFBckYsRUFBMkYsNkhBQTNGLENBQU47O0FBRUosYUFBS2YsNEJBQUwsR0FBb0NpQixxQkFBcEM7O0FBRUEsZUFBTyxJQUFQO0FBQ0g7O0FBRURJLFlBQVNDLElBQVQsRUFBZWIsVUFBZixFQUEyQmMsT0FBM0IsRUFBb0M7QUFDaEMsWUFBSSxDQUFDLEtBQUt2Qiw0QkFBVixFQUNJLE1BQU0sSUFBSWtCLGlCQUFKLENBQWEsU0FBYixFQUF3QkMsc0JBQWVDLDRCQUF2QyxFQUFxRXZCLFlBQVlrQixJQUFqRixFQUF1RixtSkFBdkYsQ0FBTjs7QUFFSixjQUFNWCxPQUFPLElBQUlvQixnQ0FBSixDQUFpQkYsSUFBakIsRUFBdUJiLFVBQXZCLEVBQW1DYyxPQUFuQyxDQUFiO0FBQ0EsY0FBTUUsT0FBTyxJQUFJQyxxQ0FBSixDQUFzQixLQUFLMUIsNEJBQTNCLENBQWI7O0FBRUEsYUFBSzJCLGtCQUFMLENBQXdCQyxJQUF4QixDQUE2QkgsSUFBN0I7QUFDQSxhQUFLeEIsS0FBTCxDQUFXNEIsR0FBWCxDQUFlSixJQUFmLEVBQXFCckIsSUFBckI7QUFDQSxhQUFLSiw0QkFBTCxHQUFvQyxJQUFwQzs7QUFFQSxlQUFPLElBQVA7QUFDSDtBQXpDaUM7O0FBNEN2QixTQUFTSixpQkFBVCxHQUE4QjtBQUN6QyxXQUFPLElBQUlDLFdBQUosRUFBUDtBQUNIIiwiZmlsZSI6ImFwaS9yZXF1ZXN0LWhvb2tzL3JlcXVlc3QtbW9jay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXF1ZXN0SG9vayBmcm9tICcuL2hvb2snO1xuaW1wb3J0IHsgUmVzcG9uc2VNb2NrLCBSZXF1ZXN0RmlsdGVyUnVsZSwgU0FNRV9PUklHSU5fQ0hFQ0tfRkFJTEVEX1NUQVRVU19DT0RFIH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3R5cGVzJztcbmltcG9ydCBXQVJOSU5HX01FU1NBR0UgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuXG5jbGFzcyBSZXF1ZXN0TW9jayBleHRlbmRzIFJlcXVlc3RIb29rIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKFtdKTtcblxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vY2tzICAgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgb25SZXF1ZXN0IChldmVudCkge1xuICAgICAgICBjb25zdCBtb2NrID0gdGhpcy5tb2Nrcy5nZXQoZXZlbnQuX3JlcXVlc3RGaWx0ZXJSdWxlKTtcblxuICAgICAgICBldmVudC5zZXRNb2NrKG1vY2spO1xuICAgIH1cblxuICAgIGFzeW5jIG9uUmVzcG9uc2UgKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5zdGF0dXNDb2RlID09PSBTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUpXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdMb2cuYWRkV2FybmluZyhXQVJOSU5HX01FU1NBR0UucmVxdWVzdE1vY2tDT1JTVmFsaWRhdGlvbkZhaWxlZCwgUmVxdWVzdE1vY2submFtZSwgZXZlbnQuX3JlcXVlc3RGaWx0ZXJSdWxlKTtcbiAgICB9XG5cbiAgICAvLyBBUElcbiAgICBvblJlcXVlc3RUbyAocmVxdWVzdEZpbHRlclJ1bGVJbml0KSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoJ29uUmVxdWVzdFRvJywgUlVOVElNRV9FUlJPUlMucmVxdWVzdEhvb2tDb25maWd1cmVBUElFcnJvciwgUmVxdWVzdE1vY2submFtZSwgXCJUaGUgJ3Jlc3BvbmQnIG1ldGhvZCB3YXMgbm90IGNhbGxlZCBhZnRlciAnb25SZXF1ZXN0VG8nLiBZb3UgbXVzdCBjYWxsIHRoZSAncmVzcG9uZCcgbWV0aG9kIHRvIHByb3ZpZGUgdGhlIG1vY2tlZCByZXNwb25zZS5cIik7XG5cbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0ID0gcmVxdWVzdEZpbHRlclJ1bGVJbml0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlc3BvbmQgKGJvZHksIHN0YXR1c0NvZGUsIGhlYWRlcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoJ3Jlc3BvbmQnLCBSVU5USU1FX0VSUk9SUy5yZXF1ZXN0SG9va0NvbmZpZ3VyZUFQSUVycm9yLCBSZXF1ZXN0TW9jay5uYW1lLCBcIlRoZSAnb25SZXF1ZXN0VG8nIG1ldGhvZCB3YXMgbm90IGNhbGxlZCBiZWZvcmUgJ3Jlc3BvbmQnLiBZb3UgbXVzdCBjYWxsIHRoZSAnb25SZXF1ZXN0VG8nIG1ldGhvZCB0byBwcm92aWRlIHRoZSBVUkwgcmVxdWVzdHMgdG8gd2hpY2ggYXJlIG1vY2tlZC5cIik7XG5cbiAgICAgICAgY29uc3QgbW9jayA9IG5ldyBSZXNwb25zZU1vY2soYm9keSwgc3RhdHVzQ29kZSwgaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSBuZXcgUmVxdWVzdEZpbHRlclJ1bGUodGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0KTtcblxuICAgICAgICB0aGlzLnJlcXVlc3RGaWx0ZXJSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICB0aGlzLm1vY2tzLnNldChydWxlLCBtb2NrKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0ID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RNb2NrICgpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3RNb2NrKCk7XG59XG4iXX0=
