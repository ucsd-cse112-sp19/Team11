'use strict';

exports.__esModule = true;
exports.assertUrl = assertUrl;
exports.resolvePageUrl = resolvePageUrl;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

var _testcafeHammerhead = require('testcafe-hammerhead');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROTOCOL_RE = /^([\w-]+?)(?=:\/\/)/;
const SUPPORTED_PROTOCOL_RE = /^(https?|file):/;
const IMPLICIT_PROTOCOL_RE = /^\/\//;
const ABSOLUTE_PATH_RE = /^\/[^/]/;
const WIN_ABSOLUTE_PATH_RE = /^\w:[/\\]/;
const RELATIVE_PATH_RE = /^\.\.?[/\\]/;

function isAbsolutePath(url) {
    return _osFamily2.default.win ? WIN_ABSOLUTE_PATH_RE.test(url) : ABSOLUTE_PATH_RE.test(url);
}

function resolveFileUrl(url, testFileName) {
    const testFileDir = _path2.default.dirname(testFileName);

    if (RELATIVE_PATH_RE.test(url)) url = _path2.default.join(testFileDir, url);

    return 'file://' + url;
}

function assertUrl(url, callsiteName) {
    const protocol = url.match(PROTOCOL_RE);
    const hasUnsupportedProtocol = protocol && !SUPPORTED_PROTOCOL_RE.test(url);
    const isWinAbsolutePath = _osFamily2.default.win && WIN_ABSOLUTE_PATH_RE.test(url);

    if (hasUnsupportedProtocol && !isWinAbsolutePath && url !== _testcafeHammerhead.SPECIAL_BLANK_PAGE) throw new _runtime.APIError(callsiteName, _types.RUNTIME_ERRORS.unsupportedUrlProtocol, url, protocol[0]);
}

function resolvePageUrl(url, testFileName) {
    if (SUPPORTED_PROTOCOL_RE.test(url) || url === _testcafeHammerhead.SPECIAL_BLANK_PAGE) return url;

    if (isAbsolutePath(url) || RELATIVE_PATH_RE.test(url)) return resolveFileUrl(url, testFileName);

    const protocol = IMPLICIT_PROTOCOL_RE.test(url) ? 'http:' : 'http://';

    return protocol + url;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdGVzdC1wYWdlLXVybC5qcyJdLCJuYW1lcyI6WyJhc3NlcnRVcmwiLCJyZXNvbHZlUGFnZVVybCIsIlBST1RPQ09MX1JFIiwiU1VQUE9SVEVEX1BST1RPQ09MX1JFIiwiSU1QTElDSVRfUFJPVE9DT0xfUkUiLCJBQlNPTFVURV9QQVRIX1JFIiwiV0lOX0FCU09MVVRFX1BBVEhfUkUiLCJSRUxBVElWRV9QQVRIX1JFIiwiaXNBYnNvbHV0ZVBhdGgiLCJ1cmwiLCJPUyIsIndpbiIsInRlc3QiLCJyZXNvbHZlRmlsZVVybCIsInRlc3RGaWxlTmFtZSIsInRlc3RGaWxlRGlyIiwicGF0aCIsImRpcm5hbWUiLCJqb2luIiwiY2FsbHNpdGVOYW1lIiwicHJvdG9jb2wiLCJtYXRjaCIsImhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wiLCJpc1dpbkFic29sdXRlUGF0aCIsIlNQRUNJQUxfQkxBTktfUEFHRSIsIkFQSUVycm9yIiwiUlVOVElNRV9FUlJPUlMiLCJ1bnN1cHBvcnRlZFVybFByb3RvY29sIl0sIm1hcHBpbmdzIjoiOzs7UUEyQmdCQSxTLEdBQUFBLFM7UUFTQUMsYyxHQUFBQSxjOztBQXBDaEI7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUMsY0FBd0IscUJBQTlCO0FBQ0EsTUFBTUMsd0JBQXdCLGlCQUE5QjtBQUNBLE1BQU1DLHVCQUF3QixPQUE5QjtBQUNBLE1BQU1DLG1CQUF3QixTQUE5QjtBQUNBLE1BQU1DLHVCQUF3QixXQUE5QjtBQUNBLE1BQU1DLG1CQUF3QixhQUE5Qjs7QUFHQSxTQUFTQyxjQUFULENBQXlCQyxHQUF6QixFQUE4QjtBQUMxQixXQUFPQyxtQkFBR0MsR0FBSCxHQUFTTCxxQkFBcUJNLElBQXJCLENBQTBCSCxHQUExQixDQUFULEdBQTBDSixpQkFBaUJPLElBQWpCLENBQXNCSCxHQUF0QixDQUFqRDtBQUNIOztBQUVELFNBQVNJLGNBQVQsQ0FBeUJKLEdBQXpCLEVBQThCSyxZQUE5QixFQUE0QztBQUN4QyxVQUFNQyxjQUFjQyxlQUFLQyxPQUFMLENBQWFILFlBQWIsQ0FBcEI7O0FBRUEsUUFBSVAsaUJBQWlCSyxJQUFqQixDQUFzQkgsR0FBdEIsQ0FBSixFQUNJQSxNQUFNTyxlQUFLRSxJQUFMLENBQVVILFdBQVYsRUFBdUJOLEdBQXZCLENBQU47O0FBRUosV0FBTyxZQUFZQSxHQUFuQjtBQUNIOztBQUVNLFNBQVNULFNBQVQsQ0FBb0JTLEdBQXBCLEVBQXlCVSxZQUF6QixFQUF1QztBQUMxQyxVQUFNQyxXQUF5QlgsSUFBSVksS0FBSixDQUFVbkIsV0FBVixDQUEvQjtBQUNBLFVBQU1vQix5QkFBeUJGLFlBQVksQ0FBQ2pCLHNCQUFzQlMsSUFBdEIsQ0FBMkJILEdBQTNCLENBQTVDO0FBQ0EsVUFBTWMsb0JBQXlCYixtQkFBR0MsR0FBSCxJQUFVTCxxQkFBcUJNLElBQXJCLENBQTBCSCxHQUExQixDQUF6Qzs7QUFFQSxRQUFJYSwwQkFBMEIsQ0FBQ0MsaUJBQTNCLElBQWdEZCxRQUFRZSxzQ0FBNUQsRUFDSSxNQUFNLElBQUlDLGlCQUFKLENBQWFOLFlBQWIsRUFBMkJPLHNCQUFlQyxzQkFBMUMsRUFBa0VsQixHQUFsRSxFQUF1RVcsU0FBUyxDQUFULENBQXZFLENBQU47QUFDUDs7QUFFTSxTQUFTbkIsY0FBVCxDQUF5QlEsR0FBekIsRUFBOEJLLFlBQTlCLEVBQTRDO0FBQy9DLFFBQUlYLHNCQUFzQlMsSUFBdEIsQ0FBMkJILEdBQTNCLEtBQW1DQSxRQUFRZSxzQ0FBL0MsRUFDSSxPQUFPZixHQUFQOztBQUVKLFFBQUlELGVBQWVDLEdBQWYsS0FBdUJGLGlCQUFpQkssSUFBakIsQ0FBc0JILEdBQXRCLENBQTNCLEVBQ0ksT0FBT0ksZUFBZUosR0FBZixFQUFvQkssWUFBcEIsQ0FBUDs7QUFFSixVQUFNTSxXQUFXaEIscUJBQXFCUSxJQUFyQixDQUEwQkgsR0FBMUIsSUFBaUMsT0FBakMsR0FBMkMsU0FBNUQ7O0FBRUEsV0FBT1csV0FBV1gsR0FBbEI7QUFDSCIsImZpbGUiOiJhcGkvdGVzdC1wYWdlLXVybC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IFJVTlRJTUVfRVJST1JTIH0gZnJvbSAnLi4vZXJyb3JzL3R5cGVzJztcbmltcG9ydCB7IFNQRUNJQUxfQkxBTktfUEFHRSB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuXG5jb25zdCBQUk9UT0NPTF9SRSAgICAgICAgICAgPSAvXihbXFx3LV0rPykoPz06XFwvXFwvKS87XG5jb25zdCBTVVBQT1JURURfUFJPVE9DT0xfUkUgPSAvXihodHRwcz98ZmlsZSk6LztcbmNvbnN0IElNUExJQ0lUX1BST1RPQ09MX1JFICA9IC9eXFwvXFwvLztcbmNvbnN0IEFCU09MVVRFX1BBVEhfUkUgICAgICA9IC9eXFwvW14vXS87XG5jb25zdCBXSU5fQUJTT0xVVEVfUEFUSF9SRSAgPSAvXlxcdzpbL1xcXFxdLztcbmNvbnN0IFJFTEFUSVZFX1BBVEhfUkUgICAgICA9IC9eXFwuXFwuP1svXFxcXF0vO1xuXG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoICh1cmwpIHtcbiAgICByZXR1cm4gT1Mud2luID8gV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpIDogQUJTT0xVVEVfUEFUSF9SRS50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGaWxlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGNvbnN0IHRlc3RGaWxlRGlyID0gcGF0aC5kaXJuYW1lKHRlc3RGaWxlTmFtZSk7XG5cbiAgICBpZiAoUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHVybCA9IHBhdGguam9pbih0ZXN0RmlsZURpciwgdXJsKTtcblxuICAgIHJldHVybiAnZmlsZTovLycgKyB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRVcmwgKHVybCwgY2FsbHNpdGVOYW1lKSB7XG4gICAgY29uc3QgcHJvdG9jb2wgICAgICAgICAgICAgICA9IHVybC5tYXRjaChQUk9UT0NPTF9SRSk7XG4gICAgY29uc3QgaGFzVW5zdXBwb3J0ZWRQcm90b2NvbCA9IHByb3RvY29sICYmICFTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpO1xuICAgIGNvbnN0IGlzV2luQWJzb2x1dGVQYXRoICAgICAgPSBPUy53aW4gJiYgV0lOX0FCU09MVVRFX1BBVEhfUkUudGVzdCh1cmwpO1xuXG4gICAgaWYgKGhhc1Vuc3VwcG9ydGVkUHJvdG9jb2wgJiYgIWlzV2luQWJzb2x1dGVQYXRoICYmIHVybCAhPT0gU1BFQ0lBTF9CTEFOS19QQUdFKVxuICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoY2FsbHNpdGVOYW1lLCBSVU5USU1FX0VSUk9SUy51bnN1cHBvcnRlZFVybFByb3RvY29sLCB1cmwsIHByb3RvY29sWzBdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYWdlVXJsICh1cmwsIHRlc3RGaWxlTmFtZSkge1xuICAgIGlmIChTVVBQT1JURURfUFJPVE9DT0xfUkUudGVzdCh1cmwpIHx8IHVybCA9PT0gU1BFQ0lBTF9CTEFOS19QQUdFKVxuICAgICAgICByZXR1cm4gdXJsO1xuXG4gICAgaWYgKGlzQWJzb2x1dGVQYXRoKHVybCkgfHwgUkVMQVRJVkVfUEFUSF9SRS50ZXN0KHVybCkpXG4gICAgICAgIHJldHVybiByZXNvbHZlRmlsZVVybCh1cmwsIHRlc3RGaWxlTmFtZSk7XG5cbiAgICBjb25zdCBwcm90b2NvbCA9IElNUExJQ0lUX1BST1RPQ09MX1JFLnRlc3QodXJsKSA/ICdodHRwOicgOiAnaHR0cDovLyc7XG5cbiAgICByZXR1cm4gcHJvdG9jb2wgKyB1cmw7XG59XG4iXX0=
