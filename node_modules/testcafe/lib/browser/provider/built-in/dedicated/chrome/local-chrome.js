'use strict';

exports.__esModule = true;
exports.stop = exports.start = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let start = exports.start = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (pageUrl, { browserName, config, cdpPort, tempProfileDir, inDocker }) {
        const chromeInfo = yield _testcafeBrowserTools2.default.getBrowserInfo(config.path || browserName);
        const chromeOpenParameters = (0, _assign2.default)({}, chromeInfo);

        chromeOpenParameters.cmd = (0, _buildChromeArgs.buildChromeArgs)({ config, cdpPort, platformArgs: chromeOpenParameters.cmd, tempProfileDir, inDocker });

        yield browserStarter.startBrowser(chromeOpenParameters, pageUrl);
    });

    return function start(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let stop = exports.stop = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* ({ browserId }) {
        // NOTE: Chrome on Linux closes only after the second SIGTERM signall
        if (!(yield (0, _process.killBrowserProcess)(browserId))) yield (0, _process.killBrowserProcess)(browserId);
    });

    return function stop(_x3) {
        return _ref2.apply(this, arguments);
    };
})();

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _process = require('../../../../../utils/process');

var _browserStarter = require('../../../utils/browser-starter');

var _browserStarter2 = _interopRequireDefault(_browserStarter);

var _buildChromeArgs = require('./build-chrome-args');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const browserStarter = new _browserStarter2.default();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9jaHJvbWUvbG9jYWwtY2hyb21lLmpzIl0sIm5hbWVzIjpbInBhZ2VVcmwiLCJicm93c2VyTmFtZSIsImNvbmZpZyIsImNkcFBvcnQiLCJ0ZW1wUHJvZmlsZURpciIsImluRG9ja2VyIiwiY2hyb21lSW5mbyIsImJyb3dzZXJUb29scyIsImdldEJyb3dzZXJJbmZvIiwicGF0aCIsImNocm9tZU9wZW5QYXJhbWV0ZXJzIiwiY21kIiwicGxhdGZvcm1BcmdzIiwiYnJvd3NlclN0YXJ0ZXIiLCJzdGFydEJyb3dzZXIiLCJzdGFydCIsImJyb3dzZXJJZCIsInN0b3AiLCJCcm93c2VyU3RhcnRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7K0NBT08sV0FBc0JBLE9BQXRCLEVBQStCLEVBQUVDLFdBQUYsRUFBZUMsTUFBZixFQUF1QkMsT0FBdkIsRUFBZ0NDLGNBQWhDLEVBQWdEQyxRQUFoRCxFQUEvQixFQUEyRjtBQUM5RixjQUFNQyxhQUF1QixNQUFNQywrQkFBYUMsY0FBYixDQUE0Qk4sT0FBT08sSUFBUCxJQUFlUixXQUEzQyxDQUFuQztBQUNBLGNBQU1TLHVCQUF1QixzQkFBYyxFQUFkLEVBQWtCSixVQUFsQixDQUE3Qjs7QUFFQUksNkJBQXFCQyxHQUFyQixHQUEyQixzQ0FBZ0IsRUFBRVQsTUFBRixFQUFVQyxPQUFWLEVBQW1CUyxjQUFjRixxQkFBcUJDLEdBQXRELEVBQTJEUCxjQUEzRCxFQUEyRUMsUUFBM0UsRUFBaEIsQ0FBM0I7O0FBRUEsY0FBTVEsZUFBZUMsWUFBZixDQUE0Qkosb0JBQTVCLEVBQWtEVixPQUFsRCxDQUFOO0FBQ0gsSzs7b0JBUHFCZSxLOzs7Ozs7Z0RBU2YsV0FBcUIsRUFBRUMsU0FBRixFQUFyQixFQUFvQztBQUN2QztBQUNBLFlBQUksRUFBQyxNQUFNLGlDQUFtQkEsU0FBbkIsQ0FBUCxDQUFKLEVBQ0ksTUFBTSxpQ0FBbUJBLFNBQW5CLENBQU47QUFDUCxLOztvQkFKcUJDLEk7Ozs7O0FBaEJ0Qjs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNSixpQkFBaUIsSUFBSUssd0JBQUosRUFBdkIiLCJmaWxlIjoiYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvY2hyb21lL2xvY2FsLWNocm9tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBicm93c2VyVG9vbHMgZnJvbSAndGVzdGNhZmUtYnJvd3Nlci10b29scyc7XG5pbXBvcnQgeyBraWxsQnJvd3NlclByb2Nlc3MgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy9wcm9jZXNzJztcbmltcG9ydCBCcm93c2VyU3RhcnRlciBmcm9tICcuLi8uLi8uLi91dGlscy9icm93c2VyLXN0YXJ0ZXInO1xuaW1wb3J0IHsgYnVpbGRDaHJvbWVBcmdzIH0gZnJvbSAnLi9idWlsZC1jaHJvbWUtYXJncyc7XG5cbmNvbnN0IGJyb3dzZXJTdGFydGVyID0gbmV3IEJyb3dzZXJTdGFydGVyKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydCAocGFnZVVybCwgeyBicm93c2VyTmFtZSwgY29uZmlnLCBjZHBQb3J0LCB0ZW1wUHJvZmlsZURpciwgaW5Eb2NrZXIgfSkge1xuICAgIGNvbnN0IGNocm9tZUluZm8gICAgICAgICAgID0gYXdhaXQgYnJvd3NlclRvb2xzLmdldEJyb3dzZXJJbmZvKGNvbmZpZy5wYXRoIHx8IGJyb3dzZXJOYW1lKTtcbiAgICBjb25zdCBjaHJvbWVPcGVuUGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oe30sIGNocm9tZUluZm8pO1xuXG4gICAgY2hyb21lT3BlblBhcmFtZXRlcnMuY21kID0gYnVpbGRDaHJvbWVBcmdzKHsgY29uZmlnLCBjZHBQb3J0LCBwbGF0Zm9ybUFyZ3M6IGNocm9tZU9wZW5QYXJhbWV0ZXJzLmNtZCwgdGVtcFByb2ZpbGVEaXIsIGluRG9ja2VyIH0pO1xuXG4gICAgYXdhaXQgYnJvd3NlclN0YXJ0ZXIuc3RhcnRCcm93c2VyKGNocm9tZU9wZW5QYXJhbWV0ZXJzLCBwYWdlVXJsKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3AgKHsgYnJvd3NlcklkIH0pIHtcbiAgICAvLyBOT1RFOiBDaHJvbWUgb24gTGludXggY2xvc2VzIG9ubHkgYWZ0ZXIgdGhlIHNlY29uZCBTSUdURVJNIHNpZ25hbGxcbiAgICBpZiAoIWF3YWl0IGtpbGxCcm93c2VyUHJvY2Vzcyhicm93c2VySWQpKVxuICAgICAgICBhd2FpdCBraWxsQnJvd3NlclByb2Nlc3MoYnJvd3NlcklkKTtcbn1cbiJdfQ==
