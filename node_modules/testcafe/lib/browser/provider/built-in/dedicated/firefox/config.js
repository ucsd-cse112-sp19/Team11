'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = function (configString) {
    if (!configCache[configString]) configCache[configString] = getNewConfig(configString);

    return configCache[configString];
};

var _argumentParsing = require('../../../utils/argument-parsing');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AVAILABLE_MODES = ['userProfile', 'headless'];

const configCache = {};

function hasCustomProfile(userArgs) {
    return !!(userArgs.match(/-P\s/) || userArgs.match(/-profile\s/));
}

function parseModes(modesStr, userArgs) {
    const parsed = (0, _argumentParsing.splitEscaped)(modesStr, ':');
    const path = (0, _argumentParsing.getPathFromParsedModes)(parsed, AVAILABLE_MODES);
    const detectedModes = (0, _argumentParsing.getModes)(parsed, AVAILABLE_MODES);
    const optionsString = parsed.filter(item => !!item).join(':');
    const options = parsed.length ? (0, _argumentParsing.splitEscaped)(optionsString, ';') : [];

    return {
        path: path,
        userProfile: detectedModes.userProfile || hasCustomProfile(userArgs),
        headless: detectedModes.headless,
        marionettePort: (0, _argumentParsing.findMatch)(options, /^marionettePort=(.*)/),
        disableMultiprocessing: (0, _argumentParsing.isMatchTrue)(options, /^disableMultiprocessing=(.*)/)
    };
}

function getNewConfig(configString) {
    var _parseConfig = (0, _argumentParsing.parseConfig)(configString);

    const userArgs = _parseConfig.userArgs,
          modesString = _parseConfig.modesString;

    const modes = parseModes(modesString, userArgs);

    return (0, _assign2.default)({ userArgs }, modes);
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9maXJlZm94L2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJjb25maWdTdHJpbmciLCJjb25maWdDYWNoZSIsImdldE5ld0NvbmZpZyIsIkFWQUlMQUJMRV9NT0RFUyIsImhhc0N1c3RvbVByb2ZpbGUiLCJ1c2VyQXJncyIsIm1hdGNoIiwicGFyc2VNb2RlcyIsIm1vZGVzU3RyIiwicGFyc2VkIiwicGF0aCIsImRldGVjdGVkTW9kZXMiLCJvcHRpb25zU3RyaW5nIiwiZmlsdGVyIiwiaXRlbSIsImpvaW4iLCJvcHRpb25zIiwibGVuZ3RoIiwidXNlclByb2ZpbGUiLCJoZWFkbGVzcyIsIm1hcmlvbmV0dGVQb3J0IiwiZGlzYWJsZU11bHRpcHJvY2Vzc2luZyIsIm1vZGVzU3RyaW5nIiwibW9kZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQW1DZSxVQUFVQSxZQUFWLEVBQXdCO0FBQ25DLFFBQUksQ0FBQ0MsWUFBWUQsWUFBWixDQUFMLEVBQ0lDLFlBQVlELFlBQVosSUFBNEJFLGFBQWFGLFlBQWIsQ0FBNUI7O0FBRUosV0FBT0MsWUFBWUQsWUFBWixDQUFQO0FBQ0gsQzs7QUF4Q0Q7Ozs7QUFHQSxNQUFNRyxrQkFBa0IsQ0FBQyxhQUFELEVBQWdCLFVBQWhCLENBQXhCOztBQUVBLE1BQU1GLGNBQWMsRUFBcEI7O0FBRUEsU0FBU0csZ0JBQVQsQ0FBMkJDLFFBQTNCLEVBQXFDO0FBQ2pDLFdBQU8sQ0FBQyxFQUFFQSxTQUFTQyxLQUFULENBQWUsTUFBZixLQUEwQkQsU0FBU0MsS0FBVCxDQUFlLFlBQWYsQ0FBNUIsQ0FBUjtBQUNIOztBQUVELFNBQVNDLFVBQVQsQ0FBcUJDLFFBQXJCLEVBQStCSCxRQUEvQixFQUF5QztBQUNyQyxVQUFNSSxTQUFnQixtQ0FBYUQsUUFBYixFQUF1QixHQUF2QixDQUF0QjtBQUNBLFVBQU1FLE9BQWdCLDZDQUF1QkQsTUFBdkIsRUFBK0JOLGVBQS9CLENBQXRCO0FBQ0EsVUFBTVEsZ0JBQWdCLCtCQUFTRixNQUFULEVBQWlCTixlQUFqQixDQUF0QjtBQUNBLFVBQU1TLGdCQUFnQkgsT0FBT0ksTUFBUCxDQUFjQyxRQUFRLENBQUMsQ0FBQ0EsSUFBeEIsRUFBOEJDLElBQTlCLENBQW1DLEdBQW5DLENBQXRCO0FBQ0EsVUFBTUMsVUFBZ0JQLE9BQU9RLE1BQVAsR0FBZ0IsbUNBQWFMLGFBQWIsRUFBNEIsR0FBNUIsQ0FBaEIsR0FBbUQsRUFBekU7O0FBRUEsV0FBTztBQUNIRixjQUF3QkEsSUFEckI7QUFFSFEscUJBQXdCUCxjQUFjTyxXQUFkLElBQTZCZCxpQkFBaUJDLFFBQWpCLENBRmxEO0FBR0hjLGtCQUF3QlIsY0FBY1EsUUFIbkM7QUFJSEMsd0JBQXdCLGdDQUFVSixPQUFWLEVBQW1CLHNCQUFuQixDQUpyQjtBQUtISyxnQ0FBd0Isa0NBQVlMLE9BQVosRUFBcUIsOEJBQXJCO0FBTHJCLEtBQVA7QUFPSDs7QUFHRCxTQUFTZCxZQUFULENBQXVCRixZQUF2QixFQUFxQztBQUFBLHVCQUNDLGtDQUFZQSxZQUFaLENBREQ7O0FBQUEsVUFDekJLLFFBRHlCLGdCQUN6QkEsUUFEeUI7QUFBQSxVQUNmaUIsV0FEZSxnQkFDZkEsV0FEZTs7QUFFakMsVUFBTUMsUUFBNEJoQixXQUFXZSxXQUFYLEVBQXdCakIsUUFBeEIsQ0FBbEM7O0FBRUEsV0FBTyxzQkFBYyxFQUFFQSxRQUFGLEVBQWQsRUFBNEJrQixLQUE1QixDQUFQO0FBQ0giLCJmaWxlIjoiYnJvd3Nlci9wcm92aWRlci9idWlsdC1pbi9kZWRpY2F0ZWQvZmlyZWZveC9jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaW5kTWF0Y2gsIGlzTWF0Y2hUcnVlLCBzcGxpdEVzY2FwZWQsIHBhcnNlQ29uZmlnLCBnZXRNb2RlcywgZ2V0UGF0aEZyb21QYXJzZWRNb2RlcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2FyZ3VtZW50LXBhcnNpbmcnO1xuXG5cbmNvbnN0IEFWQUlMQUJMRV9NT0RFUyA9IFsndXNlclByb2ZpbGUnLCAnaGVhZGxlc3MnXTtcblxuY29uc3QgY29uZmlnQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaGFzQ3VzdG9tUHJvZmlsZSAodXNlckFyZ3MpIHtcbiAgICByZXR1cm4gISEodXNlckFyZ3MubWF0Y2goLy1QXFxzLykgfHwgdXNlckFyZ3MubWF0Y2goLy1wcm9maWxlXFxzLykpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGVzIChtb2Rlc1N0ciwgdXNlckFyZ3MpIHtcbiAgICBjb25zdCBwYXJzZWQgICAgICAgID0gc3BsaXRFc2NhcGVkKG1vZGVzU3RyLCAnOicpO1xuICAgIGNvbnN0IHBhdGggICAgICAgICAgPSBnZXRQYXRoRnJvbVBhcnNlZE1vZGVzKHBhcnNlZCwgQVZBSUxBQkxFX01PREVTKTtcbiAgICBjb25zdCBkZXRlY3RlZE1vZGVzID0gZ2V0TW9kZXMocGFyc2VkLCBBVkFJTEFCTEVfTU9ERVMpO1xuICAgIGNvbnN0IG9wdGlvbnNTdHJpbmcgPSBwYXJzZWQuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKS5qb2luKCc6Jyk7XG4gICAgY29uc3Qgb3B0aW9ucyAgICAgICA9IHBhcnNlZC5sZW5ndGggPyBzcGxpdEVzY2FwZWQob3B0aW9uc1N0cmluZywgJzsnKSA6IFtdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgdXNlclByb2ZpbGU6ICAgICAgICAgICAgZGV0ZWN0ZWRNb2Rlcy51c2VyUHJvZmlsZSB8fCBoYXNDdXN0b21Qcm9maWxlKHVzZXJBcmdzKSxcbiAgICAgICAgaGVhZGxlc3M6ICAgICAgICAgICAgICAgZGV0ZWN0ZWRNb2Rlcy5oZWFkbGVzcyxcbiAgICAgICAgbWFyaW9uZXR0ZVBvcnQ6ICAgICAgICAgZmluZE1hdGNoKG9wdGlvbnMsIC9ebWFyaW9uZXR0ZVBvcnQ9KC4qKS8pLFxuICAgICAgICBkaXNhYmxlTXVsdGlwcm9jZXNzaW5nOiBpc01hdGNoVHJ1ZShvcHRpb25zLCAvXmRpc2FibGVNdWx0aXByb2Nlc3Npbmc9KC4qKS8pXG4gICAgfTtcbn1cblxuXG5mdW5jdGlvbiBnZXROZXdDb25maWcgKGNvbmZpZ1N0cmluZykge1xuICAgIGNvbnN0IHsgdXNlckFyZ3MsIG1vZGVzU3RyaW5nIH0gPSBwYXJzZUNvbmZpZyhjb25maWdTdHJpbmcpO1xuICAgIGNvbnN0IG1vZGVzICAgICAgICAgICAgICAgICAgICAgPSBwYXJzZU1vZGVzKG1vZGVzU3RyaW5nLCB1c2VyQXJncyk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHVzZXJBcmdzIH0sIG1vZGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZ1N0cmluZykge1xuICAgIGlmICghY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSlcbiAgICAgICAgY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSA9IGdldE5ld0NvbmZpZyhjb25maWdTdHJpbmcpO1xuXG4gICAgcmV0dXJuIGNvbmZpZ0NhY2hlW2NvbmZpZ1N0cmluZ107XG59XG4iXX0=
