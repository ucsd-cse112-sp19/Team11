'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let generatePreferences = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (profileDir, { marionettePort, config }) {
        const prefsFileName = _path2.default.join(profileDir, 'user.js');

        let prefs = ['user_pref("browser.link.open_newwindow.override.external", 2);', 'user_pref("app.update.enabled", false);', 'user_pref("app.update.auto", false);', 'user_pref("app.update.mode", 0);', 'user_pref("app.update.service.enabled", false);', 'user_pref("browser.shell.checkDefaultBrowser", false);', 'user_pref("browser.usedOnWindows10", true);', 'user_pref("browser.rights.3.shown", true);', 'user_pref("browser.startup.homepage_override.mstone","ignore");', 'user_pref("browser.tabs.warnOnCloseOtherTabs", false);', 'user_pref("browser.tabs.warnOnClose", false);', 'user_pref("browser.sessionstore.resume_from_crash", false);', 'user_pref("toolkit.telemetry.reportingpolicy.firstRun", false);', 'user_pref("toolkit.telemetry.enabled", false);', 'user_pref("toolkit.telemetry.rejected", true);', 'user_pref("datareporting.healthreport.uploadEnabled", false);', 'user_pref("datareporting.healthreport.service.enabled", false);', 'user_pref("datareporting.healthreport.service.firstRun", false);', 'user_pref("datareporting.policy.dataSubmissionEnabled", false);', 'user_pref("datareporting.policy.dataSubmissionPolicyBypassNotification", true);', 'user_pref("app.shield.optoutstudies.enabled", false);', 'user_pref("extensions.shield-recipe-client.enabled", false);', 'user_pref("extensions.shield-recipe-client.first_run", false);', 'user_pref("extensions.shield-recipe-client.startupExperimentPrefs.browser.newtabpage.activity-stream.enabled", false);', 'user_pref("devtools.toolbox.host", "window");', 'user_pref("devtools.toolbox.previousHost", "bottom");', 'user_pref("signon.rememberSignons", false);'];

        if (marionettePort) {
            prefs = prefs.concat([`user_pref("marionette.port", ${marionettePort});`, 'user_pref("marionette.enabled", true);']);
        }

        if (config.disableMultiprocessing) {
            prefs = prefs.concat(['user_pref("browser.tabs.remote.autostart", false);', 'user_pref("browser.tabs.remote.autostart.2", false);']);
        }

        yield (0, _promisifiedFunctions.writeFile)(prefsFileName, prefs.join('\n'));
    });

    return function generatePreferences(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _tempDirectory = require('../../../../../utils/temp-directory');

var _tempDirectory2 = _interopRequireDefault(_tempDirectory);

var _promisifiedFunctions = require('../../../../../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        const tmpDir = yield _tempDirectory2.default.createDirectory('firefox-profile');

        yield generatePreferences(tmpDir.path, runtimeInfo);

        return tmpDir;
    });

    return function (_x3) {
        return _ref2.apply(this, arguments);
    };
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2RlZGljYXRlZC9maXJlZm94L2NyZWF0ZS10ZW1wLXByb2ZpbGUuanMiXSwibmFtZXMiOlsicHJvZmlsZURpciIsIm1hcmlvbmV0dGVQb3J0IiwiY29uZmlnIiwicHJlZnNGaWxlTmFtZSIsInBhdGgiLCJqb2luIiwicHJlZnMiLCJjb25jYXQiLCJkaXNhYmxlTXVsdGlwcm9jZXNzaW5nIiwiZ2VuZXJhdGVQcmVmZXJlbmNlcyIsInJ1bnRpbWVJbmZvIiwidG1wRGlyIiwiVGVtcERpcmVjdG9yeSIsImNyZWF0ZURpcmVjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OytDQUtBLFdBQW9DQSxVQUFwQyxFQUFnRCxFQUFFQyxjQUFGLEVBQWtCQyxNQUFsQixFQUFoRCxFQUE0RTtBQUN4RSxjQUFNQyxnQkFBZ0JDLGVBQUtDLElBQUwsQ0FBVUwsVUFBVixFQUFzQixTQUF0QixDQUF0Qjs7QUFFQSxZQUFJTSxRQUFRLENBQ1IsZ0VBRFEsRUFFUix5Q0FGUSxFQUdSLHNDQUhRLEVBSVIsa0NBSlEsRUFLUixpREFMUSxFQU1SLHdEQU5RLEVBT1IsNkNBUFEsRUFRUiw0Q0FSUSxFQVNSLGlFQVRRLEVBVVIsd0RBVlEsRUFXUiwrQ0FYUSxFQVlSLDZEQVpRLEVBYVIsaUVBYlEsRUFjUixnREFkUSxFQWVSLGdEQWZRLEVBZ0JSLCtEQWhCUSxFQWlCUixpRUFqQlEsRUFrQlIsa0VBbEJRLEVBbUJSLGlFQW5CUSxFQW9CUixpRkFwQlEsRUFxQlIsdURBckJRLEVBc0JSLDhEQXRCUSxFQXVCUixnRUF2QlEsRUF3QlIsd0hBeEJRLEVBeUJSLCtDQXpCUSxFQTBCUix1REExQlEsRUEyQlIsNkNBM0JRLENBQVo7O0FBOEJBLFlBQUlMLGNBQUosRUFBb0I7QUFDaEJLLG9CQUFRQSxNQUFNQyxNQUFOLENBQWEsQ0FDaEIsZ0NBQStCTixjQUFlLElBRDlCLEVBRWpCLHdDQUZpQixDQUFiLENBQVI7QUFJSDs7QUFFRCxZQUFJQyxPQUFPTSxzQkFBWCxFQUFtQztBQUMvQkYsb0JBQVFBLE1BQU1DLE1BQU4sQ0FBYSxDQUNqQixvREFEaUIsRUFFakIsc0RBRmlCLENBQWIsQ0FBUjtBQUlIOztBQUVELGNBQU0scUNBQVVKLGFBQVYsRUFBeUJHLE1BQU1ELElBQU4sQ0FBVyxJQUFYLENBQXpCLENBQU47QUFDSCxLOztvQkFoRGNJLG1COzs7OztBQUxmOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Z0RBcURlLFdBQWdCQyxXQUFoQixFQUE2QjtBQUN4QyxjQUFNQyxTQUFTLE1BQU1DLHdCQUFjQyxlQUFkLENBQThCLGlCQUE5QixDQUFyQjs7QUFFQSxjQUFNSixvQkFBb0JFLE9BQU9QLElBQTNCLEVBQWlDTSxXQUFqQyxDQUFOOztBQUVBLGVBQU9DLE1BQVA7QUFDSCxLIiwiZmlsZSI6ImJyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2ZpcmVmb3gvY3JlYXRlLXRlbXAtcHJvZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IFRlbXBEaXJlY3RvcnkgZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvdGVtcC1kaXJlY3RvcnknO1xuaW1wb3J0IHsgd3JpdGVGaWxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvcHJvbWlzaWZpZWQtZnVuY3Rpb25zJztcblxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVByZWZlcmVuY2VzIChwcm9maWxlRGlyLCB7IG1hcmlvbmV0dGVQb3J0LCBjb25maWcgfSkge1xuICAgIGNvbnN0IHByZWZzRmlsZU5hbWUgPSBwYXRoLmpvaW4ocHJvZmlsZURpciwgJ3VzZXIuanMnKTtcblxuICAgIGxldCBwcmVmcyA9IFtcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIubGluay5vcGVuX25ld3dpbmRvdy5vdmVycmlkZS5leHRlcm5hbFwiLCAyKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiYXBwLnVwZGF0ZS5lbmFibGVkXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiYXBwLnVwZGF0ZS5hdXRvXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiYXBwLnVwZGF0ZS5tb2RlXCIsIDApOycsXG4gICAgICAgICd1c2VyX3ByZWYoXCJhcHAudXBkYXRlLnNlcnZpY2UuZW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIuc2hlbGwuY2hlY2tEZWZhdWx0QnJvd3NlclwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIudXNlZE9uV2luZG93czEwXCIsIHRydWUpOycsXG4gICAgICAgICd1c2VyX3ByZWYoXCJicm93c2VyLnJpZ2h0cy4zLnNob3duXCIsIHRydWUpOycsXG4gICAgICAgICd1c2VyX3ByZWYoXCJicm93c2VyLnN0YXJ0dXAuaG9tZXBhZ2Vfb3ZlcnJpZGUubXN0b25lXCIsXCJpZ25vcmVcIik7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIudGFicy53YXJuT25DbG9zZU90aGVyVGFic1wiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIudGFicy53YXJuT25DbG9zZVwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImJyb3dzZXIuc2Vzc2lvbnN0b3JlLnJlc3VtZV9mcm9tX2NyYXNoXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwidG9vbGtpdC50ZWxlbWV0cnkucmVwb3J0aW5ncG9saWN5LmZpcnN0UnVuXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwidG9vbGtpdC50ZWxlbWV0cnkuZW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcInRvb2xraXQudGVsZW1ldHJ5LnJlamVjdGVkXCIsIHRydWUpOycsXG4gICAgICAgICd1c2VyX3ByZWYoXCJkYXRhcmVwb3J0aW5nLmhlYWx0aHJlcG9ydC51cGxvYWRFbmFibGVkXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiZGF0YXJlcG9ydGluZy5oZWFsdGhyZXBvcnQuc2VydmljZS5lbmFibGVkXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiZGF0YXJlcG9ydGluZy5oZWFsdGhyZXBvcnQuc2VydmljZS5maXJzdFJ1blwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImRhdGFyZXBvcnRpbmcucG9saWN5LmRhdGFTdWJtaXNzaW9uRW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImRhdGFyZXBvcnRpbmcucG9saWN5LmRhdGFTdWJtaXNzaW9uUG9saWN5QnlwYXNzTm90aWZpY2F0aW9uXCIsIHRydWUpOycsXG4gICAgICAgICd1c2VyX3ByZWYoXCJhcHAuc2hpZWxkLm9wdG91dHN0dWRpZXMuZW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImV4dGVuc2lvbnMuc2hpZWxkLXJlY2lwZS1jbGllbnQuZW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImV4dGVuc2lvbnMuc2hpZWxkLXJlY2lwZS1jbGllbnQuZmlyc3RfcnVuXCIsIGZhbHNlKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiZXh0ZW5zaW9ucy5zaGllbGQtcmVjaXBlLWNsaWVudC5zdGFydHVwRXhwZXJpbWVudFByZWZzLmJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZW5hYmxlZFwiLCBmYWxzZSk7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcImRldnRvb2xzLnRvb2xib3guaG9zdFwiLCBcIndpbmRvd1wiKTsnLFxuICAgICAgICAndXNlcl9wcmVmKFwiZGV2dG9vbHMudG9vbGJveC5wcmV2aW91c0hvc3RcIiwgXCJib3R0b21cIik7JyxcbiAgICAgICAgJ3VzZXJfcHJlZihcInNpZ25vbi5yZW1lbWJlclNpZ25vbnNcIiwgZmFsc2UpOydcbiAgICBdO1xuXG4gICAgaWYgKG1hcmlvbmV0dGVQb3J0KSB7XG4gICAgICAgIHByZWZzID0gcHJlZnMuY29uY2F0KFtcbiAgICAgICAgICAgIGB1c2VyX3ByZWYoXCJtYXJpb25ldHRlLnBvcnRcIiwgJHttYXJpb25ldHRlUG9ydH0pO2AsXG4gICAgICAgICAgICAndXNlcl9wcmVmKFwibWFyaW9uZXR0ZS5lbmFibGVkXCIsIHRydWUpOydcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5kaXNhYmxlTXVsdGlwcm9jZXNzaW5nKSB7XG4gICAgICAgIHByZWZzID0gcHJlZnMuY29uY2F0KFtcbiAgICAgICAgICAgICd1c2VyX3ByZWYoXCJicm93c2VyLnRhYnMucmVtb3RlLmF1dG9zdGFydFwiLCBmYWxzZSk7JyxcbiAgICAgICAgICAgICd1c2VyX3ByZWYoXCJicm93c2VyLnRhYnMucmVtb3RlLmF1dG9zdGFydC4yXCIsIGZhbHNlKTsnLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBhd2FpdCB3cml0ZUZpbGUocHJlZnNGaWxlTmFtZSwgcHJlZnMuam9pbignXFxuJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAocnVudGltZUluZm8pIHtcbiAgICBjb25zdCB0bXBEaXIgPSBhd2FpdCBUZW1wRGlyZWN0b3J5LmNyZWF0ZURpcmVjdG9yeSgnZmlyZWZveC1wcm9maWxlJyk7XG5cbiAgICBhd2FpdCBnZW5lcmF0ZVByZWZlcmVuY2VzKHRtcERpci5wYXRoLCBydW50aW1lSW5mbyk7XG5cbiAgICByZXR1cm4gdG1wRGlyO1xufVxuIl19
