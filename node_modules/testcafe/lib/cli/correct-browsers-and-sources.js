'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let getBrowserInfo = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (browser) {
        try {
            return {
                error: null,
                info: yield browserProviderPool.getBrowserInfo(browser)
            };
        } catch (err) {
            return {
                error: err,
                info: null
            };
        }
    });

    return function getBrowserInfo(_x) {
        return _ref.apply(this, arguments);
    };
})();

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _optionNames = require('../configuration/option-names');

var _optionNames2 = _interopRequireDefault(_optionNames);

var _runtime = require('../errors/runtime');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: Load the provider pool lazily to reduce startup time
const lazyRequire = require('import-lazy')(require);
const browserProviderPool = lazyRequire('../browser/provider/pool');

exports.default = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (args, configuration) {
        const browsersOption = configuration.getOption(_optionNames2.default.browsers);

        if (!args.browsers || !args.browsers.length) return { browsers: [], sources: args.src };

        if (!browsersOption || !browsersOption.length) return { browsers: args.browsers, sources: args.src };

        const browserInfo = yield _pinkie2.default.all(args.browsers.map(function (browser) {
            return getBrowserInfo(browser);
        }));

        var _partition = (0, _lodash.partition)(browserInfo, function (info) {
            return !info.error;
        });

        const parsedInfo = _partition[0],
              failedInfo = _partition[1];


        if (parsedInfo.length === browserInfo.length) return { browsers: args.browsers, sources: args.src };

        if (!parsedInfo.length) return { browsers: [], sources: [args.args[0], ...args.src] };

        throw new _runtime.CompositeError(failedInfo.map(function (info) {
            return info.error;
        }));
    });

    return function (_x2, _x3) {
        return _ref2.apply(this, arguments);
    };
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29ycmVjdC1icm93c2Vycy1hbmQtc291cmNlcy5qcyJdLCJuYW1lcyI6WyJicm93c2VyIiwiZXJyb3IiLCJpbmZvIiwiYnJvd3NlclByb3ZpZGVyUG9vbCIsImdldEJyb3dzZXJJbmZvIiwiZXJyIiwibGF6eVJlcXVpcmUiLCJyZXF1aXJlIiwiYXJncyIsImNvbmZpZ3VyYXRpb24iLCJicm93c2Vyc09wdGlvbiIsImdldE9wdGlvbiIsIk9QVElPTl9OQU1FUyIsImJyb3dzZXJzIiwibGVuZ3RoIiwic291cmNlcyIsInNyYyIsImJyb3dzZXJJbmZvIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsInBhcnNlZEluZm8iLCJmYWlsZWRJbmZvIiwiQ29tcG9zaXRlRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OzsrQ0FVQSxXQUErQkEsT0FBL0IsRUFBd0M7QUFDcEMsWUFBSTtBQUNBLG1CQUFPO0FBQ0hDLHVCQUFPLElBREo7QUFFSEMsc0JBQU8sTUFBTUMsb0JBQW9CQyxjQUFwQixDQUFtQ0osT0FBbkM7QUFGVixhQUFQO0FBSUgsU0FMRCxDQU1BLE9BQU9LLEdBQVAsRUFBWTtBQUNSLG1CQUFPO0FBQ0hKLHVCQUFPSSxHQURKO0FBRUhILHNCQUFPO0FBRkosYUFBUDtBQUlIO0FBQ0osSzs7b0JBYmNFLGM7Ozs7O0FBVmY7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBRUE7QUFDQSxNQUFNRSxjQUFzQkMsUUFBUSxhQUFSLEVBQXVCQSxPQUF2QixDQUE1QjtBQUNBLE1BQU1KLHNCQUFzQkcsWUFBWSwwQkFBWixDQUE1Qjs7O2dEQWtCZSxXQUFnQkUsSUFBaEIsRUFBc0JDLGFBQXRCLEVBQXFDO0FBQ2hELGNBQU1DLGlCQUFpQkQsY0FBY0UsU0FBZCxDQUF3QkMsc0JBQWFDLFFBQXJDLENBQXZCOztBQUVBLFlBQUksQ0FBQ0wsS0FBS0ssUUFBTixJQUFrQixDQUFDTCxLQUFLSyxRQUFMLENBQWNDLE1BQXJDLEVBQ0ksT0FBTyxFQUFFRCxVQUFVLEVBQVosRUFBZ0JFLFNBQVNQLEtBQUtRLEdBQTlCLEVBQVA7O0FBRUosWUFBSSxDQUFDTixjQUFELElBQW1CLENBQUNBLGVBQWVJLE1BQXZDLEVBQ0ksT0FBTyxFQUFFRCxVQUFVTCxLQUFLSyxRQUFqQixFQUEyQkUsU0FBU1AsS0FBS1EsR0FBekMsRUFBUDs7QUFFSixjQUFNQyxjQUEyQixNQUFNQyxpQkFBUUMsR0FBUixDQUFZWCxLQUFLSyxRQUFMLENBQWNPLEdBQWQsQ0FBa0I7QUFBQSxtQkFBV2hCLGVBQWVKLE9BQWYsQ0FBWDtBQUFBLFNBQWxCLENBQVosQ0FBdkM7O0FBVGdELHlCQVVmLHVCQUFVaUIsV0FBVixFQUF1QjtBQUFBLG1CQUFRLENBQUNmLEtBQUtELEtBQWQ7QUFBQSxTQUF2QixDQVZlOztBQUFBLGNBVXpDb0IsVUFWeUM7QUFBQSxjQVU3QkMsVUFWNkI7OztBQVloRCxZQUFJRCxXQUFXUCxNQUFYLEtBQXNCRyxZQUFZSCxNQUF0QyxFQUNJLE9BQU8sRUFBRUQsVUFBVUwsS0FBS0ssUUFBakIsRUFBMkJFLFNBQVNQLEtBQUtRLEdBQXpDLEVBQVA7O0FBRUosWUFBSSxDQUFDSyxXQUFXUCxNQUFoQixFQUNJLE9BQU8sRUFBRUQsVUFBVSxFQUFaLEVBQWdCRSxTQUFTLENBQUNQLEtBQUtBLElBQUwsQ0FBVSxDQUFWLENBQUQsRUFBZSxHQUFHQSxLQUFLUSxHQUF2QixDQUF6QixFQUFQOztBQUVKLGNBQU0sSUFBSU8sdUJBQUosQ0FBbUJELFdBQVdGLEdBQVgsQ0FBZTtBQUFBLG1CQUFRbEIsS0FBS0QsS0FBYjtBQUFBLFNBQWYsQ0FBbkIsQ0FBTjtBQUNILEsiLCJmaWxlIjoiY2xpL2NvcnJlY3QtYnJvd3NlcnMtYW5kLXNvdXJjZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgcGFydGl0aW9uIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBPUFRJT05fTkFNRVMgZnJvbSAnLi4vY29uZmlndXJhdGlvbi9vcHRpb24tbmFtZXMnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZSc7XG5cbi8vIE5PVEU6IExvYWQgdGhlIHByb3ZpZGVyIHBvb2wgbGF6aWx5IHRvIHJlZHVjZSBzdGFydHVwIHRpbWVcbmNvbnN0IGxhenlSZXF1aXJlICAgICAgICAgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuY29uc3QgYnJvd3NlclByb3ZpZGVyUG9vbCA9IGxhenlSZXF1aXJlKCcuLi9icm93c2VyL3Byb3ZpZGVyL3Bvb2wnKTtcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRCcm93c2VySW5mbyAoYnJvd3Nlcikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIGluZm86ICBhd2FpdCBicm93c2VyUHJvdmlkZXJQb29sLmdldEJyb3dzZXJJbmZvKGJyb3dzZXIpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICBpbmZvOiAgbnVsbFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKGFyZ3MsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCBicm93c2Vyc09wdGlvbiA9IGNvbmZpZ3VyYXRpb24uZ2V0T3B0aW9uKE9QVElPTl9OQU1FUy5icm93c2Vycyk7XG5cbiAgICBpZiAoIWFyZ3MuYnJvd3NlcnMgfHwgIWFyZ3MuYnJvd3NlcnMubGVuZ3RoKVxuICAgICAgICByZXR1cm4geyBicm93c2VyczogW10sIHNvdXJjZXM6IGFyZ3Muc3JjIH07XG5cbiAgICBpZiAoIWJyb3dzZXJzT3B0aW9uIHx8ICFicm93c2Vyc09wdGlvbi5sZW5ndGgpXG4gICAgICAgIHJldHVybiB7IGJyb3dzZXJzOiBhcmdzLmJyb3dzZXJzLCBzb3VyY2VzOiBhcmdzLnNyYyB9O1xuXG4gICAgY29uc3QgYnJvd3NlckluZm8gICAgICAgICAgICAgID0gYXdhaXQgUHJvbWlzZS5hbGwoYXJncy5icm93c2Vycy5tYXAoYnJvd3NlciA9PiBnZXRCcm93c2VySW5mbyhicm93c2VyKSkpO1xuICAgIGNvbnN0IFtwYXJzZWRJbmZvLCBmYWlsZWRJbmZvXSA9IHBhcnRpdGlvbihicm93c2VySW5mbywgaW5mbyA9PiAhaW5mby5lcnJvcik7XG5cbiAgICBpZiAocGFyc2VkSW5mby5sZW5ndGggPT09IGJyb3dzZXJJbmZvLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHsgYnJvd3NlcnM6IGFyZ3MuYnJvd3NlcnMsIHNvdXJjZXM6IGFyZ3Muc3JjIH07XG5cbiAgICBpZiAoIXBhcnNlZEluZm8ubGVuZ3RoKVxuICAgICAgICByZXR1cm4geyBicm93c2VyczogW10sIHNvdXJjZXM6IFthcmdzLmFyZ3NbMF0sIC4uLmFyZ3Muc3JjXSB9O1xuXG4gICAgdGhyb3cgbmV3IENvbXBvc2l0ZUVycm9yKGZhaWxlZEluZm8ubWFwKGluZm8gPT4gaW5mby5lcnJvcikpO1xufVxuIl19
