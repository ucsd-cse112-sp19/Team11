'use strict';

exports.__esModule = true;

var _tty = require('tty');

var _tty2 = _interopRequireDefault(_tty);

var _elegantSpinner = require('elegant-spinner');

var _elegantSpinner2 = _interopRequireDefault(_elegantSpinner);

var _logUpdateAsyncHook = require('log-update-async-hook');

var _logUpdateAsyncHook2 = _interopRequireDefault(_logUpdateAsyncHook);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _isCi = require('is-ci');

var _isCi2 = _interopRequireDefault(_isCi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: To support piping, we use stderr as the log output
// stream, while stdout is used for the report output.
exports.default = {
    animation: null,
    isAnimated: _tty2.default.isatty(1) && !_isCi2.default,

    showSpinner() {
        // NOTE: we can use the spinner only if stderr is a TTY and we are not in CI environment (e.g. TravisCI),
        // otherwise we can't repaint animation frames. Thanks https://github.com/sindresorhus/ora for insight.
        if (this.isAnimated) {
            const spinnerFrame = (0, _elegantSpinner2.default)();

            this.animation = setInterval(() => {
                const frame = _chalk2.default.cyan(spinnerFrame());

                _logUpdateAsyncHook2.default.stderr(frame);
            }, 50);
        }
    },

    hideSpinner(isExit) {
        if (this.animation) {
            clearInterval(this.animation);
            _logUpdateAsyncHook2.default.stderr.clear();

            if (isExit) _logUpdateAsyncHook2.default.stderr.done();

            this.animation = null;
        }
    },

    write(text) {
        const isAnimating = !!this.animation;

        if (isAnimating) this.hideSpinner();

        console.error(text);

        if (isAnimating) this.showSpinner();
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvbG9nLmpzIl0sIm5hbWVzIjpbImFuaW1hdGlvbiIsImlzQW5pbWF0ZWQiLCJ0dHkiLCJpc2F0dHkiLCJpc0NJIiwic2hvd1NwaW5uZXIiLCJzcGlubmVyRnJhbWUiLCJzZXRJbnRlcnZhbCIsImZyYW1lIiwiY2hhbGsiLCJjeWFuIiwibG9nVXBkYXRlIiwic3RkZXJyIiwiaGlkZVNwaW5uZXIiLCJpc0V4aXQiLCJjbGVhckludGVydmFsIiwiY2xlYXIiLCJkb25lIiwid3JpdGUiLCJ0ZXh0IiwiaXNBbmltYXRpbmciLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTtBQUNBO2tCQUNlO0FBQ1hBLGVBQVksSUFERDtBQUVYQyxnQkFBWUMsY0FBSUMsTUFBSixDQUFXLENBQVgsS0FBaUIsQ0FBQ0MsY0FGbkI7O0FBSVhDLGtCQUFlO0FBQ1g7QUFDQTtBQUNBLFlBQUksS0FBS0osVUFBVCxFQUFxQjtBQUNqQixrQkFBTUssZUFBZSwrQkFBckI7O0FBRUEsaUJBQUtOLFNBQUwsR0FBaUJPLFlBQVksTUFBTTtBQUMvQixzQkFBTUMsUUFBUUMsZ0JBQU1DLElBQU4sQ0FBV0osY0FBWCxDQUFkOztBQUVBSyw2Q0FBVUMsTUFBVixDQUFpQkosS0FBakI7QUFDSCxhQUpnQixFQUlkLEVBSmMsQ0FBakI7QUFLSDtBQUNKLEtBaEJVOztBQWtCWEssZ0JBQWFDLE1BQWIsRUFBcUI7QUFDakIsWUFBSSxLQUFLZCxTQUFULEVBQW9CO0FBQ2hCZSwwQkFBYyxLQUFLZixTQUFuQjtBQUNBVyx5Q0FBVUMsTUFBVixDQUFpQkksS0FBakI7O0FBRUEsZ0JBQUlGLE1BQUosRUFDSUgsNkJBQVVDLE1BQVYsQ0FBaUJLLElBQWpCOztBQUVKLGlCQUFLakIsU0FBTCxHQUFpQixJQUFqQjtBQUNIO0FBQ0osS0E1QlU7O0FBOEJYa0IsVUFBT0MsSUFBUCxFQUFhO0FBQ1QsY0FBTUMsY0FBYyxDQUFDLENBQUMsS0FBS3BCLFNBQTNCOztBQUVBLFlBQUlvQixXQUFKLEVBQ0ksS0FBS1AsV0FBTDs7QUFFSlEsZ0JBQVFDLEtBQVIsQ0FBY0gsSUFBZDs7QUFFQSxZQUFJQyxXQUFKLEVBQ0ksS0FBS2YsV0FBTDtBQUNQO0FBeENVLEMiLCJmaWxlIjoiY2xpL2xvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0dHkgZnJvbSAndHR5JztcbmltcG9ydCBlbGVnYW50U3Bpbm5lciBmcm9tICdlbGVnYW50LXNwaW5uZXInO1xuaW1wb3J0IGxvZ1VwZGF0ZSBmcm9tICdsb2ctdXBkYXRlLWFzeW5jLWhvb2snO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBpc0NJIGZyb20gJ2lzLWNpJztcblxuLy8gTk9URTogVG8gc3VwcG9ydCBwaXBpbmcsIHdlIHVzZSBzdGRlcnIgYXMgdGhlIGxvZyBvdXRwdXRcbi8vIHN0cmVhbSwgd2hpbGUgc3Rkb3V0IGlzIHVzZWQgZm9yIHRoZSByZXBvcnQgb3V0cHV0LlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGFuaW1hdGlvbjogIG51bGwsXG4gICAgaXNBbmltYXRlZDogdHR5LmlzYXR0eSgxKSAmJiAhaXNDSSxcblxuICAgIHNob3dTcGlubmVyICgpIHtcbiAgICAgICAgLy8gTk9URTogd2UgY2FuIHVzZSB0aGUgc3Bpbm5lciBvbmx5IGlmIHN0ZGVyciBpcyBhIFRUWSBhbmQgd2UgYXJlIG5vdCBpbiBDSSBlbnZpcm9ubWVudCAoZS5nLiBUcmF2aXNDSSksXG4gICAgICAgIC8vIG90aGVyd2lzZSB3ZSBjYW4ndCByZXBhaW50IGFuaW1hdGlvbiBmcmFtZXMuIFRoYW5rcyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL29yYSBmb3IgaW5zaWdodC5cbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3Bpbm5lckZyYW1lID0gZWxlZ2FudFNwaW5uZXIoKTtcblxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJhbWUgPSBjaGFsay5jeWFuKHNwaW5uZXJGcmFtZSgpKTtcblxuICAgICAgICAgICAgICAgIGxvZ1VwZGF0ZS5zdGRlcnIoZnJhbWUpO1xuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhpZGVTcGlubmVyIChpc0V4aXQpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuYW5pbWF0aW9uKTtcbiAgICAgICAgICAgIGxvZ1VwZGF0ZS5zdGRlcnIuY2xlYXIoKTtcblxuICAgICAgICAgICAgaWYgKGlzRXhpdClcbiAgICAgICAgICAgICAgICBsb2dVcGRhdGUuc3RkZXJyLmRvbmUoKTtcblxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHdyaXRlICh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGlzQW5pbWF0aW5nID0gISF0aGlzLmFuaW1hdGlvbjtcblxuICAgICAgICBpZiAoaXNBbmltYXRpbmcpXG4gICAgICAgICAgICB0aGlzLmhpZGVTcGlubmVyKCk7XG5cbiAgICAgICAgY29uc29sZS5lcnJvcih0ZXh0KTtcblxuICAgICAgICBpZiAoaXNBbmltYXRpbmcpXG4gICAgICAgICAgICB0aGlzLnNob3dTcGlubmVyKCk7XG4gICAgfVxufTtcblxuIl19
