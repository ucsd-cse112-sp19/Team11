'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _testRunTracker = require('../api/test-run-tracker');

var _testRunTracker2 = _interopRequireDefault(_testRunTracker);

var _builderSymbol = require('./builder-symbol');

var _builderSymbol2 = _interopRequireDefault(_builderSymbol);

var _replicator = require('./replicator');

var _observation = require('../test-run/commands/observation');

var _compileClientFunction = require('../compiler/compile-client-function');

var _compileClientFunction2 = _interopRequireDefault(_compileClientFunction);

var _runtime = require('../errors/runtime');

var _typeAssertions = require('../errors/runtime/type-assertions');

var _types = require('../errors/types');

var _getCallsite = require('../errors/get-callsite');

var _reExecutablePromise = require('../utils/re-executable-promise');

var _reExecutablePromise2 = _interopRequireDefault(_reExecutablePromise);

var _markerSymbol = require('../test-run/marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_EXECUTION_CALLSITE_NAME = '__$$clientFunction$$';

class ClientFunctionBuilder {
    constructor(fn, options, callsiteNames = {}) {
        this.callsiteNames = {
            instantiation: callsiteNames.instantiation,
            execution: callsiteNames.execution || DEFAULT_EXECUTION_CALLSITE_NAME
        };

        if ((0, _lodash.isNil)(options)) options = {};

        this._validateOptions(options);

        this.fn = fn;
        this.options = options;
        this.compiledFnCode = this._getCompiledFnCode();

        if (!this.compiledFnCode) throw this._createInvalidFnTypeError();

        this.replicator = (0, _replicator.createReplicator)(this._getReplicatorTransforms());
    }

    _decorateFunction(clientFn) {
        clientFn[_builderSymbol2.default] = this;

        clientFn.with = options => {
            if (typeof options === 'object') options = (0, _lodash.assign)({}, this.options, options);

            const builder = new this.constructor(this.fn, options, {
                instantiation: 'with',
                execution: this.callsiteNames.execution
            });

            return builder.getFunction();
        };
    }

    getBoundTestRun() {
        // NOTE: `boundTestRun` can be either TestController or TestRun instance.
        if (this.options.boundTestRun) return this.options.boundTestRun.testRun || this.options.boundTestRun;

        return null;
    }

    _getTestRun() {
        return this.getBoundTestRun() || _testRunTracker2.default.resolveContextTestRun();
    }

    getFunction() {
        const builder = this;

        const clientFn = function __$$clientFunction$$() {
            const testRun = builder._getTestRun();
            const callsite = (0, _getCallsite.getCallsiteForMethod)(builder.callsiteNames.execution);
            const args = [];

            // OPTIMIZATION: don't leak `arguments` object.
            for (let i = 0; i < arguments.length; i++) args.push(arguments[i]);

            return builder._executeCommand(args, testRun, callsite);
        };

        this._decorateFunction(clientFn);

        return clientFn;
    }

    getCommand(args) {
        const encodedArgs = this.replicator.encode(args);
        const encodedDependencies = this.replicator.encode(this.getFunctionDependencies());

        return this._createTestRunCommand(encodedArgs, encodedDependencies);
    }

    // Overridable methods
    getFunctionDependencies() {
        return this.options.dependencies || {};
    }

    _createTestRunCommand(encodedArgs, encodedDependencies) {
        return new _observation.ExecuteClientFunctionCommand({
            instantiationCallsiteName: this.callsiteNames.instantiation,
            fnCode: this.compiledFnCode,
            args: encodedArgs,
            dependencies: encodedDependencies
        }, this._getTestRun());
    }

    _getCompiledFnCode() {
        if (typeof this.fn === 'function') return (0, _compileClientFunction2.default)(this.fn.toString(), this.options.dependencies, this.callsiteNames.instantiation, this.callsiteNames.instantiation);

        return null;
    }

    _createInvalidFnTypeError() {
        return new _runtime.ClientFunctionAPIError(this.callsiteNames.instantiation, this.callsiteNames.instantiation, _types.RUNTIME_ERRORS.clientFunctionCodeIsNotAFunction, typeof this.fn);
    }

    _executeCommand(args, testRun, callsite) {
        var _this = this;

        // NOTE: should be kept outside of lazy promise to preserve
        // correct callsite in case of replicator error.
        const command = this.getCommand(args);

        return _reExecutablePromise2.default.fromFn((0, _asyncToGenerator3.default)(function* () {
            if (!testRun) {
                const err = new _runtime.ClientFunctionAPIError(_this.callsiteNames.execution, _this.callsiteNames.instantiation, _types.RUNTIME_ERRORS.clientFunctionCannotResolveTestRun);

                // NOTE: force callsite here, because more likely it will
                // be impossible to resolve it by method name from a lazy promise.
                err.callsite = callsite;

                throw err;
            }

            const result = yield testRun.executeCommand(command, callsite);

            return _this._processResult(result, args);
        }));
    }

    _processResult(result) {
        return this.replicator.decode(result);
    }

    _validateOptions(options) {
        (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, this.callsiteNames.instantiation, '"options" argument', options);

        if (!(0, _lodash.isNil)(options.boundTestRun)) {
            // NOTE: `boundTestRun` can be either TestController or TestRun instance.
            const boundTestRun = options.boundTestRun.testRun || options.boundTestRun;

            if (!boundTestRun[_markerSymbol2.default]) throw new _runtime.APIError(this.callsiteNames.instantiation, _types.RUNTIME_ERRORS.invalidClientFunctionTestRunBinding);
        }

        if (!(0, _lodash.isNil)(options.dependencies)) (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, this.callsiteNames.instantiation, '"dependencies" option', options.dependencies);
    }

    _getReplicatorTransforms() {
        return [new _replicator.FunctionTransform(this.callsiteNames)];
    }
}
exports.default = ClientFunctionBuilder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
