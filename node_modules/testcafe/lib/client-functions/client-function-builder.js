"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const test_run_tracker_1 = __importDefault(require("../api/test-run-tracker"));
const builder_symbol_1 = __importDefault(require("./builder-symbol"));
const replicator_1 = require("./replicator");
const observation_1 = require("../test-run/commands/observation");
const compile_client_function_1 = __importDefault(require("../compiler/compile-client-function"));
const runtime_1 = require("../errors/runtime");
const type_assertions_1 = require("../errors/runtime/type-assertions");
const types_1 = require("../errors/types");
const get_callsite_1 = require("../errors/get-callsite");
const re_executable_promise_1 = __importDefault(require("../utils/re-executable-promise"));
const marker_symbol_1 = __importDefault(require("../test-run/marker-symbol"));
const DEFAULT_EXECUTION_CALLSITE_NAME = '__$$clientFunction$$';
class ClientFunctionBuilder {
    constructor(fn, options, callsiteNames = {}) {
        this.callsiteNames = {
            instantiation: callsiteNames.instantiation,
            execution: callsiteNames.execution || DEFAULT_EXECUTION_CALLSITE_NAME
        };
        if (lodash_1.isNil(options))
            options = {};
        this._validateOptions(options);
        this.fn = fn;
        this.options = options;
        this.compiledFnCode = this._getCompiledFnCode();
        if (!this.compiledFnCode)
            throw this._createInvalidFnTypeError();
        this.replicator = replicator_1.createReplicator(this._getReplicatorTransforms());
    }
    _decorateFunction(clientFn) {
        clientFn[builder_symbol_1.default] = this;
        clientFn.with = options => {
            if (typeof options === 'object')
                options = lodash_1.assign({}, this.options, options);
            const builder = new this.constructor(this.fn, options, {
                instantiation: 'with',
                execution: this.callsiteNames.execution
            });
            return builder.getFunction();
        };
    }
    getBoundTestRun() {
        // NOTE: `boundTestRun` can be either TestController or TestRun instance.
        if (this.options.boundTestRun)
            return this.options.boundTestRun.testRun || this.options.boundTestRun;
        return null;
    }
    _getTestRun() {
        return this.getBoundTestRun() || test_run_tracker_1.default.resolveContextTestRun();
    }
    getFunction() {
        const builder = this;
        const clientFn = function __$$clientFunction$$() {
            const testRun = builder._getTestRun();
            const callsite = get_callsite_1.getCallsiteForMethod(builder.callsiteNames.execution);
            const args = [];
            // OPTIMIZATION: don't leak `arguments` object.
            for (let i = 0; i < arguments.length; i++)
                args.push(arguments[i]);
            return builder._executeCommand(args, testRun, callsite);
        };
        this._decorateFunction(clientFn);
        return clientFn;
    }
    getCommand(args) {
        const encodedArgs = this.replicator.encode(args);
        const encodedDependencies = this.replicator.encode(this.getFunctionDependencies());
        return this._createTestRunCommand(encodedArgs, encodedDependencies);
    }
    // Overridable methods
    getFunctionDependencies() {
        return this.options.dependencies || {};
    }
    _createTestRunCommand(encodedArgs, encodedDependencies) {
        return new observation_1.ExecuteClientFunctionCommand({
            instantiationCallsiteName: this.callsiteNames.instantiation,
            fnCode: this.compiledFnCode,
            args: encodedArgs,
            dependencies: encodedDependencies
        }, this._getTestRun());
    }
    _getCompiledFnCode() {
        if (typeof this.fn === 'function')
            return compile_client_function_1.default(this.fn.toString(), this.options.dependencies, this.callsiteNames.instantiation, this.callsiteNames.instantiation);
        return null;
    }
    _createInvalidFnTypeError() {
        return new runtime_1.ClientFunctionAPIError(this.callsiteNames.instantiation, this.callsiteNames.instantiation, types_1.RUNTIME_ERRORS.clientFunctionCodeIsNotAFunction, typeof this.fn);
    }
    _executeCommand(args, testRun, callsite) {
        // NOTE: should be kept outside of lazy promise to preserve
        // correct callsite in case of replicator error.
        const command = this.getCommand(args);
        return re_executable_promise_1.default.fromFn(async () => {
            if (!testRun) {
                const err = new runtime_1.ClientFunctionAPIError(this.callsiteNames.execution, this.callsiteNames.instantiation, types_1.RUNTIME_ERRORS.clientFunctionCannotResolveTestRun);
                // NOTE: force callsite here, because more likely it will
                // be impossible to resolve it by method name from a lazy promise.
                err.callsite = callsite;
                throw err;
            }
            const result = await testRun.executeCommand(command, callsite);
            return this._processResult(result, args);
        });
    }
    _processResult(result) {
        return this.replicator.decode(result);
    }
    _validateOptions(options) {
        type_assertions_1.assertType(type_assertions_1.is.nonNullObject, this.callsiteNames.instantiation, '"options" argument', options);
        if (!lodash_1.isNil(options.boundTestRun)) {
            // NOTE: `boundTestRun` can be either TestController or TestRun instance.
            const boundTestRun = options.boundTestRun.testRun || options.boundTestRun;
            if (!boundTestRun[marker_symbol_1.default])
                throw new runtime_1.APIError(this.callsiteNames.instantiation, types_1.RUNTIME_ERRORS.invalidClientFunctionTestRunBinding);
        }
        if (!lodash_1.isNil(options.dependencies))
            type_assertions_1.assertType(type_assertions_1.is.nonNullObject, this.callsiteNames.instantiation, '"dependencies" option', options.dependencies);
    }
    _getReplicatorTransforms() {
        return [
            new replicator_1.FunctionTransform(this.callsiteNames)
        ];
    }
}
exports.default = ClientFunctionBuilder;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,