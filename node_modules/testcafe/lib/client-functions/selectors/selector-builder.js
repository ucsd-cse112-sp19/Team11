'use strict';

exports.__esModule = true;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _lodash = require('lodash');

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _clientFunctionBuilder = require('../client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

var _replicator = require('../replicator');

var _runtime = require('../../errors/runtime');

var _builderSymbol = require('../builder-symbol');

var _builderSymbol2 = _interopRequireDefault(_builderSymbol);

var _types = require('../../errors/types');

var _typeAssertions = require('../../errors/runtime/type-assertions');

var _observation = require('../../test-run/commands/observation');

var _defineLazyProperty = require('../../utils/define-lazy-property');

var _defineLazyProperty2 = _interopRequireDefault(_defineLazyProperty);

var _addApi = require('./add-api');

var _createSnapshotMethods = require('./create-snapshot-methods');

var _createSnapshotMethods2 = _interopRequireDefault(_createSnapshotMethods);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SelectorBuilder extends _clientFunctionBuilder2.default {
    constructor(fn, options, callsiteNames) {
        const apiFn = options && options.apiFn;
        const builderFromSelector = fn && fn[_builderSymbol2.default];
        const builderFromPromiseOrSnapshot = fn && fn.selector && fn.selector[_builderSymbol2.default];
        let builder = builderFromSelector || builderFromPromiseOrSnapshot;

        builder = builder instanceof SelectorBuilder ? builder : null;

        if (builder) {
            fn = builder.fn;

            if (options === void 0 || typeof options === 'object') options = (0, _lodash.merge)({}, builder.options, options, { sourceSelectorBuilder: builder });
        }

        super(fn, options, callsiteNames);

        if (!this.options.apiFnChain) {
            const fnType = typeof this.fn;
            let item = fnType === 'string' ? `'${this.fn}'` : `[${fnType}]`;

            item = `Selector(${item})`;
            this.options.apiFn = item;
            this.options.apiFnChain = [item];
        }

        if (apiFn) this.options.apiFnChain.push(apiFn);

        this.options.apiFnID = this.options.apiFnChain.length - 1;
    }

    _getCompiledFnCode() {
        // OPTIMIZATION: if selector was produced from another selector and
        // it has same dependencies as source selector, then we can
        // avoid recompilation and just re-use already compiled code.
        const hasSameDependenciesAsSourceSelector = this.options.sourceSelectorBuilder && this.options.sourceSelectorBuilder.options.dependencies === this.options.dependencies;

        if (hasSameDependenciesAsSourceSelector) return this.options.sourceSelectorBuilder.compiledFnCode;

        const code = typeof this.fn === 'string' ? `(function(){return document.querySelectorAll(${(0, _stringify2.default)(this.fn)});});` : super._getCompiledFnCode();

        if (code) {
            return (0, _dedent2.default)(`(function(){
                    var __f$=${code};
                    return function(){
                        var args           = __dependencies$.boundArgs || arguments;
                        var selectorFilter = window['%testCafeSelectorFilter%'];
                        
                        var nodes = __f$.apply(this, args);
                        nodes     = selectorFilter.cast(nodes);
                        
                        if (!nodes.length && !selectorFilter.error)
                            selectorFilter.error = __dependencies$.apiInfo.apiFnID;

                        return selectorFilter.filter(nodes, __dependencies$.filterOptions, __dependencies$.apiInfo);
                    };
                 })();`);
        }

        return null;
    }

    _createInvalidFnTypeError() {
        return new _runtime.ClientFunctionAPIError(this.callsiteNames.instantiation, this.callsiteNames.instantiation, _types.RUNTIME_ERRORS.selectorInitializedWithWrongType, typeof this.fn);
    }

    _executeCommand(args, testRun, callsite) {
        const resultPromise = super._executeCommand(args, testRun, callsite);

        this._addBoundArgsSelectorGetter(resultPromise, args);

        // OPTIMIZATION: use buffer function as selector not to trigger lazy property ahead of time
        (0, _addApi.addAPI)(resultPromise, () => resultPromise.selector, SelectorBuilder, this.options.customDOMProperties, this.options.customMethods);

        return resultPromise;
    }

    _getSourceSelectorBuilderApiFnID() {
        let selectorAncestor = this;

        while (selectorAncestor.options.sourceSelectorBuilder) selectorAncestor = selectorAncestor.options.sourceSelectorBuilder;

        return selectorAncestor.options.apiFnID;
    }

    getFunctionDependencies() {
        const dependencies = super.getFunctionDependencies();

        var _options = this.options;
        const filterVisible = _options.filterVisible,
              filterHidden = _options.filterHidden,
              counterMode = _options.counterMode,
              collectionMode = _options.collectionMode,
              index = _options.index,
              customDOMProperties = _options.customDOMProperties,
              customMethods = _options.customMethods,
              apiFnChain = _options.apiFnChain,
              boundArgs = _options.boundArgs;


        return (0, _lodash.merge)({}, dependencies, {
            filterOptions: {
                filterVisible,
                filterHidden,
                counterMode,
                collectionMode,
                index: (0, _lodash.isNil)(index) ? null : index
            },
            apiInfo: {
                apiFnChain,
                apiFnID: this._getSourceSelectorBuilderApiFnID()
            },
            boundArgs,
            customDOMProperties,
            customMethods
        });
    }

    _createTestRunCommand(encodedArgs, encodedDependencies) {
        return new _observation.ExecuteSelectorCommand({
            instantiationCallsiteName: this.callsiteNames.instantiation,
            fnCode: this.compiledFnCode,
            args: encodedArgs,
            dependencies: encodedDependencies,
            needError: this.options.needError,
            apiFnChain: this.options.apiFnChain,
            visibilityCheck: !!this.options.visibilityCheck,
            timeout: this.options.timeout
        });
    }

    _validateOptions(options) {
        super._validateOptions(options);

        if (!(0, _lodash.isNil)(options.visibilityCheck)) (0, _typeAssertions.assertType)(_typeAssertions.is.boolean, this.callsiteNames.instantiation, '"visibilityCheck" option', options.visibilityCheck);

        if (!(0, _lodash.isNil)(options.timeout)) (0, _typeAssertions.assertType)(_typeAssertions.is.nonNegativeNumber, this.callsiteNames.instantiation, '"timeout" option', options.timeout);
    }

    _getReplicatorTransforms() {
        const transforms = super._getReplicatorTransforms();

        transforms.push(new _replicator.SelectorNodeTransform());

        return transforms;
    }

    _addBoundArgsSelectorGetter(obj, selectorArgs) {
        (0, _defineLazyProperty2.default)(obj, 'selector', () => {
            const builder = new SelectorBuilder(this.getFunction(), { boundArgs: selectorArgs });

            return builder.getFunction();
        });
    }

    _decorateFunction(selectorFn) {
        super._decorateFunction(selectorFn);

        (0, _addApi.addAPI)(selectorFn, () => selectorFn, SelectorBuilder, this.options.customDOMProperties, this.options.customMethods);
    }

    _processResult(result, selectorArgs) {
        const snapshot = super._processResult(result, selectorArgs);

        if (snapshot && !this.options.counterMode) {
            this._addBoundArgsSelectorGetter(snapshot, selectorArgs);
            (0, _createSnapshotMethods2.default)(snapshot);

            if (this.options.customMethods) (0, _addApi.addCustomMethods)(snapshot, () => snapshot.selector, SelectorBuilder, this.options.customMethods);
        }

        return snapshot;
    }
}
exports.default = SelectorBuilder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
