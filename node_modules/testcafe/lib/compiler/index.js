'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeHammerhead2 = _interopRequireDefault(_testcafeHammerhead);

var _compiler = require('./test-file/formats/es-next/compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _compiler3 = require('./test-file/formats/typescript/compiler');

var _compiler4 = _interopRequireDefault(_compiler3);

var _compiler5 = require('./test-file/formats/coffeescript/compiler');

var _compiler6 = _interopRequireDefault(_compiler5);

var _raw = require('./test-file/formats/raw');

var _raw2 = _interopRequireDefault(_raw);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SOURCE_CHUNK_LENGTH = 1000;

const testFileCompilers = [new _testcafeLegacyApi.Compiler(_testcafeHammerhead2.default.processScript), new _compiler2.default(), new _compiler4.default(), new _compiler6.default(), new _raw2.default()];

class Compiler {
    constructor(sources) {
        this.sources = sources;
    }

    static getSupportedTestFileExtensions() {
        return (0, _lodash.uniq)(testFileCompilers.map(compiler => compiler.getSupportedExtension()));
    }

    _createTestFileInfo(filename) {
        return (0, _asyncToGenerator3.default)(function* () {
            let code = null;

            try {
                code = yield (0, _promisifiedFunctions.readFile)(filename);
            } catch (err) {
                throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotFindSpecifiedTestSource, filename);
            }

            code = (0, _stripBom2.default)(code).toString();

            const compiler = (0, _lodash.find)(testFileCompilers, function (someCompiler) {
                return someCompiler.canCompile(code, filename);
            });

            if (!compiler) return null;

            return {
                filename,
                code,
                compiler,

                compiledCode: null
            };
        })();
    }

    _createTestFilesInfo(filenames) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testFilesInfo = yield _pinkie2.default.all(filenames.map(function (filename) {
                return _this._createTestFileInfo(filename);
            }));

            return testFilesInfo.filter(function (info) {
                return !!info;
            });
        })();
    }

    _precompileFiles(compiler, testFilesInfo) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (!compiler.canPrecompile) return;

            const precompiledCode = yield compiler.precompile(testFilesInfo);

            for (let i = 0; i < testFilesInfo.length; i++) testFilesInfo[i].compiledCode = precompiledCode[i];
        })();
    }

    _getCompilerTasks(testFilesInfo) {
        const tasks = new _weakMap2.default();
        const compilers = [];

        for (var _iterator = testFilesInfo, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            const info = _ref;
            const compiler = info.compiler;


            if (!tasks.has(compiler)) {
                compilers.push(compiler);
                tasks.set(compiler, []);
            }

            tasks.get(info.compiler).push(info);
        }

        return compilers.map(compiler => ({ compiler, compilerTestFilesInfo: tasks.get(compiler) }));
    }

    _getTests({ compiler, filename, code, compiledCode }) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (compiledCode) return yield compiler.execute(compiledCode, filename);

            return yield compiler.compile(code, filename);
        })();
    }

    _compileTestFiles(filenames) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testFilesInfo = yield _this2._createTestFilesInfo(filenames);
            const compilerTasks = _this2._getCompilerTasks(testFilesInfo);

            yield _pinkie2.default.all(compilerTasks.map(function ({ compiler, compilerTestFilesInfo }) {
                return _this2._precompileFiles(compiler, compilerTestFilesInfo);
            }));

            const tests = [];

            for (var _iterator2 = testFilesInfo, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                const info = _ref2;

                tests.push((yield _this2._getTests(info)));
            }return tests;
        })();
    }

    getTests() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // NOTE: split sources into chunks because the fs module can't read all files
            // simultaneously if the number of them is too large (several thousands).
            const sourceChunks = (0, _lodash.chunk)(_this3.sources, SOURCE_CHUNK_LENGTH);

            let tests = [];

            while (sourceChunks.length) tests = tests.concat((yield _this3._compileTestFiles(sourceChunks.shift())));

            Compiler.cleanUp();

            return (0, _lodash.flattenDeep)(tests).filter(function (test) {
                return !!test;
            });
        })();
    }

    static cleanUp() {
        testFileCompilers.forEach(compiler => compiler.cleanUp());
    }
}
exports.default = Compiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
