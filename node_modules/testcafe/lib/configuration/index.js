"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const promisified_functions_1 = require("../utils/promisified-functions");
const option_1 = __importDefault(require("./option"));
const option_source_1 = __importDefault(require("./option-source"));
const lodash_1 = require("lodash");
const get_options_1 = require("../utils/get-options");
const option_names_1 = __importDefault(require("./option-names"));
const get_filter_fn_1 = __importDefault(require("../utils/get-filter-fn"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const json5_1 = __importDefault(require("json5"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const prepare_reporters_1 = __importDefault(require("../utils/prepare-reporters"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const log_1 = __importDefault(require("../cli/log"));
const string_1 = require("../utils/string");
const default_values_1 = require("./default-values");
const DEBUG_LOGGER = debug_1.default('testcafe:configuration');
const CONFIGURATION_FILENAME = '.testcaferc.json';
const OPTION_FLAG_NAMES = [
    option_names_1.default.skipJsErrors,
    option_names_1.default.disablePageReloads,
    option_names_1.default.quarantineMode,
    option_names_1.default.debugMode,
    option_names_1.default.debugOnFail,
    option_names_1.default.skipUncaughtErrors,
    option_names_1.default.stopOnFirstFail,
    option_names_1.default.takeScreenshotsOnFails
];
class Configuration {
    constructor() {
        this._options = {};
        this._filePath = resolve_path_relatively_cwd_1.default(CONFIGURATION_FILENAME);
        this._overridenOptions = [];
    }
    static _fromObj(obj) {
        const result = Object.create(null);
        Object.entries(obj).forEach(([key, value]) => {
            const option = new option_1.default(key, value);
            result[key] = option;
        });
        return result;
    }
    static async _isConfigurationFileExists(path) {
        try {
            await promisified_functions_1.stat(path);
            return true;
        }
        catch (error) {
            DEBUG_LOGGER(render_template_1.default(warning_message_1.default.cannotFindConfigurationFile, path, error.stack));
            return false;
        }
    }
    static _showConsoleWarning(message) {
        log_1.default.write(message);
    }
    static _showWarningForError(error, warningTemplate, ...args) {
        const message = render_template_1.default(warningTemplate, ...args);
        Configuration._showConsoleWarning(message);
        DEBUG_LOGGER(message);
        DEBUG_LOGGER(error);
    }
    async _load() {
        if (!await Configuration._isConfigurationFileExists(this.filePath))
            return;
        let configurationFileContent = null;
        try {
            configurationFileContent = await promisified_functions_1.readFile(this.filePath);
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile);
            return;
        }
        try {
            const optionsObj = json5_1.default.parse(configurationFileContent);
            this._options = Configuration._fromObj(optionsObj);
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotParseConfigFile);
            return;
        }
        await this._normalizeOptionsAfterLoad();
    }
    async _normalizeOptionsAfterLoad() {
        await this._prepareSslOptions();
        this._prepareFilterFn();
        this._ensureArrayOption(option_names_1.default.src);
        this._ensureArrayOption(option_names_1.default.browsers);
        this._prepareReporters();
    }
    _ensureArrayOption(name) {
        const options = this._options[name];
        if (!options)
            return;
        options.value = lodash_1.castArray(options.value);
    }
    _prepareFilterFn() {
        const filterOption = this._ensureOption(option_names_1.default.filter, null);
        if (!filterOption.value)
            return;
        if (filterOption.value.testGrep)
            filterOption.value.testGrep = get_options_1.getGrepOptions(option_names_1.default.filterTestGrep, filterOption.value.testGrep);
        if (filterOption.value.fixtureGrep)
            filterOption.value.fixtureGrep = get_options_1.getGrepOptions(option_names_1.default.filterFixtureGrep, filterOption.value.fixtureGrep);
        filterOption.value = get_filter_fn_1.default(filterOption.value);
    }
    _prepareReporters() {
        const reporterOption = this._options[option_names_1.default.reporter];
        if (!reporterOption)
            return;
        const optionValue = lodash_1.castArray(reporterOption.value);
        reporterOption.value = prepare_reporters_1.default(optionValue);
    }
    async _prepareSslOptions() {
        const sslOptions = this._options[option_names_1.default.ssl];
        if (!sslOptions)
            return;
        sslOptions.value = await get_options_1.getSSLOptions(sslOptions.value);
    }
    _ensureOption(name, value, source) {
        let option = null;
        if (name in this._options)
            option = this._options[name];
        else {
            option = new option_1.default(name, value, source);
            this._options[name] = option;
        }
        return option;
    }
    _ensureOptionWithValue(name, defaultValue, source) {
        const option = this._ensureOption(name, defaultValue, source);
        if (option.value !== void 0)
            return;
        option.value = defaultValue;
        option.source = source;
    }
    async init(options = {}) {
        await this._load();
        this.mergeOptions(options);
    }
    mergeOptions(options) {
        Object.entries(options).map(([key, value]) => {
            const option = this._ensureOption(key, value, option_source_1.default.input);
            if (value === void 0)
                return;
            if (option.value !== value &&
                option.source === option_source_1.default.configuration)
                this._overridenOptions.push(key);
            option.value = value;
            option.source = option_source_1.default.input;
        });
    }
    _prepareFlags() {
        OPTION_FLAG_NAMES.forEach(name => {
            const option = this._ensureOption(name, void 0, option_source_1.default.configuration);
            option.value = !!option.value;
        });
    }
    _setDefaultValues() {
        this._ensureOptionWithValue(option_names_1.default.selectorTimeout, default_values_1.DEFAULT_TIMEOUT.selector, option_source_1.default.configuration);
        this._ensureOptionWithValue(option_names_1.default.assertionTimeout, default_values_1.DEFAULT_TIMEOUT.assertion, option_source_1.default.configuration);
        this._ensureOptionWithValue(option_names_1.default.pageLoadTimeout, default_values_1.DEFAULT_TIMEOUT.pageLoad, option_source_1.default.configuration);
        this._ensureOptionWithValue(option_names_1.default.speed, default_values_1.DEFAULT_SPEED_VALUE, option_source_1.default.configuration);
        this._ensureOptionWithValue(option_names_1.default.appInitDelay, default_values_1.DEFAULT_APP_INIT_DELAY, option_source_1.default.configuration);
        this._ensureOptionWithValue(option_names_1.default.concurrency, default_values_1.DEFAULT_CONCURRENCY_VALUE, option_source_1.default.configuration);
    }
    prepare() {
        this._prepareFlags();
        this._setDefaultValues();
    }
    notifyAboutOverridenOptions() {
        if (!this._overridenOptions.length)
            return;
        const optionsStr = string_1.getConcatenatedValuesString(this._overridenOptions);
        const optionsSuffix = string_1.getPluralSuffix(this._overridenOptions);
        Configuration._showConsoleWarning(render_template_1.default(warning_message_1.default.configOptionsWereOverriden, optionsStr, optionsSuffix));
        this._overridenOptions = [];
    }
    getOption(key) {
        if (!key)
            return void 0;
        const option = this._options[key];
        if (!option)
            return void 0;
        return option.value;
    }
    getOptions() {
        const result = Object.create(null);
        Object.entries(this._options).forEach(([name, option]) => {
            result[name] = option.value;
        });
        return result;
    }
    clone() {
        return lodash_1.cloneDeep(this);
    }
    get startOptions() {
        const result = {
            hostname: this.getOption('hostname'),
            port1: this.getOption('port1'),
            port2: this.getOption('port2'),
            options: {
                ssl: this.getOption('ssl'),
                developmentMode: this.getOption('developmentMode'),
                retryTestPages: !!this.getOption('retryTestPages')
            }
        };
        if (result.options.retryTestPages)
            result.options.staticContentCaching = default_values_1.STATIC_CONTENT_CACHING_SETTINGS;
        return result;
    }
    get filePath() {
        return this._filePath;
    }
}
exports.default = Configuration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,