'use strict';

exports.__esModule = true;
const lazyRequire = require('import-lazy')(require);

const hammerhead = lazyRequire('testcafe-hammerhead');
const ReporterPluginHost = lazyRequire('./reporter/plugin-host');
const getTestListModule = lazyRequire('./compiler/test-file/formats/es-next/get-test-list');
const getTypeScriptTestListModule = lazyRequire('./compiler/test-file/formats/typescript/get-test-list');
const getCoffeeScriptTestListModule = lazyRequire('./compiler/test-file/formats/coffeescript/get-test-list');
const COMMAND_TYPE = lazyRequire('./test-run/commands/type');
const createCommandFromObject = lazyRequire('./test-run/commands/from-object');
const initializers = lazyRequire('./test-run/commands/validations/initializers');
const errorTypes = lazyRequire('./errors/types');
const TestRunErrorFormattableAdapter = lazyRequire('./errors/test-run/formattable-adapter');
const testRunErrors = lazyRequire('./errors/test-run');
const processTestFnError = lazyRequire('./errors/process-test-fn-error');
const testRunErrorUtils = lazyRequire('./errors/test-run/utils');

// NOTE: we can't use lazy require for TestRun and Assignable, because it breaks prototype chain for inherited classes
let TestRun = null;
let Assignable = null;

exports.default = {
    TestRunErrorFormattableAdapter,
    testRunErrors,
    COMMAND_TYPE,
    errorTypes,
    testRunErrorUtils,

    get Assignable() {
        if (!Assignable) Assignable = require('./utils/assignable');

        return Assignable;
    },

    get TestRun() {
        if (!TestRun) TestRun = require('./test-run');

        return TestRun;
    },

    get getTestList() {
        return getTestListModule.getTestList;
    },

    get getTypeScriptTestList() {
        return getTypeScriptTestListModule.getTypeScriptTestList;
    },

    get getCoffeeScriptTestList() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestList;
    },

    get getTestListFromCode() {
        return getTestListModule.getTestListFromCode;
    },

    get getTypeScriptTestListFromCode() {
        return getTypeScriptTestListModule.getTypeScriptTestListFromCode;
    },

    get getCoffeeScriptTestListFromCode() {
        return getCoffeeScriptTestListModule.getCoffeeScriptTestListFromCode;
    },

    get initSelector() {
        return initializers.initSelector;
    },

    get createCommandFromObject() {
        return createCommandFromObject;
    },

    get processTestFnError() {
        return processTestFnError;
    },

    ensureUploadDirectory(...args) {
        return hammerhead.UploadStorage.ensureUploadsRoot(...args);
    },

    copyFilesToUploadFolder(...args) {
        return hammerhead.UploadStorage.copy(...args);
    },

    buildReporterPlugin(pluginFactory, outStream) {
        const plugin = pluginFactory();

        return new ReporterPluginHost(plugin, outStream);
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbWJlZGRpbmctdXRpbHMuanMiXSwibmFtZXMiOlsibGF6eVJlcXVpcmUiLCJyZXF1aXJlIiwiaGFtbWVyaGVhZCIsIlJlcG9ydGVyUGx1Z2luSG9zdCIsImdldFRlc3RMaXN0TW9kdWxlIiwiZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlIiwiZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RNb2R1bGUiLCJDT01NQU5EX1RZUEUiLCJjcmVhdGVDb21tYW5kRnJvbU9iamVjdCIsImluaXRpYWxpemVycyIsImVycm9yVHlwZXMiLCJUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIiLCJ0ZXN0UnVuRXJyb3JzIiwicHJvY2Vzc1Rlc3RGbkVycm9yIiwidGVzdFJ1bkVycm9yVXRpbHMiLCJUZXN0UnVuIiwiQXNzaWduYWJsZSIsImdldFRlc3RMaXN0IiwiZ2V0VHlwZVNjcmlwdFRlc3RMaXN0IiwiZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3QiLCJnZXRUZXN0TGlzdEZyb21Db2RlIiwiZ2V0VHlwZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGUiLCJnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdEZyb21Db2RlIiwiaW5pdFNlbGVjdG9yIiwiZW5zdXJlVXBsb2FkRGlyZWN0b3J5IiwiYXJncyIsIlVwbG9hZFN0b3JhZ2UiLCJlbnN1cmVVcGxvYWRzUm9vdCIsImNvcHlGaWxlc1RvVXBsb2FkRm9sZGVyIiwiY29weSIsImJ1aWxkUmVwb3J0ZXJQbHVnaW4iLCJwbHVnaW5GYWN0b3J5Iiwib3V0U3RyZWFtIiwicGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNQSxjQUFjQyxRQUFRLGFBQVIsRUFBdUJBLE9BQXZCLENBQXBCOztBQUVBLE1BQU1DLGFBQWlDRixZQUFZLHFCQUFaLENBQXZDO0FBQ0EsTUFBTUcscUJBQWlDSCxZQUFZLHdCQUFaLENBQXZDO0FBQ0EsTUFBTUksb0JBQWlDSixZQUFZLG9EQUFaLENBQXZDO0FBQ0EsTUFBTUssOEJBQWlDTCxZQUFZLHVEQUFaLENBQXZDO0FBQ0EsTUFBTU0sZ0NBQWlDTixZQUFZLHlEQUFaLENBQXZDO0FBQ0EsTUFBTU8sZUFBaUNQLFlBQVksMEJBQVosQ0FBdkM7QUFDQSxNQUFNUSwwQkFBaUNSLFlBQVksaUNBQVosQ0FBdkM7QUFDQSxNQUFNUyxlQUFpQ1QsWUFBWSw4Q0FBWixDQUF2QztBQUNBLE1BQU1VLGFBQWlDVixZQUFZLGdCQUFaLENBQXZDO0FBQ0EsTUFBTVcsaUNBQWlDWCxZQUFZLHVDQUFaLENBQXZDO0FBQ0EsTUFBTVksZ0JBQWlDWixZQUFZLG1CQUFaLENBQXZDO0FBQ0EsTUFBTWEscUJBQWlDYixZQUFZLGdDQUFaLENBQXZDO0FBQ0EsTUFBTWMsb0JBQWlDZCxZQUFZLHlCQUFaLENBQXZDOztBQUVBO0FBQ0EsSUFBSWUsVUFBYSxJQUFqQjtBQUNBLElBQUlDLGFBQWEsSUFBakI7O2tCQUVlO0FBQ1hMLGtDQURXO0FBRVhDLGlCQUZXO0FBR1hMLGdCQUhXO0FBSVhHLGNBSlc7QUFLWEkscUJBTFc7O0FBT1gsUUFBSUUsVUFBSixHQUFrQjtBQUNkLFlBQUksQ0FBQ0EsVUFBTCxFQUNJQSxhQUFhZixRQUFRLG9CQUFSLENBQWI7O0FBRUosZUFBT2UsVUFBUDtBQUNILEtBWlU7O0FBY1gsUUFBSUQsT0FBSixHQUFlO0FBQ1gsWUFBSSxDQUFDQSxPQUFMLEVBQ0lBLFVBQVVkLFFBQVEsWUFBUixDQUFWOztBQUVKLGVBQU9jLE9BQVA7QUFDSCxLQW5CVTs7QUFxQlgsUUFBSUUsV0FBSixHQUFtQjtBQUNmLGVBQU9iLGtCQUFrQmEsV0FBekI7QUFDSCxLQXZCVTs7QUF5QlgsUUFBSUMscUJBQUosR0FBNkI7QUFDekIsZUFBT2IsNEJBQTRCYSxxQkFBbkM7QUFDSCxLQTNCVTs7QUE2QlgsUUFBSUMsdUJBQUosR0FBK0I7QUFDM0IsZUFBT2IsOEJBQThCYSx1QkFBckM7QUFDSCxLQS9CVTs7QUFpQ1gsUUFBSUMsbUJBQUosR0FBMkI7QUFDdkIsZUFBT2hCLGtCQUFrQmdCLG1CQUF6QjtBQUNILEtBbkNVOztBQXFDWCxRQUFJQyw2QkFBSixHQUFxQztBQUNqQyxlQUFPaEIsNEJBQTRCZ0IsNkJBQW5DO0FBQ0gsS0F2Q1U7O0FBeUNYLFFBQUlDLCtCQUFKLEdBQXVDO0FBQ25DLGVBQU9oQiw4QkFBOEJnQiwrQkFBckM7QUFDSCxLQTNDVTs7QUE2Q1gsUUFBSUMsWUFBSixHQUFvQjtBQUNoQixlQUFPZCxhQUFhYyxZQUFwQjtBQUNILEtBL0NVOztBQWlEWCxRQUFJZix1QkFBSixHQUErQjtBQUMzQixlQUFPQSx1QkFBUDtBQUNILEtBbkRVOztBQXFEWCxRQUFJSyxrQkFBSixHQUEwQjtBQUN0QixlQUFPQSxrQkFBUDtBQUNILEtBdkRVOztBQXlEWFcsMEJBQXVCLEdBQUdDLElBQTFCLEVBQWdDO0FBQzVCLGVBQU92QixXQUFXd0IsYUFBWCxDQUF5QkMsaUJBQXpCLENBQTJDLEdBQUdGLElBQTlDLENBQVA7QUFDSCxLQTNEVTs7QUE2RFhHLDRCQUF5QixHQUFHSCxJQUE1QixFQUFrQztBQUM5QixlQUFPdkIsV0FBV3dCLGFBQVgsQ0FBeUJHLElBQXpCLENBQThCLEdBQUdKLElBQWpDLENBQVA7QUFDSCxLQS9EVTs7QUFpRVhLLHdCQUFxQkMsYUFBckIsRUFBb0NDLFNBQXBDLEVBQStDO0FBQzNDLGNBQU1DLFNBQVNGLGVBQWY7O0FBRUEsZUFBTyxJQUFJNUIsa0JBQUosQ0FBdUI4QixNQUF2QixFQUErQkQsU0FBL0IsQ0FBUDtBQUNIO0FBckVVLEMiLCJmaWxlIjoiZW1iZWRkaW5nLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGF6eVJlcXVpcmUgPSByZXF1aXJlKCdpbXBvcnQtbGF6eScpKHJlcXVpcmUpO1xuXG5jb25zdCBoYW1tZXJoZWFkICAgICAgICAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgndGVzdGNhZmUtaGFtbWVyaGVhZCcpO1xuY29uc3QgUmVwb3J0ZXJQbHVnaW5Ib3N0ICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vcmVwb3J0ZXIvcGx1Z2luLWhvc3QnKTtcbmNvbnN0IGdldFRlc3RMaXN0TW9kdWxlICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL2NvbXBpbGVyL3Rlc3QtZmlsZS9mb3JtYXRzL2VzLW5leHQvZ2V0LXRlc3QtbGlzdCcpO1xuY29uc3QgZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlICAgID0gbGF6eVJlcXVpcmUoJy4vY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvdHlwZXNjcmlwdC9nZXQtdGVzdC1saXN0Jyk7XG5jb25zdCBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdE1vZHVsZSAgPSBsYXp5UmVxdWlyZSgnLi9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy9jb2ZmZWVzY3JpcHQvZ2V0LXRlc3QtbGlzdCcpO1xuY29uc3QgQ09NTUFORF9UWVBFICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvdHlwZScpO1xuY29uc3QgY3JlYXRlQ29tbWFuZEZyb21PYmplY3QgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vdGVzdC1ydW4vY29tbWFuZHMvZnJvbS1vYmplY3QnKTtcbmNvbnN0IGluaXRpYWxpemVycyAgICAgICAgICAgICAgICAgICA9IGxhenlSZXF1aXJlKCcuL3Rlc3QtcnVuL2NvbW1hbmRzL3ZhbGlkYXRpb25zL2luaXRpYWxpemVycycpO1xuY29uc3QgZXJyb3JUeXBlcyAgICAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3R5cGVzJyk7XG5jb25zdCBUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvdGVzdC1ydW4vZm9ybWF0dGFibGUtYWRhcHRlcicpO1xuY29uc3QgdGVzdFJ1bkVycm9ycyAgICAgICAgICAgICAgICAgID0gbGF6eVJlcXVpcmUoJy4vZXJyb3JzL3Rlc3QtcnVuJyk7XG5jb25zdCBwcm9jZXNzVGVzdEZuRXJyb3IgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvcHJvY2Vzcy10ZXN0LWZuLWVycm9yJyk7XG5jb25zdCB0ZXN0UnVuRXJyb3JVdGlscyAgICAgICAgICAgICAgPSBsYXp5UmVxdWlyZSgnLi9lcnJvcnMvdGVzdC1ydW4vdXRpbHMnKTtcblxuLy8gTk9URTogd2UgY2FuJ3QgdXNlIGxhenkgcmVxdWlyZSBmb3IgVGVzdFJ1biBhbmQgQXNzaWduYWJsZSwgYmVjYXVzZSBpdCBicmVha3MgcHJvdG90eXBlIGNoYWluIGZvciBpbmhlcml0ZWQgY2xhc3Nlc1xubGV0IFRlc3RSdW4gICAgPSBudWxsO1xubGV0IEFzc2lnbmFibGUgPSBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyLFxuICAgIHRlc3RSdW5FcnJvcnMsXG4gICAgQ09NTUFORF9UWVBFLFxuICAgIGVycm9yVHlwZXMsXG4gICAgdGVzdFJ1bkVycm9yVXRpbHMsXG5cbiAgICBnZXQgQXNzaWduYWJsZSAoKSB7XG4gICAgICAgIGlmICghQXNzaWduYWJsZSlcbiAgICAgICAgICAgIEFzc2lnbmFibGUgPSByZXF1aXJlKCcuL3V0aWxzL2Fzc2lnbmFibGUnKTtcblxuICAgICAgICByZXR1cm4gQXNzaWduYWJsZTtcbiAgICB9LFxuXG4gICAgZ2V0IFRlc3RSdW4gKCkge1xuICAgICAgICBpZiAoIVRlc3RSdW4pXG4gICAgICAgICAgICBUZXN0UnVuID0gcmVxdWlyZSgnLi90ZXN0LXJ1bicpO1xuXG4gICAgICAgIHJldHVybiBUZXN0UnVuO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VGVzdExpc3QgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VGVzdExpc3RNb2R1bGUuZ2V0VGVzdExpc3Q7XG4gICAgfSxcblxuICAgIGdldCBnZXRUeXBlU2NyaXB0VGVzdExpc3QgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldFR5cGVTY3JpcHRUZXN0TGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0IGdldENvZmZlZVNjcmlwdFRlc3RMaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldENvZmZlZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldENvZmZlZVNjcmlwdFRlc3RMaXN0O1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VGVzdExpc3RGcm9tQ29kZSAoKSB7XG4gICAgICAgIHJldHVybiBnZXRUZXN0TGlzdE1vZHVsZS5nZXRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0VHlwZVNjcmlwdFRlc3RMaXN0RnJvbUNvZGUgKCkge1xuICAgICAgICByZXR1cm4gZ2V0VHlwZVNjcmlwdFRlc3RMaXN0TW9kdWxlLmdldFR5cGVTY3JpcHRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgZ2V0Q29mZmVlU2NyaXB0VGVzdExpc3RGcm9tQ29kZSAoKSB7XG4gICAgICAgIHJldHVybiBnZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdE1vZHVsZS5nZXRDb2ZmZWVTY3JpcHRUZXN0TGlzdEZyb21Db2RlO1xuICAgIH0sXG5cbiAgICBnZXQgaW5pdFNlbGVjdG9yICgpIHtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVycy5pbml0U2VsZWN0b3I7XG4gICAgfSxcblxuICAgIGdldCBjcmVhdGVDb21tYW5kRnJvbU9iamVjdCAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVDb21tYW5kRnJvbU9iamVjdDtcbiAgICB9LFxuXG4gICAgZ2V0IHByb2Nlc3NUZXN0Rm5FcnJvciAoKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzVGVzdEZuRXJyb3I7XG4gICAgfSxcblxuICAgIGVuc3VyZVVwbG9hZERpcmVjdG9yeSAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gaGFtbWVyaGVhZC5VcGxvYWRTdG9yYWdlLmVuc3VyZVVwbG9hZHNSb290KC4uLmFyZ3MpO1xuICAgIH0sXG5cbiAgICBjb3B5RmlsZXNUb1VwbG9hZEZvbGRlciAoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gaGFtbWVyaGVhZC5VcGxvYWRTdG9yYWdlLmNvcHkoLi4uYXJncyk7XG4gICAgfSxcblxuICAgIGJ1aWxkUmVwb3J0ZXJQbHVnaW4gKHBsdWdpbkZhY3RvcnksIG91dFN0cmVhbSkge1xuICAgICAgICBjb25zdCBwbHVnaW4gPSBwbHVnaW5GYWN0b3J5KCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSZXBvcnRlclBsdWdpbkhvc3QocGx1Z2luLCBvdXRTdHJlYW0pO1xuICAgIH1cbn07XG4iXX0=
