'use strict';

exports.__esModule = true;

var _errorStackParser = require('error-stack-parser');

var _errorStackParser2 = _interopRequireDefault(_errorStackParser);

var _createStackFilter = require('./create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ORIGINAL_STACK_TRACE_LIMIT = Error.stackTraceLimit;
const STACK_TRACE_LIMIT = 200;
const STACK_TRACE_LINE_RE = /^\s+at\s+.*$/;

exports.default = {
    isEnabled: false,

    _isStackTraceLine(stackLine) {
        return stackLine.match(STACK_TRACE_LINE_RE);
    },

    _eraseOriginalStack(error) {
        if (!error.stack) {
            error.stack = '';
            return;
        }

        const stackLines = error.stack.split('\n');

        let stackLinesCount = 0;

        while (stackLinesCount < stackLines.length && this._isStackTraceLine(stackLines[stackLines.length - 1 - stackLinesCount])) stackLinesCount++;

        error.stack = stackLines.slice(0, stackLines.length - stackLinesCount).join('\n');

        if (stackLinesCount > 0) error.stack += '\n';
    },

    _getFrames(error) {
        try {
            return _errorStackParser2.default.parse(error);
        } catch (e) {
            return [];
        }
    },

    _renderFrameInfo(frames) {
        return frames.map(frame => frame.getSource()).join('\n');
    },

    get enabled() {
        return this.isEnabled;
    },

    set enabled(val) {
        if (this.isEnabled === val) return;

        this.isEnabled = val;

        // NOTE: Babel errors may have really deep stacks,
        // so we increase stack trace capacity
        if (this.isEnabled) Error.stackTraceLimit = STACK_TRACE_LIMIT;else Error.stackTraceLimit = ORIGINAL_STACK_TRACE_LIMIT;
    },

    cleanError(error) {
        let frames = this._getFrames(error);

        if (!frames.length) return error;

        this._eraseOriginalStack(error);

        frames = frames.filter((0, _createStackFilter2.default)(ORIGINAL_STACK_TRACE_LIMIT));

        error.stack += this._renderFrameInfo(frames);

        return error;
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvc3RhY2stY2xlYW5pbmctaG9vay5qcyJdLCJuYW1lcyI6WyJPUklHSU5BTF9TVEFDS19UUkFDRV9MSU1JVCIsIkVycm9yIiwic3RhY2tUcmFjZUxpbWl0IiwiU1RBQ0tfVFJBQ0VfTElNSVQiLCJTVEFDS19UUkFDRV9MSU5FX1JFIiwiaXNFbmFibGVkIiwiX2lzU3RhY2tUcmFjZUxpbmUiLCJzdGFja0xpbmUiLCJtYXRjaCIsIl9lcmFzZU9yaWdpbmFsU3RhY2siLCJlcnJvciIsInN0YWNrIiwic3RhY2tMaW5lcyIsInNwbGl0Iiwic3RhY2tMaW5lc0NvdW50IiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwiX2dldEZyYW1lcyIsImVycm9yU3RhY2tQYXJzZXIiLCJwYXJzZSIsImUiLCJfcmVuZGVyRnJhbWVJbmZvIiwiZnJhbWVzIiwibWFwIiwiZnJhbWUiLCJnZXRTb3VyY2UiLCJlbmFibGVkIiwidmFsIiwiY2xlYW5FcnJvciIsImZpbHRlciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUdBLE1BQU1BLDZCQUE2QkMsTUFBTUMsZUFBekM7QUFDQSxNQUFNQyxvQkFBNkIsR0FBbkM7QUFDQSxNQUFNQyxzQkFBNkIsY0FBbkM7O2tCQUdlO0FBQ1hDLGVBQVcsS0FEQTs7QUFHWEMsc0JBQW1CQyxTQUFuQixFQUE4QjtBQUMxQixlQUFPQSxVQUFVQyxLQUFWLENBQWdCSixtQkFBaEIsQ0FBUDtBQUNILEtBTFU7O0FBT1hLLHdCQUFxQkMsS0FBckIsRUFBNEI7QUFDeEIsWUFBSSxDQUFDQSxNQUFNQyxLQUFYLEVBQWtCO0FBQ2RELGtCQUFNQyxLQUFOLEdBQWMsRUFBZDtBQUNBO0FBQ0g7O0FBRUQsY0FBTUMsYUFBYUYsTUFBTUMsS0FBTixDQUFZRSxLQUFaLENBQWtCLElBQWxCLENBQW5COztBQUVBLFlBQUlDLGtCQUFrQixDQUF0Qjs7QUFFQSxlQUFPQSxrQkFBa0JGLFdBQVdHLE1BQTdCLElBQXVDLEtBQUtULGlCQUFMLENBQXVCTSxXQUFXQSxXQUFXRyxNQUFYLEdBQW9CLENBQXBCLEdBQXdCRCxlQUFuQyxDQUF2QixDQUE5QyxFQUNJQTs7QUFFSkosY0FBTUMsS0FBTixHQUFjQyxXQUFXSSxLQUFYLENBQWlCLENBQWpCLEVBQW9CSixXQUFXRyxNQUFYLEdBQW9CRCxlQUF4QyxFQUF5REcsSUFBekQsQ0FBOEQsSUFBOUQsQ0FBZDs7QUFFQSxZQUFJSCxrQkFBa0IsQ0FBdEIsRUFDSUosTUFBTUMsS0FBTixJQUFlLElBQWY7QUFDUCxLQXhCVTs7QUEwQlhPLGVBQVlSLEtBQVosRUFBbUI7QUFDZixZQUFJO0FBQ0EsbUJBQU9TLDJCQUFpQkMsS0FBakIsQ0FBdUJWLEtBQXZCLENBQVA7QUFDSCxTQUZELENBR0EsT0FBT1csQ0FBUCxFQUFVO0FBQ04sbUJBQU8sRUFBUDtBQUNIO0FBQ0osS0FqQ1U7O0FBbUNYQyxxQkFBa0JDLE1BQWxCLEVBQTBCO0FBQ3RCLGVBQU9BLE9BQU9DLEdBQVAsQ0FBV0MsU0FBU0EsTUFBTUMsU0FBTixFQUFwQixFQUF1Q1QsSUFBdkMsQ0FBNEMsSUFBNUMsQ0FBUDtBQUNILEtBckNVOztBQXVDWCxRQUFJVSxPQUFKLEdBQWU7QUFDWCxlQUFPLEtBQUt0QixTQUFaO0FBQ0gsS0F6Q1U7O0FBMkNYLFFBQUlzQixPQUFKLENBQWFDLEdBQWIsRUFBa0I7QUFDZCxZQUFJLEtBQUt2QixTQUFMLEtBQW1CdUIsR0FBdkIsRUFDSTs7QUFFSixhQUFLdkIsU0FBTCxHQUFpQnVCLEdBQWpCOztBQUVBO0FBQ0E7QUFDQSxZQUFJLEtBQUt2QixTQUFULEVBQ0lKLE1BQU1DLGVBQU4sR0FBd0JDLGlCQUF4QixDQURKLEtBR0lGLE1BQU1DLGVBQU4sR0FBd0JGLDBCQUF4QjtBQUNQLEtBdkRVOztBQXlEWDZCLGVBQVluQixLQUFaLEVBQW1CO0FBQ2YsWUFBSWEsU0FBUyxLQUFLTCxVQUFMLENBQWdCUixLQUFoQixDQUFiOztBQUVBLFlBQUksQ0FBQ2EsT0FBT1IsTUFBWixFQUNJLE9BQU9MLEtBQVA7O0FBRUosYUFBS0QsbUJBQUwsQ0FBeUJDLEtBQXpCOztBQUVBYSxpQkFBU0EsT0FBT08sTUFBUCxDQUFjLGlDQUFrQjlCLDBCQUFsQixDQUFkLENBQVQ7O0FBRUFVLGNBQU1DLEtBQU4sSUFBZSxLQUFLVyxnQkFBTCxDQUFzQkMsTUFBdEIsQ0FBZjs7QUFFQSxlQUFPYixLQUFQO0FBQ0g7QUF0RVUsQyIsImZpbGUiOiJlcnJvcnMvc3RhY2stY2xlYW5pbmctaG9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlcnJvclN0YWNrUGFyc2VyIGZyb20gJ2Vycm9yLXN0YWNrLXBhcnNlcic7XG5pbXBvcnQgY3JlYXRlU3RhY2tGaWx0ZXIgZnJvbSAnLi9jcmVhdGUtc3RhY2stZmlsdGVyJztcblxuXG5jb25zdCBPUklHSU5BTF9TVEFDS19UUkFDRV9MSU1JVCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbmNvbnN0IFNUQUNLX1RSQUNFX0xJTUlUICAgICAgICAgID0gMjAwO1xuY29uc3QgU1RBQ0tfVFJBQ0VfTElORV9SRSAgICAgICAgPSAvXlxccythdFxccysuKiQvO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBpc0VuYWJsZWQ6IGZhbHNlLFxuXG4gICAgX2lzU3RhY2tUcmFjZUxpbmUgKHN0YWNrTGluZSkge1xuICAgICAgICByZXR1cm4gc3RhY2tMaW5lLm1hdGNoKFNUQUNLX1RSQUNFX0xJTkVfUkUpO1xuICAgIH0sXG5cbiAgICBfZXJhc2VPcmlnaW5hbFN0YWNrIChlcnJvcikge1xuICAgICAgICBpZiAoIWVycm9yLnN0YWNrKSB7XG4gICAgICAgICAgICBlcnJvci5zdGFjayA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhY2tMaW5lcyA9IGVycm9yLnN0YWNrLnNwbGl0KCdcXG4nKTtcblxuICAgICAgICBsZXQgc3RhY2tMaW5lc0NvdW50ID0gMDtcblxuICAgICAgICB3aGlsZSAoc3RhY2tMaW5lc0NvdW50IDwgc3RhY2tMaW5lcy5sZW5ndGggJiYgdGhpcy5faXNTdGFja1RyYWNlTGluZShzdGFja0xpbmVzW3N0YWNrTGluZXMubGVuZ3RoIC0gMSAtIHN0YWNrTGluZXNDb3VudF0pKVxuICAgICAgICAgICAgc3RhY2tMaW5lc0NvdW50Kys7XG5cbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBzdGFja0xpbmVzLnNsaWNlKDAsIHN0YWNrTGluZXMubGVuZ3RoIC0gc3RhY2tMaW5lc0NvdW50KS5qb2luKCdcXG4nKTtcblxuICAgICAgICBpZiAoc3RhY2tMaW5lc0NvdW50ID4gMClcbiAgICAgICAgICAgIGVycm9yLnN0YWNrICs9ICdcXG4nO1xuICAgIH0sXG5cbiAgICBfZ2V0RnJhbWVzIChlcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yU3RhY2tQYXJzZXIucGFyc2UoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3JlbmRlckZyYW1lSW5mbyAoZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiBmcmFtZXMubWFwKGZyYW1lID0+IGZyYW1lLmdldFNvdXJjZSgpKS5qb2luKCdcXG4nKTtcbiAgICB9LFxuXG4gICAgZ2V0IGVuYWJsZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0VuYWJsZWQ7XG4gICAgfSxcblxuICAgIHNldCBlbmFibGVkICh2YWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkID09PSB2YWwpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB2YWw7XG5cbiAgICAgICAgLy8gTk9URTogQmFiZWwgZXJyb3JzIG1heSBoYXZlIHJlYWxseSBkZWVwIHN0YWNrcyxcbiAgICAgICAgLy8gc28gd2UgaW5jcmVhc2Ugc3RhY2sgdHJhY2UgY2FwYWNpdHlcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKVxuICAgICAgICAgICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gU1RBQ0tfVFJBQ0VfTElNSVQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IE9SSUdJTkFMX1NUQUNLX1RSQUNFX0xJTUlUO1xuICAgIH0sXG5cbiAgICBjbGVhbkVycm9yIChlcnJvcikge1xuICAgICAgICBsZXQgZnJhbWVzID0gdGhpcy5fZ2V0RnJhbWVzKGVycm9yKTtcblxuICAgICAgICBpZiAoIWZyYW1lcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG5cbiAgICAgICAgdGhpcy5fZXJhc2VPcmlnaW5hbFN0YWNrKGVycm9yKTtcblxuICAgICAgICBmcmFtZXMgPSBmcmFtZXMuZmlsdGVyKGNyZWF0ZVN0YWNrRmlsdGVyKE9SSUdJTkFMX1NUQUNLX1RSQUNFX0xJTUlUKSk7XG5cbiAgICAgICAgZXJyb3Iuc3RhY2sgKz0gdGhpcy5fcmVuZGVyRnJhbWVJbmZvKGZyYW1lcyk7XG5cbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbn07XG4iXX0=
