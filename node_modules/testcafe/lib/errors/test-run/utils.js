'use strict';

exports.__esModule = true;
exports.renderForbiddenCharsList = renderForbiddenCharsList;
exports.formatUrl = formatUrl;
exports.formatSelectorCallstack = formatSelectorCallstack;
exports.replaceLeadingSpacesWithNbsp = replaceLeadingSpacesWithNbsp;
exports.markup = markup;

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _lodash = require('lodash');

var _phase = require('../../test-run/phase');

var _phase2 = _interopRequireDefault(_phase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SUBTITLES = {
    [_phase2.default.initial]: '',
    [_phase2.default.inFixtureBeforeHook]: '<span class="subtitle">Error in fixture.before hook</span>\n',
    [_phase2.default.inFixtureBeforeEachHook]: '<span class="subtitle">Error in fixture.beforeEach hook</span>\n',
    [_phase2.default.inTestBeforeHook]: '<span class="subtitle">Error in test.before hook</span>\n',
    [_phase2.default.inTest]: '',
    [_phase2.default.inTestAfterHook]: '<span class="subtitle">Error in test.after hook</span>\n',
    [_phase2.default.inFixtureAfterEachHook]: '<span class="subtitle">Error in fixture.afterEach hook</span>\n',
    [_phase2.default.inFixtureAfterHook]: '<span class="subtitle">Error in fixture.after hook</span>\n',
    [_phase2.default.inRoleInitializer]: '<span class="subtitle">Error in Role initializer</span>\n',
    [_phase2.default.inBookmarkRestore]: '<span class="subtitle">Error while restoring configuration after Role switch</span>\n'
};

function renderForbiddenCharsList(forbiddenCharsList) {
    return forbiddenCharsList.map(charInfo => `\t"${charInfo.chars}" at index ${charInfo.index}\n`).join('');
}

function formatUrl(url) {
    return `<a href="${url}">${url}</a>`;
}

function formatSelectorCallstack(apiFnChain, apiFnIndex, viewportWidth) {
    if (typeof apiFnIndex === 'undefined') return '';

    const emptySpaces = 10;
    const ellipsis = '...)';
    const availableWidth = viewportWidth - emptySpaces;

    return apiFnChain.map((apiFn, index) => {
        let formattedApiFn = String.fromCharCode(160);

        formattedApiFn += index === apiFnIndex ? '>' : ' ';
        formattedApiFn += ' | ';
        formattedApiFn += index !== 0 ? '  ' : '';
        formattedApiFn += apiFn;

        if (formattedApiFn.length > availableWidth) return formattedApiFn.substr(0, availableWidth - emptySpaces) + ellipsis;

        return formattedApiFn;
    }).join('\n');
}

function replaceLeadingSpacesWithNbsp(str) {
    return str.replace(/^ +/mg, match => {
        return (0, _lodash.repeat)('&nbsp;', match.length);
    });
}

function markup(err, msgMarkup, opts = {}) {
    msgMarkup = (0, _dedent2.default)(`
        ${SUBTITLES[err.testRunPhase]}<div class="message">${(0, _dedent2.default)(msgMarkup)}</div>

        <strong>Browser:</strong> <span class="user-agent">${err.userAgent}</span>
    `);

    if (err.screenshotPath) msgMarkup += `\n<div class="screenshot-info"><strong>Screenshot:</strong> <a class="screenshot-path">${(0, _lodash.escape)(err.screenshotPath)}</a></div>`;

    if (!opts.withoutCallsite) {
        const callsiteMarkup = err.getCallsiteMarkup();

        if (callsiteMarkup) msgMarkup += `\n\n${callsiteMarkup}`;
    }

    return msgMarkup.replace('\t', '&nbsp;'.repeat(4));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcnJvcnMvdGVzdC1ydW4vdXRpbHMuanMiXSwibmFtZXMiOlsicmVuZGVyRm9yYmlkZGVuQ2hhcnNMaXN0IiwiZm9ybWF0VXJsIiwiZm9ybWF0U2VsZWN0b3JDYWxsc3RhY2siLCJyZXBsYWNlTGVhZGluZ1NwYWNlc1dpdGhOYnNwIiwibWFya3VwIiwiU1VCVElUTEVTIiwiVEVTVF9SVU5fUEhBU0UiLCJpbml0aWFsIiwiaW5GaXh0dXJlQmVmb3JlSG9vayIsImluRml4dHVyZUJlZm9yZUVhY2hIb29rIiwiaW5UZXN0QmVmb3JlSG9vayIsImluVGVzdCIsImluVGVzdEFmdGVySG9vayIsImluRml4dHVyZUFmdGVyRWFjaEhvb2siLCJpbkZpeHR1cmVBZnRlckhvb2siLCJpblJvbGVJbml0aWFsaXplciIsImluQm9va21hcmtSZXN0b3JlIiwiZm9yYmlkZGVuQ2hhcnNMaXN0IiwibWFwIiwiY2hhckluZm8iLCJjaGFycyIsImluZGV4Iiwiam9pbiIsInVybCIsImFwaUZuQ2hhaW4iLCJhcGlGbkluZGV4Iiwidmlld3BvcnRXaWR0aCIsImVtcHR5U3BhY2VzIiwiZWxsaXBzaXMiLCJhdmFpbGFibGVXaWR0aCIsImFwaUZuIiwiZm9ybWF0dGVkQXBpRm4iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsZW5ndGgiLCJzdWJzdHIiLCJzdHIiLCJyZXBsYWNlIiwibWF0Y2giLCJlcnIiLCJtc2dNYXJrdXAiLCJvcHRzIiwidGVzdFJ1blBoYXNlIiwidXNlckFnZW50Iiwic2NyZWVuc2hvdFBhdGgiLCJ3aXRob3V0Q2FsbHNpdGUiLCJjYWxsc2l0ZU1hcmt1cCIsImdldENhbGxzaXRlTWFya3VwIiwicmVwZWF0Il0sIm1hcHBpbmdzIjoiOzs7UUFpQmdCQSx3QixHQUFBQSx3QjtRQUlBQyxTLEdBQUFBLFM7UUFJQUMsdUIsR0FBQUEsdUI7UUF1QkFDLDRCLEdBQUFBLDRCO1FBTUFDLE0sR0FBQUEsTTs7QUF0RGhCOzs7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLFlBQVk7QUFDZCxLQUFDQyxnQkFBZUMsT0FBaEIsR0FBMEMsRUFENUI7QUFFZCxLQUFDRCxnQkFBZUUsbUJBQWhCLEdBQTBDLDhEQUY1QjtBQUdkLEtBQUNGLGdCQUFlRyx1QkFBaEIsR0FBMEMsa0VBSDVCO0FBSWQsS0FBQ0gsZ0JBQWVJLGdCQUFoQixHQUEwQywyREFKNUI7QUFLZCxLQUFDSixnQkFBZUssTUFBaEIsR0FBMEMsRUFMNUI7QUFNZCxLQUFDTCxnQkFBZU0sZUFBaEIsR0FBMEMsMERBTjVCO0FBT2QsS0FBQ04sZ0JBQWVPLHNCQUFoQixHQUEwQyxpRUFQNUI7QUFRZCxLQUFDUCxnQkFBZVEsa0JBQWhCLEdBQTBDLDZEQVI1QjtBQVNkLEtBQUNSLGdCQUFlUyxpQkFBaEIsR0FBMEMsMkRBVDVCO0FBVWQsS0FBQ1QsZ0JBQWVVLGlCQUFoQixHQUEwQztBQVY1QixDQUFsQjs7QUFhTyxTQUFTaEIsd0JBQVQsQ0FBbUNpQixrQkFBbkMsRUFBdUQ7QUFDMUQsV0FBT0EsbUJBQW1CQyxHQUFuQixDQUF1QkMsWUFBYSxNQUFLQSxTQUFTQyxLQUFNLGNBQWFELFNBQVNFLEtBQU0sSUFBcEYsRUFBeUZDLElBQXpGLENBQThGLEVBQTlGLENBQVA7QUFDSDs7QUFFTSxTQUFTckIsU0FBVCxDQUFvQnNCLEdBQXBCLEVBQXlCO0FBQzVCLFdBQVEsWUFBV0EsR0FBSSxLQUFJQSxHQUFJLE1BQS9CO0FBQ0g7O0FBRU0sU0FBU3JCLHVCQUFULENBQWtDc0IsVUFBbEMsRUFBOENDLFVBQTlDLEVBQTBEQyxhQUExRCxFQUF5RTtBQUM1RSxRQUFJLE9BQU9ELFVBQVAsS0FBc0IsV0FBMUIsRUFDSSxPQUFPLEVBQVA7O0FBRUosVUFBTUUsY0FBaUIsRUFBdkI7QUFDQSxVQUFNQyxXQUFpQixNQUF2QjtBQUNBLFVBQU1DLGlCQUFpQkgsZ0JBQWdCQyxXQUF2Qzs7QUFFQSxXQUFPSCxXQUFXTixHQUFYLENBQWUsQ0FBQ1ksS0FBRCxFQUFRVCxLQUFSLEtBQWtCO0FBQ3BDLFlBQUlVLGlCQUFpQkMsT0FBT0MsWUFBUCxDQUFvQixHQUFwQixDQUFyQjs7QUFFQUYsMEJBQWtCVixVQUFVSSxVQUFWLEdBQXVCLEdBQXZCLEdBQTZCLEdBQS9DO0FBQ0FNLDBCQUFrQixLQUFsQjtBQUNBQSwwQkFBa0JWLFVBQVUsQ0FBVixHQUFjLElBQWQsR0FBcUIsRUFBdkM7QUFDQVUsMEJBQWtCRCxLQUFsQjs7QUFFQSxZQUFJQyxlQUFlRyxNQUFmLEdBQXdCTCxjQUE1QixFQUNJLE9BQU9FLGVBQWVJLE1BQWYsQ0FBc0IsQ0FBdEIsRUFBeUJOLGlCQUFpQkYsV0FBMUMsSUFBeURDLFFBQWhFOztBQUVKLGVBQU9HLGNBQVA7QUFDSCxLQVpNLEVBWUpULElBWkksQ0FZQyxJQVpELENBQVA7QUFhSDs7QUFFTSxTQUFTbkIsNEJBQVQsQ0FBdUNpQyxHQUF2QyxFQUE0QztBQUMvQyxXQUFPQSxJQUFJQyxPQUFKLENBQVksT0FBWixFQUFxQkMsU0FBUztBQUNqQyxlQUFPLG9CQUFPLFFBQVAsRUFBaUJBLE1BQU1KLE1BQXZCLENBQVA7QUFDSCxLQUZNLENBQVA7QUFHSDs7QUFFTSxTQUFTOUIsTUFBVCxDQUFpQm1DLEdBQWpCLEVBQXNCQyxTQUF0QixFQUFpQ0MsT0FBTyxFQUF4QyxFQUE0QztBQUMvQ0QsZ0JBQVksc0JBQVE7VUFDZG5DLFVBQVVrQyxJQUFJRyxZQUFkLENBQTRCLHdCQUF1QixzQkFBT0YsU0FBUCxDQUFrQjs7NkRBRWxCRCxJQUFJSSxTQUFVO0tBSDNELENBQVo7O0FBTUEsUUFBSUosSUFBSUssY0FBUixFQUNJSixhQUFjLDBGQUF5RixvQkFBV0QsSUFBSUssY0FBZixDQUErQixZQUF0STs7QUFFSixRQUFJLENBQUNILEtBQUtJLGVBQVYsRUFBMkI7QUFDdkIsY0FBTUMsaUJBQWlCUCxJQUFJUSxpQkFBSixFQUF2Qjs7QUFFQSxZQUFJRCxjQUFKLEVBQ0lOLGFBQWMsT0FBTU0sY0FBZSxFQUFuQztBQUNQOztBQUVELFdBQU9OLFVBQ0ZILE9BREUsQ0FDTSxJQUROLEVBQ1ksU0FBU1csTUFBVCxDQUFnQixDQUFoQixDQURaLENBQVA7QUFFSCIsImZpbGUiOiJlcnJvcnMvdGVzdC1ydW4vdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVkZW50IGZyb20gJ2RlZGVudCc7XG5pbXBvcnQgeyBlc2NhcGUgYXMgZXNjYXBlSHRtbCwgcmVwZWF0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBURVNUX1JVTl9QSEFTRSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9waGFzZSc7XG5cbmNvbnN0IFNVQlRJVExFUyA9IHtcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5pdGlhbF06ICAgICAgICAgICAgICAgICAnJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5GaXh0dXJlQmVmb3JlSG9va106ICAgICAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIGZpeHR1cmUuYmVmb3JlIGhvb2s8L3NwYW4+XFxuJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5GaXh0dXJlQmVmb3JlRWFjaEhvb2tdOiAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIGZpeHR1cmUuYmVmb3JlRWFjaCBob29rPC9zcGFuPlxcbicsXG4gICAgW1RFU1RfUlVOX1BIQVNFLmluVGVzdEJlZm9yZUhvb2tdOiAgICAgICAgJzxzcGFuIGNsYXNzPVwic3VidGl0bGVcIj5FcnJvciBpbiB0ZXN0LmJlZm9yZSBob29rPC9zcGFuPlxcbicsXG4gICAgW1RFU1RfUlVOX1BIQVNFLmluVGVzdF06ICAgICAgICAgICAgICAgICAgJycsXG4gICAgW1RFU1RfUlVOX1BIQVNFLmluVGVzdEFmdGVySG9va106ICAgICAgICAgJzxzcGFuIGNsYXNzPVwic3VidGl0bGVcIj5FcnJvciBpbiB0ZXN0LmFmdGVyIGhvb2s8L3NwYW4+XFxuJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5GaXh0dXJlQWZ0ZXJFYWNoSG9va106ICAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIGZpeHR1cmUuYWZ0ZXJFYWNoIGhvb2s8L3NwYW4+XFxuJyxcbiAgICBbVEVTVF9SVU5fUEhBU0UuaW5GaXh0dXJlQWZ0ZXJIb29rXTogICAgICAnPHNwYW4gY2xhc3M9XCJzdWJ0aXRsZVwiPkVycm9yIGluIGZpeHR1cmUuYWZ0ZXIgaG9vazwvc3Bhbj5cXG4nLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pblJvbGVJbml0aWFsaXplcl06ICAgICAgICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3IgaW4gUm9sZSBpbml0aWFsaXplcjwvc3Bhbj5cXG4nLFxuICAgIFtURVNUX1JVTl9QSEFTRS5pbkJvb2ttYXJrUmVzdG9yZV06ICAgICAgICc8c3BhbiBjbGFzcz1cInN1YnRpdGxlXCI+RXJyb3Igd2hpbGUgcmVzdG9yaW5nIGNvbmZpZ3VyYXRpb24gYWZ0ZXIgUm9sZSBzd2l0Y2g8L3NwYW4+XFxuJ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckZvcmJpZGRlbkNoYXJzTGlzdCAoZm9yYmlkZGVuQ2hhcnNMaXN0KSB7XG4gICAgcmV0dXJuIGZvcmJpZGRlbkNoYXJzTGlzdC5tYXAoY2hhckluZm8gPT4gYFxcdFwiJHtjaGFySW5mby5jaGFyc31cIiBhdCBpbmRleCAke2NoYXJJbmZvLmluZGV4fVxcbmApLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VXJsICh1cmwpIHtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke3VybH1cIj4ke3VybH08L2E+YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFNlbGVjdG9yQ2FsbHN0YWNrIChhcGlGbkNoYWluLCBhcGlGbkluZGV4LCB2aWV3cG9ydFdpZHRoKSB7XG4gICAgaWYgKHR5cGVvZiBhcGlGbkluZGV4ID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgY29uc3QgZW1wdHlTcGFjZXMgICAgPSAxMDtcbiAgICBjb25zdCBlbGxpcHNpcyAgICAgICA9ICcuLi4pJztcbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IHZpZXdwb3J0V2lkdGggLSBlbXB0eVNwYWNlcztcblxuICAgIHJldHVybiBhcGlGbkNoYWluLm1hcCgoYXBpRm4sIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBmb3JtYXR0ZWRBcGlGbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTYwKTtcblxuICAgICAgICBmb3JtYXR0ZWRBcGlGbiArPSBpbmRleCA9PT0gYXBpRm5JbmRleCA/ICc+JyA6ICcgJztcbiAgICAgICAgZm9ybWF0dGVkQXBpRm4gKz0gJyB8ICc7XG4gICAgICAgIGZvcm1hdHRlZEFwaUZuICs9IGluZGV4ICE9PSAwID8gJyAgJyA6ICcnO1xuICAgICAgICBmb3JtYXR0ZWRBcGlGbiArPSBhcGlGbjtcblxuICAgICAgICBpZiAoZm9ybWF0dGVkQXBpRm4ubGVuZ3RoID4gYXZhaWxhYmxlV2lkdGgpXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkQXBpRm4uc3Vic3RyKDAsIGF2YWlsYWJsZVdpZHRoIC0gZW1wdHlTcGFjZXMpICsgZWxsaXBzaXM7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZEFwaUZuO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUxlYWRpbmdTcGFjZXNXaXRoTmJzcCAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eICsvbWcsIG1hdGNoID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcGVhdCgnJm5ic3A7JywgbWF0Y2gubGVuZ3RoKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmt1cCAoZXJyLCBtc2dNYXJrdXAsIG9wdHMgPSB7fSkge1xuICAgIG1zZ01hcmt1cCA9IGRlZGVudChgXG4gICAgICAgICR7U1VCVElUTEVTW2Vyci50ZXN0UnVuUGhhc2VdfTxkaXYgY2xhc3M9XCJtZXNzYWdlXCI+JHtkZWRlbnQobXNnTWFya3VwKX08L2Rpdj5cblxuICAgICAgICA8c3Ryb25nPkJyb3dzZXI6PC9zdHJvbmc+IDxzcGFuIGNsYXNzPVwidXNlci1hZ2VudFwiPiR7ZXJyLnVzZXJBZ2VudH08L3NwYW4+XG4gICAgYCk7XG5cbiAgICBpZiAoZXJyLnNjcmVlbnNob3RQYXRoKVxuICAgICAgICBtc2dNYXJrdXAgKz0gYFxcbjxkaXYgY2xhc3M9XCJzY3JlZW5zaG90LWluZm9cIj48c3Ryb25nPlNjcmVlbnNob3Q6PC9zdHJvbmc+IDxhIGNsYXNzPVwic2NyZWVuc2hvdC1wYXRoXCI+JHtlc2NhcGVIdG1sKGVyci5zY3JlZW5zaG90UGF0aCl9PC9hPjwvZGl2PmA7XG5cbiAgICBpZiAoIW9wdHMud2l0aG91dENhbGxzaXRlKSB7XG4gICAgICAgIGNvbnN0IGNhbGxzaXRlTWFya3VwID0gZXJyLmdldENhbGxzaXRlTWFya3VwKCk7XG5cbiAgICAgICAgaWYgKGNhbGxzaXRlTWFya3VwKVxuICAgICAgICAgICAgbXNnTWFya3VwICs9IGBcXG5cXG4ke2NhbGxzaXRlTWFya3VwfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1zZ01hcmt1cFxuICAgICAgICAucmVwbGFjZSgnXFx0JywgJyZuYnNwOycucmVwZWF0KDQpKTtcbn1cbiJdfQ==
