'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _modulesGraph = require('./modules-graph');

var _modulesGraph2 = _interopRequireDefault(_modulesGraph);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WATCH_LOCKED_TIMEOUT = 700;

class FileWatcher extends _events2.default {
    constructor(files) {
        super();

        this.FILE_CHANGED_EVENT = 'file-changed';

        this.watchers = {};
        this.lockedFiles = {};
        this.modulesGraph = null;
        this.lastChangedFiles = [];

        files.forEach(f => this.addFile(f));
    }

    _onChanged(file) {
        const cache = require.cache;

        if (!this.modulesGraph) {
            this.modulesGraph = new _modulesGraph2.default();
            this.modulesGraph.build(cache, (0, _keys2.default)(this.watchers));
        } else {
            this.lastChangedFiles.forEach(changedFile => this.modulesGraph.rebuildNode(cache, changedFile));
            this.lastChangedFiles = [];
        }

        this.lastChangedFiles.push(file);
        this.modulesGraph.clearParentsCache(cache, file);

        this.emit(this.FILE_CHANGED_EVENT, { file });
    }

    _watch(file) {
        if (this.lockedFiles[file]) return;

        this.lockedFiles[file] = setTimeout(() => {
            this._onChanged(file);

            delete this.lockedFiles[file];
        }, WATCH_LOCKED_TIMEOUT);
    }

    stop() {
        (0, _values2.default)(this.watchers).forEach(watcher => {
            watcher.close();
        });
    }

    addFile(file) {
        if (!this.watchers[file] && file.indexOf('node_modules') < 0) {
            if (this.modulesGraph) {
                this.lastChangedFiles.push(file);
                this.modulesGraph.addNode(file, require.cache);
            }

            this.watchers[file] = _fs2.default.watch(file, () => this._watch(file));
        }
    }
}
exports.default = FileWatcher;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saXZlL2ZpbGUtd2F0Y2hlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJXQVRDSF9MT0NLRURfVElNRU9VVCIsIkZpbGVXYXRjaGVyIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJmaWxlcyIsIkZJTEVfQ0hBTkdFRF9FVkVOVCIsIndhdGNoZXJzIiwibG9ja2VkRmlsZXMiLCJtb2R1bGVzR3JhcGgiLCJsYXN0Q2hhbmdlZEZpbGVzIiwiZm9yRWFjaCIsImYiLCJhZGRGaWxlIiwiX29uQ2hhbmdlZCIsImZpbGUiLCJjYWNoZSIsInJlcXVpcmUiLCJNb2R1bGVzR3JhcGgiLCJidWlsZCIsImNoYW5nZWRGaWxlIiwicmVidWlsZE5vZGUiLCJwdXNoIiwiY2xlYXJQYXJlbnRzQ2FjaGUiLCJlbWl0IiwiX3dhdGNoIiwic2V0VGltZW91dCIsInN0b3AiLCJ3YXRjaGVyIiwiY2xvc2UiLCJpbmRleE9mIiwiYWRkTm9kZSIsImZzIiwid2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsdUJBQXVCLEdBQTdCOztBQUVlLE1BQU1DLFdBQU4sU0FBMEJDLGdCQUExQixDQUF1QztBQUNsREMsZ0JBQWFDLEtBQWIsRUFBb0I7QUFDaEI7O0FBRUEsYUFBS0Msa0JBQUwsR0FBMEIsY0FBMUI7O0FBRUEsYUFBS0MsUUFBTCxHQUF3QixFQUF4QjtBQUNBLGFBQUtDLFdBQUwsR0FBd0IsRUFBeEI7QUFDQSxhQUFLQyxZQUFMLEdBQXdCLElBQXhCO0FBQ0EsYUFBS0MsZ0JBQUwsR0FBd0IsRUFBeEI7O0FBRUFMLGNBQU1NLE9BQU4sQ0FBY0MsS0FBSyxLQUFLQyxPQUFMLENBQWFELENBQWIsQ0FBbkI7QUFDSDs7QUFFREUsZUFBWUMsSUFBWixFQUFrQjtBQUNkLGNBQU1DLFFBQVFDLFFBQVFELEtBQXRCOztBQUVBLFlBQUksQ0FBQyxLQUFLUCxZQUFWLEVBQXdCO0FBQ3BCLGlCQUFLQSxZQUFMLEdBQW9CLElBQUlTLHNCQUFKLEVBQXBCO0FBQ0EsaUJBQUtULFlBQUwsQ0FBa0JVLEtBQWxCLENBQXdCSCxLQUF4QixFQUErQixvQkFBWSxLQUFLVCxRQUFqQixDQUEvQjtBQUNILFNBSEQsTUFJSztBQUNELGlCQUFLRyxnQkFBTCxDQUFzQkMsT0FBdEIsQ0FBOEJTLGVBQWUsS0FBS1gsWUFBTCxDQUFrQlksV0FBbEIsQ0FBOEJMLEtBQTlCLEVBQXFDSSxXQUFyQyxDQUE3QztBQUNBLGlCQUFLVixnQkFBTCxHQUF3QixFQUF4QjtBQUNIOztBQUVELGFBQUtBLGdCQUFMLENBQXNCWSxJQUF0QixDQUEyQlAsSUFBM0I7QUFDQSxhQUFLTixZQUFMLENBQWtCYyxpQkFBbEIsQ0FBb0NQLEtBQXBDLEVBQTJDRCxJQUEzQzs7QUFFQSxhQUFLUyxJQUFMLENBQVUsS0FBS2xCLGtCQUFmLEVBQW1DLEVBQUVTLElBQUYsRUFBbkM7QUFDSDs7QUFFRFUsV0FBUVYsSUFBUixFQUFjO0FBQ1YsWUFBSSxLQUFLUCxXQUFMLENBQWlCTyxJQUFqQixDQUFKLEVBQ0k7O0FBRUosYUFBS1AsV0FBTCxDQUFpQk8sSUFBakIsSUFBeUJXLFdBQVcsTUFBTTtBQUN0QyxpQkFBS1osVUFBTCxDQUFnQkMsSUFBaEI7O0FBRUEsbUJBQU8sS0FBS1AsV0FBTCxDQUFpQk8sSUFBakIsQ0FBUDtBQUNILFNBSndCLEVBSXRCZCxvQkFKc0IsQ0FBekI7QUFLSDs7QUFFRDBCLFdBQVE7QUFDSiw4QkFBYyxLQUFLcEIsUUFBbkIsRUFBNkJJLE9BQTdCLENBQXFDaUIsV0FBVztBQUM1Q0Esb0JBQVFDLEtBQVI7QUFDSCxTQUZEO0FBR0g7O0FBRURoQixZQUFTRSxJQUFULEVBQWU7QUFDWCxZQUFJLENBQUMsS0FBS1IsUUFBTCxDQUFjUSxJQUFkLENBQUQsSUFBd0JBLEtBQUtlLE9BQUwsQ0FBYSxjQUFiLElBQStCLENBQTNELEVBQThEO0FBQzFELGdCQUFJLEtBQUtyQixZQUFULEVBQXVCO0FBQ25CLHFCQUFLQyxnQkFBTCxDQUFzQlksSUFBdEIsQ0FBMkJQLElBQTNCO0FBQ0EscUJBQUtOLFlBQUwsQ0FBa0JzQixPQUFsQixDQUEwQmhCLElBQTFCLEVBQWdDRSxRQUFRRCxLQUF4QztBQUNIOztBQUVELGlCQUFLVCxRQUFMLENBQWNRLElBQWQsSUFBc0JpQixhQUFHQyxLQUFILENBQVNsQixJQUFULEVBQWUsTUFBTSxLQUFLVSxNQUFMLENBQVlWLElBQVosQ0FBckIsQ0FBdEI7QUFDSDtBQUNKO0FBMURpRDtrQkFBakNiLFciLCJmaWxlIjoibGl2ZS9maWxlLXdhdGNoZXIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IE1vZHVsZXNHcmFwaCBmcm9tICcuL21vZHVsZXMtZ3JhcGgnO1xuXG5jb25zdCBXQVRDSF9MT0NLRURfVElNRU9VVCA9IDcwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZVdhdGNoZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yIChmaWxlcykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuRklMRV9DSEFOR0VEX0VWRU5UID0gJ2ZpbGUtY2hhbmdlZCc7XG5cbiAgICAgICAgdGhpcy53YXRjaGVycyAgICAgICAgID0ge307XG4gICAgICAgIHRoaXMubG9ja2VkRmlsZXMgICAgICA9IHt9O1xuICAgICAgICB0aGlzLm1vZHVsZXNHcmFwaCAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMgPSBbXTtcblxuICAgICAgICBmaWxlcy5mb3JFYWNoKGYgPT4gdGhpcy5hZGRGaWxlKGYpKTtcbiAgICB9XG5cbiAgICBfb25DaGFuZ2VkIChmaWxlKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gcmVxdWlyZS5jYWNoZTtcblxuICAgICAgICBpZiAoIXRoaXMubW9kdWxlc0dyYXBoKSB7XG4gICAgICAgICAgICB0aGlzLm1vZHVsZXNHcmFwaCA9IG5ldyBNb2R1bGVzR3JhcGgoKTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlc0dyYXBoLmJ1aWxkKGNhY2hlLCBPYmplY3Qua2V5cyh0aGlzLndhdGNoZXJzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMuZm9yRWFjaChjaGFuZ2VkRmlsZSA9PiB0aGlzLm1vZHVsZXNHcmFwaC5yZWJ1aWxkTm9kZShjYWNoZSwgY2hhbmdlZEZpbGUpKTtcbiAgICAgICAgICAgIHRoaXMubGFzdENoYW5nZWRGaWxlcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0Q2hhbmdlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgIHRoaXMubW9kdWxlc0dyYXBoLmNsZWFyUGFyZW50c0NhY2hlKGNhY2hlLCBmaWxlKTtcblxuICAgICAgICB0aGlzLmVtaXQodGhpcy5GSUxFX0NIQU5HRURfRVZFTlQsIHsgZmlsZSB9KTtcbiAgICB9XG5cbiAgICBfd2F0Y2ggKGZpbGUpIHtcbiAgICAgICAgaWYgKHRoaXMubG9ja2VkRmlsZXNbZmlsZV0pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5sb2NrZWRGaWxlc1tmaWxlXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2VkKGZpbGUpO1xuXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sb2NrZWRGaWxlc1tmaWxlXTtcbiAgICAgICAgfSwgV0FUQ0hfTE9DS0VEX1RJTUVPVVQpO1xuICAgIH1cblxuICAgIHN0b3AgKCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMud2F0Y2hlcnMpLmZvckVhY2god2F0Y2hlciA9PiB7XG4gICAgICAgICAgICB3YXRjaGVyLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZEZpbGUgKGZpbGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLndhdGNoZXJzW2ZpbGVdICYmIGZpbGUuaW5kZXhPZignbm9kZV9tb2R1bGVzJykgPCAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2R1bGVzR3JhcGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNHcmFwaC5hZGROb2RlKGZpbGUsIHJlcXVpcmUuY2FjaGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLndhdGNoZXJzW2ZpbGVdID0gZnMud2F0Y2goZmlsZSwgKCkgPT4gdGhpcy5fd2F0Y2goZmlsZSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
