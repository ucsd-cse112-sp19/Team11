'use strict';

exports.__esModule = true;
exports.TestRunCtorFactory = undefined;

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _testRun = require('../test-run');

var _testRun2 = _interopRequireDefault(_testRun);

var _testRunState = require('./test-run-state');

var _testRunState2 = _interopRequireDefault(_testRunState);

var _type = require('../test-run/commands/type');

var _type2 = _interopRequireDefault(_type);

var _service = require('../test-run/commands/service');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TEST_RUN_ABORTED_MESSAGE = 'The test run has been aborted.';

const TestRunCtorFactory = exports.TestRunCtorFactory = function TestRunCtorFactory(callbacks) {
    const created = callbacks.created,
          done = callbacks.done,
          readyToNext = callbacks.readyToNext;


    return class LiveModeTestRun extends _testRun2.default {
        constructor(test, browserConnection, screenshotCapturer, warningLog, opts) {
            super(test, browserConnection, screenshotCapturer, warningLog, opts);

            created(this, test);

            this.state = _testRunState2.default.created;
            this.finish = null;
            this.stopping = false;
            this.isInRoleInitializing = false;
            this.stopped = false;
        }

        stop() {
            this.stopped = true;
        }

        _useRole(...args) {
            this.isInRoleInitializing = true;

            return super._useRole.apply(this, args).then(res => {
                this.isInRoleInitializing = false;

                return res;
            }).catch(err => {
                this.isInRoleInitializing = false;

                throw err;
            });
        }

        executeCommand(commandToExec, callsite, forced) {
            // NOTE: don't close the page and the session when the last test in the queue is done
            if (commandToExec.type === _type2.default.testDone && !forced) {
                done(this, this.stopped).then(() => this.executeCommand(commandToExec, callsite, true)).then(() => readyToNext(this));

                this.executeCommand(new _service.UnlockPageCommand(), null);

                return _pinkie2.default.resolve();
            }

            if (this.stopped && !this.stopping && !this.isInRoleInitializing) {
                this.stopping = true;

                return _pinkie2.default.reject(new Error(TEST_RUN_ABORTED_MESSAGE));
            }

            return super.executeCommand(commandToExec, callsite);
        }
    };
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saXZlL3Rlc3QtcnVuLmpzIl0sIm5hbWVzIjpbIlRFU1RfUlVOX0FCT1JURURfTUVTU0FHRSIsIlRlc3RSdW5DdG9yRmFjdG9yeSIsImNhbGxiYWNrcyIsImNyZWF0ZWQiLCJkb25lIiwicmVhZHlUb05leHQiLCJMaXZlTW9kZVRlc3RSdW4iLCJUZXN0UnVuIiwiY29uc3RydWN0b3IiLCJ0ZXN0IiwiYnJvd3NlckNvbm5lY3Rpb24iLCJzY3JlZW5zaG90Q2FwdHVyZXIiLCJ3YXJuaW5nTG9nIiwib3B0cyIsInN0YXRlIiwiVEVTVF9SVU5fU1RBVEUiLCJmaW5pc2giLCJzdG9wcGluZyIsImlzSW5Sb2xlSW5pdGlhbGl6aW5nIiwic3RvcHBlZCIsInN0b3AiLCJfdXNlUm9sZSIsImFyZ3MiLCJhcHBseSIsInRoZW4iLCJyZXMiLCJjYXRjaCIsImVyciIsImV4ZWN1dGVDb21tYW5kIiwiY29tbWFuZFRvRXhlYyIsImNhbGxzaXRlIiwiZm9yY2VkIiwidHlwZSIsIkNPTU1BTkRfVFlQRSIsInRlc3REb25lIiwiVW5sb2NrUGFnZUNvbW1hbmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQSwyQkFBMkIsZ0NBQWpDOztBQUVPLE1BQU1DLGtEQUFxQixTQUFyQkEsa0JBQXFCLENBQVVDLFNBQVYsRUFBcUI7QUFBQSxVQUMzQ0MsT0FEMkMsR0FDWkQsU0FEWSxDQUMzQ0MsT0FEMkM7QUFBQSxVQUNsQ0MsSUFEa0MsR0FDWkYsU0FEWSxDQUNsQ0UsSUFEa0M7QUFBQSxVQUM1QkMsV0FENEIsR0FDWkgsU0FEWSxDQUM1QkcsV0FENEI7OztBQUduRCxXQUFPLE1BQU1DLGVBQU4sU0FBOEJDLGlCQUE5QixDQUFzQztBQUN6Q0Msb0JBQWFDLElBQWIsRUFBbUJDLGlCQUFuQixFQUFzQ0Msa0JBQXRDLEVBQTBEQyxVQUExRCxFQUFzRUMsSUFBdEUsRUFBNEU7QUFDeEUsa0JBQU1KLElBQU4sRUFBWUMsaUJBQVosRUFBK0JDLGtCQUEvQixFQUFtREMsVUFBbkQsRUFBK0RDLElBQS9EOztBQUVBVixvQkFBUSxJQUFSLEVBQWNNLElBQWQ7O0FBRUEsaUJBQUtLLEtBQUwsR0FBNEJDLHVCQUFlWixPQUEzQztBQUNBLGlCQUFLYSxNQUFMLEdBQTRCLElBQTVCO0FBQ0EsaUJBQUtDLFFBQUwsR0FBNEIsS0FBNUI7QUFDQSxpQkFBS0Msb0JBQUwsR0FBNEIsS0FBNUI7QUFDQSxpQkFBS0MsT0FBTCxHQUE0QixLQUE1QjtBQUNIOztBQUVEQyxlQUFRO0FBQ0osaUJBQUtELE9BQUwsR0FBZSxJQUFmO0FBQ0g7O0FBRURFLGlCQUFVLEdBQUdDLElBQWIsRUFBbUI7QUFDZixpQkFBS0osb0JBQUwsR0FBNEIsSUFBNUI7O0FBRUEsbUJBQU8sTUFBTUcsUUFBTixDQUFlRSxLQUFmLENBQXFCLElBQXJCLEVBQTJCRCxJQUEzQixFQUNGRSxJQURFLENBQ0dDLE9BQU87QUFDVCxxQkFBS1Asb0JBQUwsR0FBNEIsS0FBNUI7O0FBRUEsdUJBQU9PLEdBQVA7QUFDSCxhQUxFLEVBTUZDLEtBTkUsQ0FNSUMsT0FBTztBQUNWLHFCQUFLVCxvQkFBTCxHQUE0QixLQUE1Qjs7QUFFQSxzQkFBTVMsR0FBTjtBQUNILGFBVkUsQ0FBUDtBQVdIOztBQUVEQyx1QkFBZ0JDLGFBQWhCLEVBQStCQyxRQUEvQixFQUF5Q0MsTUFBekMsRUFBaUQ7QUFDN0M7QUFDQSxnQkFBSUYsY0FBY0csSUFBZCxLQUF1QkMsZUFBYUMsUUFBcEMsSUFBZ0QsQ0FBQ0gsTUFBckQsRUFBNkQ7QUFDekQzQixxQkFBSyxJQUFMLEVBQVcsS0FBS2UsT0FBaEIsRUFDS0ssSUFETCxDQUNVLE1BQU0sS0FBS0ksY0FBTCxDQUFvQkMsYUFBcEIsRUFBbUNDLFFBQW5DLEVBQTZDLElBQTdDLENBRGhCLEVBRUtOLElBRkwsQ0FFVSxNQUFNbkIsWUFBWSxJQUFaLENBRmhCOztBQUlBLHFCQUFLdUIsY0FBTCxDQUFvQixJQUFJTywwQkFBSixFQUFwQixFQUE2QyxJQUE3Qzs7QUFFQSx1QkFBT0MsaUJBQVFDLE9BQVIsRUFBUDtBQUNIOztBQUVELGdCQUFJLEtBQUtsQixPQUFMLElBQWdCLENBQUMsS0FBS0YsUUFBdEIsSUFDQSxDQUFDLEtBQUtDLG9CQURWLEVBQ2dDO0FBQzVCLHFCQUFLRCxRQUFMLEdBQWdCLElBQWhCOztBQUVBLHVCQUFPbUIsaUJBQVFFLE1BQVIsQ0FBZSxJQUFJQyxLQUFKLENBQVV2Qyx3QkFBVixDQUFmLENBQVA7QUFDSDs7QUFFRCxtQkFBTyxNQUFNNEIsY0FBTixDQUFxQkMsYUFBckIsRUFBb0NDLFFBQXBDLENBQVA7QUFDSDtBQXJEd0MsS0FBN0M7QUF1REgsQ0ExRE0iLCJmaWxlIjoibGl2ZS90ZXN0LXJ1bi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9taXNlIGZyb20gJ3BpbmtpZSc7XG5pbXBvcnQgVGVzdFJ1biBmcm9tICcuLi90ZXN0LXJ1bic7XG5pbXBvcnQgVEVTVF9SVU5fU1RBVEUgZnJvbSAnLi90ZXN0LXJ1bi1zdGF0ZSc7XG5pbXBvcnQgQ09NTUFORF9UWVBFIGZyb20gJy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3R5cGUnO1xuaW1wb3J0IHsgVW5sb2NrUGFnZUNvbW1hbmQgfSBmcm9tICcuLi90ZXN0LXJ1bi9jb21tYW5kcy9zZXJ2aWNlJztcblxuY29uc3QgVEVTVF9SVU5fQUJPUlRFRF9NRVNTQUdFID0gJ1RoZSB0ZXN0IHJ1biBoYXMgYmVlbiBhYm9ydGVkLic7XG5cbmV4cG9ydCBjb25zdCBUZXN0UnVuQ3RvckZhY3RvcnkgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7XG4gICAgY29uc3QgeyBjcmVhdGVkLCBkb25lLCByZWFkeVRvTmV4dCB9ID0gY2FsbGJhY2tzO1xuXG4gICAgcmV0dXJuIGNsYXNzIExpdmVNb2RlVGVzdFJ1biBleHRlbmRzIFRlc3RSdW4ge1xuICAgICAgICBjb25zdHJ1Y3RvciAodGVzdCwgYnJvd3NlckNvbm5lY3Rpb24sIHNjcmVlbnNob3RDYXB0dXJlciwgd2FybmluZ0xvZywgb3B0cykge1xuICAgICAgICAgICAgc3VwZXIodGVzdCwgYnJvd3NlckNvbm5lY3Rpb24sIHNjcmVlbnNob3RDYXB0dXJlciwgd2FybmluZ0xvZywgb3B0cyk7XG5cbiAgICAgICAgICAgIGNyZWF0ZWQodGhpcywgdGVzdCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgICAgICAgICAgICAgICAgPSBURVNUX1JVTl9TVEFURS5jcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5maW5pc2ggICAgICAgICAgICAgICA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnN0b3BwaW5nICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzSW5Sb2xlSW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnN0b3BwZWQgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzdG9wICgpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBfdXNlUm9sZSAoLi4uYXJncykge1xuICAgICAgICAgICAgdGhpcy5pc0luUm9sZUluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiBzdXBlci5fdXNlUm9sZS5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJblJvbGVJbml0aWFsaXppbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJblJvbGVJbml0aWFsaXppbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBleGVjdXRlQ29tbWFuZCAoY29tbWFuZFRvRXhlYywgY2FsbHNpdGUsIGZvcmNlZCkge1xuICAgICAgICAgICAgLy8gTk9URTogZG9uJ3QgY2xvc2UgdGhlIHBhZ2UgYW5kIHRoZSBzZXNzaW9uIHdoZW4gdGhlIGxhc3QgdGVzdCBpbiB0aGUgcXVldWUgaXMgZG9uZVxuICAgICAgICAgICAgaWYgKGNvbW1hbmRUb0V4ZWMudHlwZSA9PT0gQ09NTUFORF9UWVBFLnRlc3REb25lICYmICFmb3JjZWQpIHtcbiAgICAgICAgICAgICAgICBkb25lKHRoaXMsIHRoaXMuc3RvcHBlZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5leGVjdXRlQ29tbWFuZChjb21tYW5kVG9FeGVjLCBjYWxsc2l0ZSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHJlYWR5VG9OZXh0KHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUNvbW1hbmQobmV3IFVubG9ja1BhZ2VDb21tYW5kKCksIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5zdG9wcGVkICYmICF0aGlzLnN0b3BwaW5nICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNJblJvbGVJbml0aWFsaXppbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BwaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoVEVTVF9SVU5fQUJPUlRFRF9NRVNTQUdFKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChjb21tYW5kVG9FeGVjLCBjYWxsc2l0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiJdfQ==
