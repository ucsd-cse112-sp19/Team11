"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pinkie_1 = __importDefault(require("pinkie"));
const lodash_1 = require("lodash");
const test_run_controller_1 = __importDefault(require("./test-run-controller"));
const controller_1 = __importDefault(require("./controller"));
const runner_1 = __importDefault(require("../runner"));
const bootstrapper_1 = __importDefault(require("./bootstrapper"));
const parse_file_list_1 = __importDefault(require("../utils/parse-file-list"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
class LiveModeRunner extends runner_1.default {
    constructor(proxy, browserConnectionGateway, options) {
        super(proxy, browserConnectionGateway, options);
        /* EVENTS */
        this.TEST_RUN_DONE_EVENT = 'test-run-done';
        this.REQUIRED_MODULE_FOUND_EVENT = 'require-module-found';
        this.stopping = false;
        this.tcRunnerTaskPromise = null;
        this.stopInfiniteWaiting = lodash_1.noop;
        this.rejectInfiniteWaiting = lodash_1.noop;
        this.preventRunCall = false;
        this.assets = null;
        this.testRunController = new test_run_controller_1.default();
        this.embeddingOptions({
            TestRunCtor: this.testRunController.TestRunCtor,
            assets: []
        });
        this.controller = this._createController();
    }
    runTests(isFirstRun = false) {
        let runError = null;
        return this._finishPreviousTestRuns()
            .then(() => {
            return this._validateRunnableConfiguration(isFirstRun);
        })
            .then(() => {
            this.testRunController.setExpectedTestCount(this.liveConfigurationCache.tests.filter(t => !t.skip).length);
        })
            .then(() => {
            this.tcRunnerTaskPromise = super.run(this.opts);
            return this.tcRunnerTaskPromise;
        })
            .catch(err => {
            this.setBootstrappingError(null);
            runError = err;
        })
            .then(() => {
            this.tcRunnerTaskPromise = null;
            this.emit(this.TEST_RUN_DONE_EVENT, { err: runError });
        });
    }
    _validateRunOptions() {
        return super._validateRunOptions()
            .catch(err => {
            this.rejectInfiniteWaiting(err);
        });
    }
    _createRunnableConfiguration() {
        if (this.liveConfigurationCache)
            return pinkie_1.default.resolve(this.liveConfigurationCache);
        return super._createRunnableConfiguration()
            .then(configuration => {
            this.liveConfigurationCache = configuration;
            return configuration;
        })
            .catch(err => {
            this.rejectInfiniteWaiting(err);
        });
    }
    setBootstrappingError(err) {
        this.bootstrappingError = err;
    }
    run(options) {
        if (this.preventRunCall)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotRunLiveModeRunnerMultipleTimes);
        this.preventRunCall = true;
        this.opts = Object.assign({}, this.opts, options);
        this._setBootstrapperOptions();
        const fileListPromise = parse_file_list_1.default(this.bootstrapper.sources, process.cwd());
        fileListPromise
            .then(files => this.controller.init(files))
            .then(() => this._createRunnableConfiguration())
            .then(() => this.runTests(true));
        return this._waitUntilExit()
            .then(() => {
            return this._dispose();
        })
            .then(() => {
            this.preventRunCall = false;
        });
    }
    suspend() {
        if (!this.tcRunnerTaskPromise)
            return pinkie_1.default.resolve();
        this.stopping = true;
        this.testRunController.stop();
        this.tcRunnerTaskPromise.cancel();
        return this.testRunController.allTestsCompletePromise
            .then(() => {
            this.stopping = false;
            this.emit(this.TEST_RUN_DONE_EVENT, {});
        });
    }
    exit() {
        if (this.tcRunnerTaskPromise)
            this.tcRunnerTaskPromise.cancel();
        return pinkie_1.default.resolve()
            .then(() => this.stopInfiniteWaiting());
    }
    async _finishPreviousTestRuns() {
        if (!this.liveConfigurationCache.tests)
            return;
        this.testRunController.run();
    }
    _validateRunnableConfiguration(isFirstRun) {
        if (isFirstRun) {
            if (this.bootstrappingError)
                return pinkie_1.default.reject(this.bootstrappingError);
            return pinkie_1.default.resolve();
        }
        return this.bootstrapper._getTests()
            .then(tests => {
            this.liveConfigurationCache.tests = tests;
            return this.bootstrappingError ? pinkie_1.default.reject(this.bootstrappingError) : pinkie_1.default.resolve();
        });
    }
    _createTask(tests, browserConnectionGroups, proxy, opts) {
        opts.live = true;
        return super._createTask(tests, browserConnectionGroups, proxy, opts);
    }
    _createBootstrapper(browserConnectionGateway) {
        return new bootstrapper_1.default(this, browserConnectionGateway);
    }
    _createController() {
        return new controller_1.default(this);
    }
    _waitUntilExit() {
        return new pinkie_1.default((resolve, reject) => {
            this.stopInfiniteWaiting = resolve;
            this.rejectInfiniteWaiting = reject;
        });
    }
    _disposeAssets(browserSet, reporters, testedApp) {
        this.assets = { browserSet, reporters, testedApp };
        return pinkie_1.default.resolve();
    }
    _dispose() {
        this.controller.dispose();
        if (!this.assets)
            return pinkie_1.default.resolve();
        const { browserSet, reporters, testedApp } = this.assets;
        return super._disposeAssets(browserSet, reporters, testedApp);
    }
}
exports.default = LiveModeRunner;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,