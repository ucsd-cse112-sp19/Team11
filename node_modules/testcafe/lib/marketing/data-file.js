'use strict';

exports.__esModule = true;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _renderTemplate = require('../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MARKETING_DATA_DIR = _path2.default.join(_os2.default.tmpdir(), 'testcafe-marketing');
const MARKETING_DATA_FILE = 'data-file.json';

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:marketing');

class DataFile {
    constructor() {
        this.dataDir = MARKETING_DATA_DIR;
        this.dataPath = _path2.default.join(MARKETING_DATA_DIR, MARKETING_DATA_FILE);
    }

    _exists() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                yield (0, _promisifiedFunctions.stat)(_this.dataPath);

                return true;
            } catch (e) {
                return false;
            }
        })();
    }

    static _createTemplate() {
        return {
            runCount: 0,
            displayedMessageIndex: 0
        };
    }

    _save(data) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield (0, _promisifiedFunctions.writeFile)(_this2.dataPath, (0, _stringify2.default)(data));
        })();
    }

    _load() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const fileContent = yield (0, _promisifiedFunctions.readFile)(_this3.dataPath);

            return JSON.parse(fileContent);
        })();
    }

    load() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                yield (0, _makeDir2.default)(_this4.dataDir);

                let content = null;

                if (!(yield _this4._exists())) {
                    content = DataFile._createTemplate();

                    yield _this4._save(content);
                } else content = yield _this4._load();

                return content;
            } catch (e) {
                const message = (0, _renderTemplate2.default)(_warningMessage2.default.cannotLoadMarketingData, e);

                DEBUG_LOGGER(message);

                return null;
            }
        })();
    }

    save(data) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                yield _this5._save(data);
            } catch (e) {
                const message = (0, _renderTemplate2.default)(_warningMessage2.default.cannotSaveMarketingData, e);

                DEBUG_LOGGER(message);
            }
        })();
    }

    // NOTE: For testing purposes
    _remove() {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                yield (0, _promisifiedFunctions.deleteFile)(_this6.dataPath);
            } catch (e) {// eslint-disable-line no-empty
            }
        })();
    }
}
exports.default = DataFile;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrZXRpbmcvZGF0YS1maWxlLmpzIl0sIm5hbWVzIjpbIk1BUktFVElOR19EQVRBX0RJUiIsInBhdGgiLCJqb2luIiwib3MiLCJ0bXBkaXIiLCJNQVJLRVRJTkdfREFUQV9GSUxFIiwiREVCVUdfTE9HR0VSIiwiRGF0YUZpbGUiLCJjb25zdHJ1Y3RvciIsImRhdGFEaXIiLCJkYXRhUGF0aCIsIl9leGlzdHMiLCJlIiwiX2NyZWF0ZVRlbXBsYXRlIiwicnVuQ291bnQiLCJkaXNwbGF5ZWRNZXNzYWdlSW5kZXgiLCJfc2F2ZSIsImRhdGEiLCJfbG9hZCIsImZpbGVDb250ZW50IiwiSlNPTiIsInBhcnNlIiwibG9hZCIsImNvbnRlbnQiLCJtZXNzYWdlIiwiV0FSTklOR19NRVNTQUdFUyIsImNhbm5vdExvYWRNYXJrZXRpbmdEYXRhIiwic2F2ZSIsImNhbm5vdFNhdmVNYXJrZXRpbmdEYXRhIiwiX3JlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxxQkFBc0JDLGVBQUtDLElBQUwsQ0FBVUMsYUFBR0MsTUFBSCxFQUFWLEVBQXVCLG9CQUF2QixDQUE1QjtBQUNBLE1BQU1DLHNCQUFzQixnQkFBNUI7O0FBRUEsTUFBTUMsZUFBZSxxQkFBTSxvQkFBTixDQUFyQjs7QUFFZSxNQUFNQyxRQUFOLENBQWU7QUFDMUJDLGtCQUFlO0FBQ1gsYUFBS0MsT0FBTCxHQUFnQlQsa0JBQWhCO0FBQ0EsYUFBS1UsUUFBTCxHQUFnQlQsZUFBS0MsSUFBTCxDQUFVRixrQkFBVixFQUE4QkssbUJBQTlCLENBQWhCO0FBQ0g7O0FBRUtNLFdBQU4sR0FBaUI7QUFBQTs7QUFBQTtBQUNiLGdCQUFJO0FBQ0Esc0JBQU0sZ0NBQUssTUFBS0QsUUFBVixDQUFOOztBQUVBLHVCQUFPLElBQVA7QUFDSCxhQUpELENBS0EsT0FBT0UsQ0FBUCxFQUFVO0FBQ04sdUJBQU8sS0FBUDtBQUNIO0FBUlk7QUFTaEI7O0FBRUQsV0FBT0MsZUFBUCxHQUEwQjtBQUN0QixlQUFPO0FBQ0hDLHNCQUF1QixDQURwQjtBQUVIQyxtQ0FBdUI7QUFGcEIsU0FBUDtBQUlIOztBQUVLQyxTQUFOLENBQWFDLElBQWIsRUFBbUI7QUFBQTs7QUFBQTtBQUNmLGtCQUFNLHFDQUFVLE9BQUtQLFFBQWYsRUFBeUIseUJBQWVPLElBQWYsQ0FBekIsQ0FBTjtBQURlO0FBRWxCOztBQUVLQyxTQUFOLEdBQWU7QUFBQTs7QUFBQTtBQUNYLGtCQUFNQyxjQUFjLE1BQU0sb0NBQVMsT0FBS1QsUUFBZCxDQUExQjs7QUFFQSxtQkFBT1UsS0FBS0MsS0FBTCxDQUFXRixXQUFYLENBQVA7QUFIVztBQUlkOztBQUVLRyxRQUFOLEdBQWM7QUFBQTs7QUFBQTtBQUNWLGdCQUFJO0FBQ0Esc0JBQU0sdUJBQVEsT0FBS2IsT0FBYixDQUFOOztBQUVBLG9CQUFJYyxVQUFVLElBQWQ7O0FBRUEsb0JBQUksRUFBQyxNQUFNLE9BQUtaLE9BQUwsRUFBUCxDQUFKLEVBQTJCO0FBQ3ZCWSw4QkFBVWhCLFNBQVNNLGVBQVQsRUFBVjs7QUFFQSwwQkFBTSxPQUFLRyxLQUFMLENBQVdPLE9BQVgsQ0FBTjtBQUNILGlCQUpELE1BTUlBLFVBQVUsTUFBTSxPQUFLTCxLQUFMLEVBQWhCOztBQUVKLHVCQUFPSyxPQUFQO0FBQ0gsYUFkRCxDQWVBLE9BQU9YLENBQVAsRUFBVTtBQUNOLHNCQUFNWSxVQUFVLDhCQUFlQyx5QkFBaUJDLHVCQUFoQyxFQUF5RGQsQ0FBekQsQ0FBaEI7O0FBRUFOLDZCQUFha0IsT0FBYjs7QUFFQSx1QkFBTyxJQUFQO0FBQ0g7QUF0QlM7QUF1QmI7O0FBRUtHLFFBQU4sQ0FBWVYsSUFBWixFQUFrQjtBQUFBOztBQUFBO0FBQ2QsZ0JBQUk7QUFDQSxzQkFBTSxPQUFLRCxLQUFMLENBQVdDLElBQVgsQ0FBTjtBQUNILGFBRkQsQ0FHQSxPQUFPTCxDQUFQLEVBQVU7QUFDTixzQkFBTVksVUFBVSw4QkFBZUMseUJBQWlCRyx1QkFBaEMsRUFBeURoQixDQUF6RCxDQUFoQjs7QUFFQU4sNkJBQWFrQixPQUFiO0FBQ0g7QUFSYTtBQVNqQjs7QUFFRDtBQUNNSyxXQUFOLEdBQWlCO0FBQUE7O0FBQUE7QUFDYixnQkFBSTtBQUNBLHNCQUFNLHNDQUFXLE9BQUtuQixRQUFoQixDQUFOO0FBQ0gsYUFGRCxDQUdBLE9BQU9FLENBQVAsRUFBVSxDQUFFO0FBQ1g7QUFMWTtBQU1oQjtBQTdFeUI7a0JBQVRMLFEiLCJmaWxlIjoibWFya2V0aW5nL2RhdGEtZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBtYWtlRGlyIGZyb20gJ21ha2UtZGlyJztcbmltcG9ydCB7IHN0YXQsIHdyaXRlRmlsZSwgcmVhZEZpbGUsIGRlbGV0ZUZpbGUgfSBmcm9tICcuLi91dGlscy9wcm9taXNpZmllZC1mdW5jdGlvbnMnO1xuaW1wb3J0IHJlbmRlclRlbXBsYXRlIGZyb20gJy4uL3V0aWxzL3JlbmRlci10ZW1wbGF0ZSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IFdBUk5JTkdfTUVTU0FHRVMgZnJvbSAnLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuXG5jb25zdCBNQVJLRVRJTkdfREFUQV9ESVIgID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVzdGNhZmUtbWFya2V0aW5nJyk7XG5jb25zdCBNQVJLRVRJTkdfREFUQV9GSUxFID0gJ2RhdGEtZmlsZS5qc29uJztcblxuY29uc3QgREVCVUdfTE9HR0VSID0gZGVidWcoJ3Rlc3RjYWZlOm1hcmtldGluZycpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhRmlsZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmRhdGFEaXIgID0gTUFSS0VUSU5HX0RBVEFfRElSO1xuICAgICAgICB0aGlzLmRhdGFQYXRoID0gcGF0aC5qb2luKE1BUktFVElOR19EQVRBX0RJUiwgTUFSS0VUSU5HX0RBVEFfRklMRSk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2V4aXN0cyAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBzdGF0KHRoaXMuZGF0YVBhdGgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIF9jcmVhdGVUZW1wbGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBydW5Db3VudDogICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBkaXNwbGF5ZWRNZXNzYWdlSW5kZXg6IDBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBfc2F2ZSAoZGF0YSkge1xuICAgICAgICBhd2FpdCB3cml0ZUZpbGUodGhpcy5kYXRhUGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cblxuICAgIGFzeW5jIF9sb2FkICgpIHtcbiAgICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCByZWFkRmlsZSh0aGlzLmRhdGFQYXRoKTtcblxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShmaWxlQ29udGVudCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBtYWtlRGlyKHRoaXMuZGF0YURpcik7XG5cbiAgICAgICAgICAgIGxldCBjb250ZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCFhd2FpdCB0aGlzLl9leGlzdHMoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBEYXRhRmlsZS5fY3JlYXRlVGVtcGxhdGUoKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmUoY29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMuX2xvYWQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSByZW5kZXJUZW1wbGF0ZShXQVJOSU5HX01FU1NBR0VTLmNhbm5vdExvYWRNYXJrZXRpbmdEYXRhLCBlKTtcblxuICAgICAgICAgICAgREVCVUdfTE9HR0VSKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHNhdmUgKGRhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3NhdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSByZW5kZXJUZW1wbGF0ZShXQVJOSU5HX01FU1NBR0VTLmNhbm5vdFNhdmVNYXJrZXRpbmdEYXRhLCBlKTtcblxuICAgICAgICAgICAgREVCVUdfTE9HR0VSKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTk9URTogRm9yIHRlc3RpbmcgcHVycG9zZXNcbiAgICBhc3luYyBfcmVtb3ZlICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRlbGV0ZUZpbGUodGhpcy5kYXRhUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
