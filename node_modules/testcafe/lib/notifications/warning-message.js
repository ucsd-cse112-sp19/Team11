'use strict';

exports.__esModule = true;
exports.default = {
    screenshotsPathNotSpecified: 'Was unable to take screenshots because the screenshot directory is not specified. To specify it, use the "-s" or "--screenshots" command line option or the "screenshots" method of the test runner in case you are using API.',
    screenshotError: 'Was unable to take a screenshot due to an error.\n\n{errMessage}',
    screenshotMarkNotFound: 'Unable to locate the page area in the browser window screenshot at {screenshotPath}, because the page area mark with ID {markId} is not found in the screenshot.',
    screenshotRewritingError: 'The file at "{screenshotPath}" already exists. It has just been rewritten with a recent screenshot. This situation can possibly cause issues. To avoid them, make sure that each screenshot has a unique path. If a test runs in multiple browsers, consider including the user agent in the screenshot path or generate a unique identifier in another way.',
    browserManipulationsOnRemoteBrowser: 'The screenshot and window resize functionalities are not supported in a remote browser. They can function only if the browser is running on the same machine and in the same environment as the TestCafe server.',
    screenshotNotSupportedByBrowserProvider: 'The screenshot functionality is not supported by the "{providerName}" browser provider.',
    videoNotSupportedByBrowser: 'Video recording is not supported by the "{browserAlias}" browser.',
    videoBrowserResizing: 'The browser window was resized during the "{testName}" test while TestCafe recorded a video. TestCafe cannot adjust the video resolution during recording. As a result, the video content may appear broken. Do not resize the browser window when TestCafe records a video.',
    resizeNotSupportedByBrowserProvider: 'The window resize functionality is not supported by the "{providerName}" browser provider.',
    maximizeNotSupportedByBrowserProvider: 'The window maximization functionality is not supported by the "{providerName}" browser provider.',
    resizeError: 'Was unable to resize the window due to an error.\n\n{errMessage}',
    maximizeError: 'Was unable to maximize the window due to an error.\n\n{errMessage}',
    requestMockCORSValidationFailed: '{RequestHook}: CORS validation failed for a request specified as {requestFilterRule}',
    debugInHeadlessError: 'You cannot debug in headless mode.',
    cannotReadConfigFile: 'An error has occurred while reading the configuration file.',
    cannotParseConfigFile: "Failed to parse the '.testcaferc.json' file.\n\nThis file is not a well-formed JSON file.",
    configOptionsWereOverriden: 'The {optionsString} option{suffix} from the configuration file will be ignored.',

    cannotFindSSLCertFile: 'Unable to find the "{path}" file, specified by the "{option}" ssl option. Error details:\n' + '\n' + '{err}',

    cannotFindConfigurationFile: 'Unable to find the "{path}" configuration file. Error details:\n' + '\n' + '{err}',

    problematicPathPatternPlaceholderForVideoRecording: 'The {placeholderList} path pattern placeholder{suffix} cannot be applied to the recorded video.\n' + '\n' + 'The placeholder{suffix} {verb} replaced with an empty string.',

    cannotLoadMarketingData: 'An error has occurred while reading the marketing data. Error details:\n\n{err}',
    cannotSaveMarketingData: 'An error has occurred while saving the marketing data. Error details:\n\n{err}',
    cannotCalculateMarketingMessage: 'Cannot determine which promotional message to display. Attempted to display a message no. {index}'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZS5qcyJdLCJuYW1lcyI6WyJzY3JlZW5zaG90c1BhdGhOb3RTcGVjaWZpZWQiLCJzY3JlZW5zaG90RXJyb3IiLCJzY3JlZW5zaG90TWFya05vdEZvdW5kIiwic2NyZWVuc2hvdFJld3JpdGluZ0Vycm9yIiwiYnJvd3Nlck1hbmlwdWxhdGlvbnNPblJlbW90ZUJyb3dzZXIiLCJzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJ2aWRlb05vdFN1cHBvcnRlZEJ5QnJvd3NlciIsInZpZGVvQnJvd3NlclJlc2l6aW5nIiwicmVzaXplTm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXIiLCJtYXhpbWl6ZU5vdFN1cHBvcnRlZEJ5QnJvd3NlclByb3ZpZGVyIiwicmVzaXplRXJyb3IiLCJtYXhpbWl6ZUVycm9yIiwicmVxdWVzdE1vY2tDT1JTVmFsaWRhdGlvbkZhaWxlZCIsImRlYnVnSW5IZWFkbGVzc0Vycm9yIiwiY2Fubm90UmVhZENvbmZpZ0ZpbGUiLCJjYW5ub3RQYXJzZUNvbmZpZ0ZpbGUiLCJjb25maWdPcHRpb25zV2VyZU92ZXJyaWRlbiIsImNhbm5vdEZpbmRTU0xDZXJ0RmlsZSIsImNhbm5vdEZpbmRDb25maWd1cmF0aW9uRmlsZSIsInByb2JsZW1hdGljUGF0aFBhdHRlcm5QbGFjZWhvbGRlckZvclZpZGVvUmVjb3JkaW5nIiwiY2Fubm90TG9hZE1hcmtldGluZ0RhdGEiLCJjYW5ub3RTYXZlTWFya2V0aW5nRGF0YSIsImNhbm5vdENhbGN1bGF0ZU1hcmtldGluZ01lc3NhZ2UiXSwibWFwcGluZ3MiOiI7OztrQkFBZTtBQUNYQSxpQ0FBeUMsZ09BRDlCO0FBRVhDLHFCQUF5QyxrRUFGOUI7QUFHWEMsNEJBQXlDLGtLQUg5QjtBQUlYQyw4QkFBeUMsOFZBSjlCO0FBS1hDLHlDQUF5QyxrTkFMOUI7QUFNWEMsNkNBQXlDLHlGQU45QjtBQU9YQyxnQ0FBeUMsbUVBUDlCO0FBUVhDLDBCQUF5Qyw4UUFSOUI7QUFTWEMseUNBQXlDLDRGQVQ5QjtBQVVYQywyQ0FBeUMsa0dBVjlCO0FBV1hDLGlCQUF5QyxrRUFYOUI7QUFZWEMsbUJBQXlDLG9FQVo5QjtBQWFYQyxxQ0FBeUMsc0ZBYjlCO0FBY1hDLDBCQUF5QyxvQ0FkOUI7QUFlWEMsMEJBQXlDLDZEQWY5QjtBQWdCWEMsMkJBQXlDLDJGQWhCOUI7QUFpQlhDLGdDQUF5QyxpRkFqQjlCOztBQW1CWEMsMkJBQXVCLCtGQUNBLElBREEsR0FFQSxPQXJCWjs7QUF1QlhDLGlDQUE2QixxRUFDQSxJQURBLEdBRUEsT0F6QmxCOztBQTJCWEMsd0RBQW9ELHNHQUNBLElBREEsR0FFQSwrREE3QnpDOztBQStCWEMsNkJBQWlDLGlGQS9CdEI7QUFnQ1hDLDZCQUFpQyxnRkFoQ3RCO0FBaUNYQyxxQ0FBaUM7QUFqQ3RCLEMiLCJmaWxlIjoibm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgc2NyZWVuc2hvdHNQYXRoTm90U3BlY2lmaWVkOiAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byB0YWtlIHNjcmVlbnNob3RzIGJlY2F1c2UgdGhlIHNjcmVlbnNob3QgZGlyZWN0b3J5IGlzIG5vdCBzcGVjaWZpZWQuIFRvIHNwZWNpZnkgaXQsIHVzZSB0aGUgXCItc1wiIG9yIFwiLS1zY3JlZW5zaG90c1wiIGNvbW1hbmQgbGluZSBvcHRpb24gb3IgdGhlIFwic2NyZWVuc2hvdHNcIiBtZXRob2Qgb2YgdGhlIHRlc3QgcnVubmVyIGluIGNhc2UgeW91IGFyZSB1c2luZyBBUEkuJyxcbiAgICBzY3JlZW5zaG90RXJyb3I6ICAgICAgICAgICAgICAgICAgICAgICAgICdXYXMgdW5hYmxlIHRvIHRha2UgYSBzY3JlZW5zaG90IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHNjcmVlbnNob3RNYXJrTm90Rm91bmQ6ICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBsb2NhdGUgdGhlIHBhZ2UgYXJlYSBpbiB0aGUgYnJvd3NlciB3aW5kb3cgc2NyZWVuc2hvdCBhdCB7c2NyZWVuc2hvdFBhdGh9LCBiZWNhdXNlIHRoZSBwYWdlIGFyZWEgbWFyayB3aXRoIElEIHttYXJrSWR9IGlzIG5vdCBmb3VuZCBpbiB0aGUgc2NyZWVuc2hvdC4nLFxuICAgIHNjcmVlbnNob3RSZXdyaXRpbmdFcnJvcjogICAgICAgICAgICAgICAgJ1RoZSBmaWxlIGF0IFwie3NjcmVlbnNob3RQYXRofVwiIGFscmVhZHkgZXhpc3RzLiBJdCBoYXMganVzdCBiZWVuIHJld3JpdHRlbiB3aXRoIGEgcmVjZW50IHNjcmVlbnNob3QuIFRoaXMgc2l0dWF0aW9uIGNhbiBwb3NzaWJseSBjYXVzZSBpc3N1ZXMuIFRvIGF2b2lkIHRoZW0sIG1ha2Ugc3VyZSB0aGF0IGVhY2ggc2NyZWVuc2hvdCBoYXMgYSB1bmlxdWUgcGF0aC4gSWYgYSB0ZXN0IHJ1bnMgaW4gbXVsdGlwbGUgYnJvd3NlcnMsIGNvbnNpZGVyIGluY2x1ZGluZyB0aGUgdXNlciBhZ2VudCBpbiB0aGUgc2NyZWVuc2hvdCBwYXRoIG9yIGdlbmVyYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgaW4gYW5vdGhlciB3YXkuJyxcbiAgICBicm93c2VyTWFuaXB1bGF0aW9uc09uUmVtb3RlQnJvd3NlcjogICAgICdUaGUgc2NyZWVuc2hvdCBhbmQgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gYSByZW1vdGUgYnJvd3Nlci4gVGhleSBjYW4gZnVuY3Rpb24gb25seSBpZiB0aGUgYnJvd3NlciBpcyBydW5uaW5nIG9uIHRoZSBzYW1lIG1hY2hpbmUgYW5kIGluIHRoZSBzYW1lIGVudmlyb25tZW50IGFzIHRoZSBUZXN0Q2FmZSBzZXJ2ZXIuJyxcbiAgICBzY3JlZW5zaG90Tm90U3VwcG9ydGVkQnlCcm93c2VyUHJvdmlkZXI6ICdUaGUgc2NyZWVuc2hvdCBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgdmlkZW9Ob3RTdXBwb3J0ZWRCeUJyb3dzZXI6ICAgICAgICAgICAgICAnVmlkZW8gcmVjb3JkaW5nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie2Jyb3dzZXJBbGlhc31cIiBicm93c2VyLicsXG4gICAgdmlkZW9Ccm93c2VyUmVzaXppbmc6ICAgICAgICAgICAgICAgICAgICAnVGhlIGJyb3dzZXIgd2luZG93IHdhcyByZXNpemVkIGR1cmluZyB0aGUgXCJ7dGVzdE5hbWV9XCIgdGVzdCB3aGlsZSBUZXN0Q2FmZSByZWNvcmRlZCBhIHZpZGVvLiBUZXN0Q2FmZSBjYW5ub3QgYWRqdXN0IHRoZSB2aWRlbyByZXNvbHV0aW9uIGR1cmluZyByZWNvcmRpbmcuIEFzIGEgcmVzdWx0LCB0aGUgdmlkZW8gY29udGVudCBtYXkgYXBwZWFyIGJyb2tlbi4gRG8gbm90IHJlc2l6ZSB0aGUgYnJvd3NlciB3aW5kb3cgd2hlbiBUZXN0Q2FmZSByZWNvcmRzIGEgdmlkZW8uJyxcbiAgICByZXNpemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAgICdUaGUgd2luZG93IHJlc2l6ZSBmdW5jdGlvbmFsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIFwie3Byb3ZpZGVyTmFtZX1cIiBicm93c2VyIHByb3ZpZGVyLicsXG4gICAgbWF4aW1pemVOb3RTdXBwb3J0ZWRCeUJyb3dzZXJQcm92aWRlcjogICAnVGhlIHdpbmRvdyBtYXhpbWl6YXRpb24gZnVuY3Rpb25hbGl0eSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBcIntwcm92aWRlck5hbWV9XCIgYnJvd3NlciBwcm92aWRlci4nLFxuICAgIHJlc2l6ZUVycm9yOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dhcyB1bmFibGUgdG8gcmVzaXplIHRoZSB3aW5kb3cgZHVlIHRvIGFuIGVycm9yLlxcblxcbntlcnJNZXNzYWdlfScsXG4gICAgbWF4aW1pemVFcnJvcjogICAgICAgICAgICAgICAgICAgICAgICAgICAnV2FzIHVuYWJsZSB0byBtYXhpbWl6ZSB0aGUgd2luZG93IGR1ZSB0byBhbiBlcnJvci5cXG5cXG57ZXJyTWVzc2FnZX0nLFxuICAgIHJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQ6ICAgICAgICAgJ3tSZXF1ZXN0SG9va306IENPUlMgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGEgcmVxdWVzdCBzcGVjaWZpZWQgYXMge3JlcXVlc3RGaWx0ZXJSdWxlfScsXG4gICAgZGVidWdJbkhlYWRsZXNzRXJyb3I6ICAgICAgICAgICAgICAgICAgICAnWW91IGNhbm5vdCBkZWJ1ZyBpbiBoZWFkbGVzcyBtb2RlLicsXG4gICAgY2Fubm90UmVhZENvbmZpZ0ZpbGU6ICAgICAgICAgICAgICAgICAgICAnQW4gZXJyb3IgaGFzIG9jY3VycmVkIHdoaWxlIHJlYWRpbmcgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS4nLFxuICAgIGNhbm5vdFBhcnNlQ29uZmlnRmlsZTogICAgICAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gcGFyc2UgdGhlICcudGVzdGNhZmVyYy5qc29uJyBmaWxlLlxcblxcblRoaXMgZmlsZSBpcyBub3QgYSB3ZWxsLWZvcm1lZCBKU09OIGZpbGUuXCIsXG4gICAgY29uZmlnT3B0aW9uc1dlcmVPdmVycmlkZW46ICAgICAgICAgICAgICAnVGhlIHtvcHRpb25zU3RyaW5nfSBvcHRpb257c3VmZml4fSBmcm9tIHRoZSBjb25maWd1cmF0aW9uIGZpbGUgd2lsbCBiZSBpZ25vcmVkLicsXG5cbiAgICBjYW5ub3RGaW5kU1NMQ2VydEZpbGU6ICdVbmFibGUgdG8gZmluZCB0aGUgXCJ7cGF0aH1cIiBmaWxlLCBzcGVjaWZpZWQgYnkgdGhlIFwie29wdGlvbn1cIiBzc2wgb3B0aW9uLiBFcnJvciBkZXRhaWxzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3tlcnJ9JyxcblxuICAgIGNhbm5vdEZpbmRDb25maWd1cmF0aW9uRmlsZTogJ1VuYWJsZSB0byBmaW5kIHRoZSBcIntwYXRofVwiIGNvbmZpZ3VyYXRpb24gZmlsZS4gRXJyb3IgZGV0YWlsczpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7ZXJyfScsXG5cbiAgICBwcm9ibGVtYXRpY1BhdGhQYXR0ZXJuUGxhY2Vob2xkZXJGb3JWaWRlb1JlY29yZGluZzogJ1RoZSB7cGxhY2Vob2xkZXJMaXN0fSBwYXRoIHBhdHRlcm4gcGxhY2Vob2xkZXJ7c3VmZml4fSBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgcmVjb3JkZWQgdmlkZW8uXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBwbGFjZWhvbGRlcntzdWZmaXh9IHt2ZXJifSByZXBsYWNlZCB3aXRoIGFuIGVtcHR5IHN0cmluZy4nLFxuXG4gICAgY2Fubm90TG9hZE1hcmtldGluZ0RhdGE6ICAgICAgICAgJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGlsZSByZWFkaW5nIHRoZSBtYXJrZXRpbmcgZGF0YS4gRXJyb3IgZGV0YWlsczpcXG5cXG57ZXJyfScsXG4gICAgY2Fubm90U2F2ZU1hcmtldGluZ0RhdGE6ICAgICAgICAgJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGlsZSBzYXZpbmcgdGhlIG1hcmtldGluZyBkYXRhLiBFcnJvciBkZXRhaWxzOlxcblxcbntlcnJ9JyxcbiAgICBjYW5ub3RDYWxjdWxhdGVNYXJrZXRpbmdNZXNzYWdlOiAnQ2Fubm90IGRldGVybWluZSB3aGljaCBwcm9tb3Rpb25hbCBtZXNzYWdlIHRvIGRpc3BsYXkuIEF0dGVtcHRlZCB0byBkaXNwbGF5IGEgbWVzc2FnZSBuby4ge2luZGV4fSdcbn07XG5cbiJdfQ==
