'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _isStream = require('is-stream');

var _pluginHost = require('./plugin-host');

var _pluginHost2 = _interopRequireDefault(_pluginHost);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Reporter {
    constructor(plugin, task, outStream) {
        this.plugin = new _pluginHost2.default(plugin, outStream);
        this.task = task;

        this.disposed = false;
        this.passed = 0;
        this.failed = 0;
        this.skipped = 0;
        this.testCount = task.tests.filter(test => !test.skip).length;
        this.reportQueue = Reporter._createReportQueue(task);
        this.stopOnFirstFail = task.opts.stopOnFirstFail;
        this.outStream = outStream;

        this._assignTaskEventHandlers();
    }

    static _isSpecialStream(stream) {
        return stream.isTTY || stream === process.stdout || stream === process.stderr;
    }

    static _createPendingPromise() {
        let resolver = null;

        const promise = new _pinkie2.default(resolve => {
            resolver = resolve;
        });

        promise.resolve = resolver;

        return promise;
    }

    static _createReportItem(test, runsPerTest) {
        return {
            fixture: test.fixture,
            test: test,
            screenshotPath: null,
            screenshots: [],
            quarantine: null,
            errs: [],
            warnings: [],
            unstable: false,
            startTime: null,
            testRunInfo: null,

            pendingRuns: runsPerTest,
            pendingPromise: Reporter._createPendingPromise()
        };
    }

    static _createReportQueue(task) {
        const runsPerTest = task.browserConnectionGroups.length;

        return task.tests.map(test => Reporter._createReportItem(test, runsPerTest));
    }

    static _createTestRunInfo(reportItem) {
        return {
            errs: (0, _lodash.sortBy)(reportItem.errs, ['userAgent', 'code']),
            warnings: reportItem.warnings,
            durationMs: new Date() - reportItem.startTime,
            unstable: reportItem.unstable,
            screenshotPath: reportItem.screenshotPath,
            screenshots: reportItem.screenshots,
            quarantine: reportItem.quarantine,
            skipped: reportItem.test.skip
        };
    }

    _getReportItemForTestRun(testRun) {
        return (0, _lodash.find)(this.reportQueue, i => i.test === testRun.test);
    }

    _shiftReportQueue(reportItem) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            let currentFixture = null;
            let nextReportItem = null;

            while (_this.reportQueue.length && _this.reportQueue[0].testRunInfo) {
                reportItem = _this.reportQueue.shift();
                currentFixture = reportItem.fixture;

                yield _this.plugin.reportTestDone(reportItem.test.name, reportItem.testRunInfo, reportItem.test.meta);

                // NOTE: here we assume that tests are sorted by fixture.
                // Therefore, if the next report item has a different
                // fixture, we can report this fixture start.
                nextReportItem = _this.reportQueue[0];

                if (nextReportItem && nextReportItem.fixture !== currentFixture) yield _this.plugin.reportFixtureStart(nextReportItem.fixture.name, nextReportItem.fixture.path, nextReportItem.fixture.meta);
            }
        })();
    }

    _resolveReportItem(reportItem, testRun) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.task.screenshots.hasCapturedFor(testRun.test)) {
                reportItem.screenshotPath = _this2.task.screenshots.getPathFor(testRun.test);
                reportItem.screenshots = _this2.task.screenshots.getScreenshotsInfo(testRun.test);
            }

            if (testRun.quarantine) {
                reportItem.quarantine = testRun.quarantine.attempts.reduce(function (result, errors, index) {
                    const passed = !errors.length;
                    const quarantineAttempt = index + 1;

                    result[quarantineAttempt] = { passed };

                    return result;
                }, {});
            }

            if (!reportItem.testRunInfo) {
                reportItem.testRunInfo = Reporter._createTestRunInfo(reportItem);

                if (reportItem.test.skip) _this2.skipped++;else if (reportItem.errs.length) _this2.failed++;else _this2.passed++;
            }

            yield _this2._shiftReportQueue(reportItem);

            reportItem.pendingPromise.resolve();
        })();
    }

    _assignTaskEventHandlers() {
        var _this3 = this;

        const task = this.task;

        task.once('start', (0, _asyncToGenerator3.default)(function* () {
            const startTime = new Date();
            const userAgents = task.browserConnectionGroups.map(function (group) {
                return group[0].userAgent;
            });
            const first = _this3.reportQueue[0];

            yield _this3.plugin.reportTaskStart(startTime, userAgents, _this3.testCount);
            yield _this3.plugin.reportFixtureStart(first.fixture.name, first.fixture.path, first.fixture.meta);
        }));

        task.on('test-run-start', testRun => {
            const reportItem = this._getReportItemForTestRun(testRun);

            if (!reportItem.startTime) reportItem.startTime = new Date();
        });

        task.on('test-run-done', (() => {
            var _ref2 = (0, _asyncToGenerator3.default)(function* (testRun) {
                const reportItem = _this3._getReportItemForTestRun(testRun);
                const isTestRunStoppedTaskExecution = !!testRun.errs.length && _this3.stopOnFirstFail;

                reportItem.pendingRuns = isTestRunStoppedTaskExecution ? 0 : reportItem.pendingRuns - 1;
                reportItem.unstable = reportItem.unstable || testRun.unstable;
                reportItem.errs = reportItem.errs.concat(testRun.errs);
                reportItem.warnings = testRun.warningLog ? (0, _lodash.union)(reportItem.warnings, testRun.warningLog.messages) : [];

                if (!reportItem.pendingRuns) yield _this3._resolveReportItem(reportItem, testRun);

                yield reportItem.pendingPromise;
            });

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        })());

        task.once('done', (0, _asyncToGenerator3.default)(function* () {
            const endTime = new Date();

            const result = {
                passedCount: _this3.passed,
                failedCount: _this3.failed,
                skippedCount: _this3.skipped
            };

            yield _this3.plugin.reportTaskDone(endTime, _this3.passed, task.warningLog.messages, result);
        }));
    }

    dispose() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this4.disposed) return _pinkie2.default.resolve();

            _this4.disposed = true;

            if (!_this4.outStream || Reporter._isSpecialStream(_this4.outStream) || !(0, _isStream.writable)(_this4.outStream)) return _pinkie2.default.resolve();

            const streamFinishedPromise = new _pinkie2.default(function (resolve) {
                _this4.outStream.once('finish', resolve);
                _this4.outStream.once('error', resolve);
            });

            _this4.outStream.end();

            return streamFinishedPromise;
        })();
    }
}
exports.default = Reporter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
