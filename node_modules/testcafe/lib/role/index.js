'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.createRole = createRole;
exports.createAnonymousRole = createAnonymousRole;

var _events = require('events');

var _nanoid = require('nanoid');

var _nanoid2 = _interopRequireDefault(_nanoid);

var _phase = require('./phase');

var _phase2 = _interopRequireDefault(_phase);

var _typeAssertions = require('../errors/runtime/type-assertions');

var _wrapTestFunction = require('../api/wrap-test-function');

var _wrapTestFunction2 = _interopRequireDefault(_wrapTestFunction);

var _testPageUrl = require('../api/test-page-url');

var _actions = require('../test-run/commands/actions');

var _markerSymbol = require('./marker-symbol');

var _markerSymbol2 = _interopRequireDefault(_markerSymbol);

var _testcafeHammerhead = require('testcafe-hammerhead');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Role extends _events.EventEmitter {
    constructor(loginPage, initFn, options = {}) {
        super();

        this[_markerSymbol2.default] = true;

        this.id = (0, _nanoid2.default)(7);
        this.phase = loginPage ? _phase2.default.uninitialized : _phase2.default.initialized;

        this.loginPage = loginPage;
        this.initFn = initFn;
        this.opts = options;

        this.url = null;
        this.stateSnapshot = _testcafeHammerhead.StateSnapshot.empty();
        this.initErr = null;
    }

    _navigateToLoginPage(testRun) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const navigateCommand = new _actions.NavigateToCommand({
                url: _this.loginPage,
                forceReload: true
            });

            yield testRun.executeCommand(navigateCommand);
        })();
    }

    _storeStateSnapshot(testRun) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.initErr) return;

            _this2.stateSnapshot = yield testRun.getStateSnapshot();
        })();
    }

    _executeInitFn(testRun) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                testRun.disableDebugBreakpoints = false;
                yield _this3.initFn(testRun);
            } catch (err) {
                _this3.initErr = err;
            } finally {
                testRun.disableDebugBreakpoints = true;
            }
        })();
    }

    initialize(testRun) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this4.phase = _phase2.default.pendingInitialization;

            yield testRun.switchToCleanRun();
            yield _this4._navigateToLoginPage(testRun);
            yield _this4._executeInitFn(testRun);
            yield _this4._storeStateSnapshot(testRun);

            if (_this4.opts.preserveUrl) _this4.url = yield testRun.getCurrentUrl();

            _this4.phase = _phase2.default.initialized;
            _this4.emit('initialized');
        })();
    }
}

function createRole(loginPage, initFn, options = {}) {
    (0, _typeAssertions.assertType)(_typeAssertions.is.string, 'Role', '"loginPage" argument', loginPage);
    (0, _typeAssertions.assertType)(_typeAssertions.is.function, 'Role', '"initFn" argument', initFn);
    (0, _typeAssertions.assertType)(_typeAssertions.is.nonNullObject, 'Role', '"options" argument', options);

    if (options.preserveUrl !== void 0) (0, _typeAssertions.assertType)(_typeAssertions.is.boolean, 'Role', '"preserveUrl" option', options.preserveUrl);

    loginPage = (0, _testPageUrl.resolvePageUrl)(loginPage);
    initFn = (0, _wrapTestFunction2.default)(initFn);

    return new Role(loginPage, initFn, options);
}

function createAnonymousRole() {
    return new Role(null, null);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb2xlL2luZGV4LmpzIl0sIm5hbWVzIjpbImNyZWF0ZVJvbGUiLCJjcmVhdGVBbm9ueW1vdXNSb2xlIiwiUm9sZSIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwibG9naW5QYWdlIiwiaW5pdEZuIiwib3B0aW9ucyIsInJvbGVNYXJrZXIiLCJpZCIsInBoYXNlIiwiUEhBU0UiLCJ1bmluaXRpYWxpemVkIiwiaW5pdGlhbGl6ZWQiLCJvcHRzIiwidXJsIiwic3RhdGVTbmFwc2hvdCIsIlN0YXRlU25hcHNob3QiLCJlbXB0eSIsImluaXRFcnIiLCJfbmF2aWdhdGVUb0xvZ2luUGFnZSIsInRlc3RSdW4iLCJuYXZpZ2F0ZUNvbW1hbmQiLCJOYXZpZ2F0ZVRvQ29tbWFuZCIsImZvcmNlUmVsb2FkIiwiZXhlY3V0ZUNvbW1hbmQiLCJfc3RvcmVTdGF0ZVNuYXBzaG90IiwiZ2V0U3RhdGVTbmFwc2hvdCIsIl9leGVjdXRlSW5pdEZuIiwiZGlzYWJsZURlYnVnQnJlYWtwb2ludHMiLCJlcnIiLCJpbml0aWFsaXplIiwicGVuZGluZ0luaXRpYWxpemF0aW9uIiwic3dpdGNoVG9DbGVhblJ1biIsInByZXNlcnZlVXJsIiwiZ2V0Q3VycmVudFVybCIsImVtaXQiLCJpcyIsInN0cmluZyIsImZ1bmN0aW9uIiwibm9uTnVsbE9iamVjdCIsImJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O1FBeUVnQkEsVSxHQUFBQSxVO1FBY0FDLG1CLEdBQUFBLG1COztBQXZGaEI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLE1BQU1DLElBQU4sU0FBbUJDLG9CQUFuQixDQUFnQztBQUM1QkMsZ0JBQWFDLFNBQWIsRUFBd0JDLE1BQXhCLEVBQWdDQyxVQUFVLEVBQTFDLEVBQThDO0FBQzFDOztBQUVBLGFBQUtDLHNCQUFMLElBQW1CLElBQW5COztBQUVBLGFBQUtDLEVBQUwsR0FBYSxz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SUFBZixDQUFQO0FBQ0giLCJmaWxlIjoicm9sZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgbmFub2lkIGZyb20gJ25hbm9pZCc7XG5pbXBvcnQgUEhBU0UgZnJvbSAnLi9waGFzZSc7XG5pbXBvcnQgeyBhc3NlcnRUeXBlLCBpcyB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lL3R5cGUtYXNzZXJ0aW9ucyc7XG5pbXBvcnQgd3JhcFRlc3RGdW5jdGlvbiBmcm9tICcuLi9hcGkvd3JhcC10ZXN0LWZ1bmN0aW9uJztcbmltcG9ydCB7IHJlc29sdmVQYWdlVXJsIH0gZnJvbSAnLi4vYXBpL3Rlc3QtcGFnZS11cmwnO1xuaW1wb3J0IHsgTmF2aWdhdGVUb0NvbW1hbmQgfSBmcm9tICcuLi90ZXN0LXJ1bi9jb21tYW5kcy9hY3Rpb25zJztcbmltcG9ydCByb2xlTWFya2VyIGZyb20gJy4vbWFya2VyLXN5bWJvbCc7XG5pbXBvcnQgeyBTdGF0ZVNuYXBzaG90IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5cbmNsYXNzIFJvbGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yIChsb2dpblBhZ2UsIGluaXRGbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpc1tyb2xlTWFya2VyXSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5pZCAgICA9IG5hbm9pZCg3KTtcbiAgICAgICAgdGhpcy5waGFzZSA9IGxvZ2luUGFnZSA/IFBIQVNFLnVuaW5pdGlhbGl6ZWQgOiBQSEFTRS5pbml0aWFsaXplZDtcblxuICAgICAgICB0aGlzLmxvZ2luUGFnZSA9IGxvZ2luUGFnZTtcbiAgICAgICAgdGhpcy5pbml0Rm4gICAgPSBpbml0Rm47XG4gICAgICAgIHRoaXMub3B0cyAgICAgID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLnVybCAgICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlU25hcHNob3QgPSBTdGF0ZVNuYXBzaG90LmVtcHR5KCk7XG4gICAgICAgIHRoaXMuaW5pdEVyciAgICAgICA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgX25hdmlnYXRlVG9Mb2dpblBhZ2UgKHRlc3RSdW4pIHtcbiAgICAgICAgY29uc3QgbmF2aWdhdGVDb21tYW5kID0gbmV3IE5hdmlnYXRlVG9Db21tYW5kKHtcbiAgICAgICAgICAgIHVybDogICAgICAgICB0aGlzLmxvZ2luUGFnZSxcbiAgICAgICAgICAgIGZvcmNlUmVsb2FkOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IHRlc3RSdW4uZXhlY3V0ZUNvbW1hbmQobmF2aWdhdGVDb21tYW5kKTtcbiAgICB9XG5cbiAgICBhc3luYyBfc3RvcmVTdGF0ZVNuYXBzaG90ICh0ZXN0UnVuKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRFcnIpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5zdGF0ZVNuYXBzaG90ID0gYXdhaXQgdGVzdFJ1bi5nZXRTdGF0ZVNuYXBzaG90KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2V4ZWN1dGVJbml0Rm4gKHRlc3RSdW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRlc3RSdW4uZGlzYWJsZURlYnVnQnJlYWtwb2ludHMgPSBmYWxzZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdEZuKHRlc3RSdW4pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdEVyciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRlc3RSdW4uZGlzYWJsZURlYnVnQnJlYWtwb2ludHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZSAodGVzdFJ1bikge1xuICAgICAgICB0aGlzLnBoYXNlID0gUEhBU0UucGVuZGluZ0luaXRpYWxpemF0aW9uO1xuXG4gICAgICAgIGF3YWl0IHRlc3RSdW4uc3dpdGNoVG9DbGVhblJ1bigpO1xuICAgICAgICBhd2FpdCB0aGlzLl9uYXZpZ2F0ZVRvTG9naW5QYWdlKHRlc3RSdW4pO1xuICAgICAgICBhd2FpdCB0aGlzLl9leGVjdXRlSW5pdEZuKHRlc3RSdW4pO1xuICAgICAgICBhd2FpdCB0aGlzLl9zdG9yZVN0YXRlU25hcHNob3QodGVzdFJ1bik7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0cy5wcmVzZXJ2ZVVybClcbiAgICAgICAgICAgIHRoaXMudXJsID0gYXdhaXQgdGVzdFJ1bi5nZXRDdXJyZW50VXJsKCk7XG5cbiAgICAgICAgdGhpcy5waGFzZSA9IFBIQVNFLmluaXRpYWxpemVkO1xuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpemVkJyk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUm9sZSAobG9naW5QYWdlLCBpbml0Rm4sIG9wdGlvbnMgPSB7fSkge1xuICAgIGFzc2VydFR5cGUoaXMuc3RyaW5nLCAnUm9sZScsICdcImxvZ2luUGFnZVwiIGFyZ3VtZW50JywgbG9naW5QYWdlKTtcbiAgICBhc3NlcnRUeXBlKGlzLmZ1bmN0aW9uLCAnUm9sZScsICdcImluaXRGblwiIGFyZ3VtZW50JywgaW5pdEZuKTtcbiAgICBhc3NlcnRUeXBlKGlzLm5vbk51bGxPYmplY3QsICdSb2xlJywgJ1wib3B0aW9uc1wiIGFyZ3VtZW50Jywgb3B0aW9ucyk7XG5cbiAgICBpZiAob3B0aW9ucy5wcmVzZXJ2ZVVybCAhPT0gdm9pZCAwKVxuICAgICAgICBhc3NlcnRUeXBlKGlzLmJvb2xlYW4sICdSb2xlJywgJ1wicHJlc2VydmVVcmxcIiBvcHRpb24nLCBvcHRpb25zLnByZXNlcnZlVXJsKTtcblxuICAgIGxvZ2luUGFnZSA9IHJlc29sdmVQYWdlVXJsKGxvZ2luUGFnZSk7XG4gICAgaW5pdEZuICAgID0gd3JhcFRlc3RGdW5jdGlvbihpbml0Rm4pO1xuXG4gICAgcmV0dXJuIG5ldyBSb2xlKGxvZ2luUGFnZSwgaW5pdEZuLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFub255bW91c1JvbGUgKCkge1xuICAgIHJldHVybiBuZXcgUm9sZShudWxsLCBudWxsKTtcbn1cbiJdfQ==
