'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _compiler = require('../compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _connection = require('../browser/connection');

var _connection2 = _interopRequireDefault(_connection);

var _runtime = require('../errors/runtime');

var _pool = require('../browser/provider/pool');

var _pool2 = _interopRequireDefault(_pool);

var _types = require('../errors/types');

var _browserSet = require('./browser-set');

var _browserSet2 = _interopRequireDefault(_browserSet);

var _testedApp = require('./tested-app');

var _testedApp2 = _interopRequireDefault(_testedApp);

var _parseFileList = require('../utils/parse-file-list');

var _parseFileList2 = _interopRequireDefault(_parseFileList);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _resolvePathRelativelyCwd = require('../utils/resolve-path-relatively-cwd');

var _resolvePathRelativelyCwd2 = _interopRequireDefault(_resolvePathRelativelyCwd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Bootstrapper {
    constructor(browserConnectionGateway) {
        this.browserConnectionGateway = browserConnectionGateway;

        this.concurrency = null;
        this.sources = [];
        this.browsers = [];
        this.reporters = [];
        this.filter = null;
        this.appCommand = null;
        this.appInitDelay = null;
    }

    static _splitBrowserInfo(browserInfo) {
        const remotes = [];
        const automated = [];

        browserInfo.forEach(browser => {
            if (browser instanceof _connection2.default) remotes.push(browser);else automated.push(browser);
        });

        return { remotes, automated };
    }

    _getBrowserInfo() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this.browsers.length) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.browserNotSet);

            const browserInfo = yield _pinkie2.default.all(_this.browsers.map(function (browser) {
                return _pool2.default.getBrowserInfo(browser);
            }));

            return (0, _lodash.flatten)(browserInfo);
        })();
    }

    _createAutomatedConnections(browserInfo) {
        if (!browserInfo) return [];

        return browserInfo.map(browser => (0, _lodash.times)(this.concurrency, () => new _connection2.default(this.browserConnectionGateway, browser)));
    }

    _getBrowserConnections(browserInfo) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var _Bootstrapper$_splitB = Bootstrapper._splitBrowserInfo(browserInfo);

            const automated = _Bootstrapper$_splitB.automated,
                  remotes = _Bootstrapper$_splitB.remotes;


            if (remotes && remotes.length % _this2.concurrency) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotDivideRemotesCountByConcurrency);

            let browserConnections = _this2._createAutomatedConnections(automated);

            browserConnections = browserConnections.concat((0, _lodash.chunk)(remotes, _this2.concurrency));

            return yield _browserSet2.default.from(browserConnections);
        })();
    }

    _getTests() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this3.sources.length) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.testSourcesNotSet);

            const parsedFileList = yield (0, _parseFileList2.default)(_this3.sources, process.cwd());
            const compiler = new _compiler2.default(parsedFileList);
            let tests = yield compiler.getTests();

            const testsWithOnlyFlag = tests.filter(function (test) {
                return test.only;
            });

            if (testsWithOnlyFlag.length) tests = testsWithOnlyFlag;

            if (_this3.filter) tests = tests.filter(function (test) {
                return _this3.filter(test.name, test.fixture.name, test.fixture.path, test.meta, test.fixture.meta);
            });

            if (!tests.length) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.noTestsToRun);

            return tests;
        })();
    }

    _ensureOutStream(outStream) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (typeof outStream !== 'string') return outStream;

            const fullReporterOutputPath = (0, _resolvePathRelativelyCwd2.default)(outStream);

            yield (0, _makeDir2.default)(_path2.default.dirname(fullReporterOutputPath));

            return _fs2.default.createWriteStream(fullReporterOutputPath);
        })();
    }

    static _addDefaultReporter(reporters) {
        reporters.push({
            name: 'spec',
            file: process.stdout
        });
    }

    _getReporterPlugins() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const stdoutReporters = (0, _lodash.filter)(_this4.reporters, function (r) {
                return (0, _lodash.isUndefined)(r.output) || r.output === process.stdout;
            });

            if (stdoutReporters.length > 1) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.multipleStdoutReporters, stdoutReporters.map(function (r) {
                return r.name;
            }).join(', '));

            if (!_this4.reporters.length) Bootstrapper._addDefaultReporter(_this4.reporters);

            return _pinkie2.default.all(_this4.reporters.map((() => {
                var _ref = (0, _asyncToGenerator3.default)(function* ({ name, output }) {
                    let pluginFactory = name;
                    let pluginName = null;

                    const outStream = yield _this4._ensureOutStream(output);

                    if (typeof pluginFactory !== 'function') {
                        try {
                            pluginFactory = require('testcafe-reporter-' + name);
                            pluginName = name;
                        } catch (err) {
                            throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotFindReporterForAlias, name);
                        }
                    }

                    const plugin = pluginFactory();

                    plugin.name = pluginName;

                    return {
                        plugin,
                        outStream
                    };
                });

                return function (_x) {
                    return _ref.apply(this, arguments);
                };
            })()));
        })();
    }

    _startTestedApp() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this5.appCommand) {
                const testedApp = new _testedApp2.default();

                yield testedApp.start(_this5.appCommand, _this5.appInitDelay);

                return testedApp;
            }

            return null;
        })();
    }

    _canUseParallelBootstrapping(browserInfo) {
        return (0, _asyncToGenerator3.default)(function* () {
            const isLocalPromises = browserInfo.map(function (browser) {
                return browser.provider.isLocalBrowser(null, browserInfo.browserName);
            });
            const isLocalBrowsers = yield _pinkie2.default.all(isLocalPromises);

            return isLocalBrowsers.every(function (result) {
                return result;
            });
        })();
    }

    _bootstrapSequence(browserInfo) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const tests = yield _this6._getTests();
            const testedApp = yield _this6._startTestedApp();
            const browserSet = yield _this6._getBrowserConnections(browserInfo);

            return { tests, testedApp, browserSet };
        })();
    }

    _wrapBootstrappingPromise(promise) {
        return promise.then(result => ({ error: null, result })).catch(error => ({ result: null, error }));
    }

    _handleBootstrappingError([browserSetStatus, testsStatus, testedAppStatus]) {
        return (0, _asyncToGenerator3.default)(function* () {
            if (!browserSetStatus.error) yield browserSetStatus.result.dispose();

            if (!testedAppStatus.error && testedAppStatus.result) yield testedAppStatus.result.kill();

            if (testsStatus.error) throw testsStatus.error;else if (testedAppStatus.error) throw testedAppStatus.error;else throw browserSetStatus.error;
        })();
    }

    _bootstrapParallel(browserInfo) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            let bootstrappingPromises = [_this7._getBrowserConnections(browserInfo), _this7._getTests(), _this7._startTestedApp()];

            bootstrappingPromises = bootstrappingPromises.map(function (promise) {
                return _this7._wrapBootstrappingPromise(promise);
            });

            const bootstrappingStatuses = yield _pinkie2.default.all(bootstrappingPromises);

            if (bootstrappingStatuses.some(function (status) {
                return status.error;
            })) yield _this7._handleBootstrappingError(bootstrappingStatuses);

            var _bootstrappingStatuse = bootstrappingStatuses.map(function (status) {
                return status.result;
            });

            const browserSet = _bootstrappingStatuse[0],
                  tests = _bootstrappingStatuse[1],
                  testedApp = _bootstrappingStatuse[2];


            return { browserSet, tests, testedApp };
        })();
    }

    // API
    createRunnableConfiguration() {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const reporterPlugins = yield _this8._getReporterPlugins();

            // NOTE: If a user forgot to specify a browser, but has specified a path to tests, the specified path will be
            // considered as the browser argument, and the tests path argument will have the predefined default value.
            // It's very ambiguous for the user, who might be confused by compilation errors from an unexpected test.
            // So, we need to retrieve the browser aliases and paths before tests compilation.
            const browserInfo = yield _this8._getBrowserInfo();

            if (yield _this8._canUseParallelBootstrapping(browserInfo)) return (0, _extends3.default)({ reporterPlugins }, (yield _this8._bootstrapParallel(browserInfo)));

            return (0, _extends3.default)({ reporterPlugins }, (yield _this8._bootstrapSequence(browserInfo)));
        })();
    }
}
exports.default = Bootstrapper;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
