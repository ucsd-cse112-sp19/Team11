"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const pinkie_1 = __importDefault(require("pinkie"));
const time_limit_promise_1 = __importDefault(require("time-limit-promise"));
const promisify_event_1 = __importDefault(require("promisify-event"));
const lodash_1 = require("lodash");
const map_reverse_1 = __importDefault(require("map-reverse"));
const runtime_1 = require("../errors/runtime");
const types_1 = require("../errors/types");
const LOCAL_BROWSERS_READY_TIMEOUT = 2 * 60 * 1000;
const REMOTE_BROWSERS_READY_TIMEOUT = 6 * 60 * 1000;
class BrowserSet extends events_1.EventEmitter {
    constructor(browserConnectionGroups) {
        super();
        this.RELEASE_TIMEOUT = 10000;
        this.pendingReleases = [];
        this.browserConnectionGroups = browserConnectionGroups;
        this.browserConnections = lodash_1.flatten(browserConnectionGroups);
        this.connectionsReadyTimeout = null;
        this.browserErrorHandler = error => this.emit('error', error);
        this.browserConnections.forEach(bc => bc.on('error', this.browserErrorHandler));
        // NOTE: We're setting an empty error handler, because Node kills the process on an 'error' event
        // if there is no handler. See: https://nodejs.org/api/events.html#events_class_events_eventemitter
        this.on('error', lodash_1.noop);
    }
    static async _waitIdle(bc) {
        if (bc.idle || !bc.ready)
            return;
        await promisify_event_1.default(bc, 'idle');
    }
    static async _closeConnection(bc) {
        if (bc.closed || !bc.ready)
            return;
        bc.close();
        await promisify_event_1.default(bc, 'closed');
    }
    async _getReadyTimeout() {
        const isLocalBrowser = connection => connection.provider.isLocalBrowser(connection.id, connection.browserInfo.browserName);
        const remoteBrowsersExist = (await pinkie_1.default.all(this.browserConnections.map(isLocalBrowser))).indexOf(false) > -1;
        return remoteBrowsersExist ? REMOTE_BROWSERS_READY_TIMEOUT : LOCAL_BROWSERS_READY_TIMEOUT;
    }
    _createPendingConnectionPromise(readyPromise, timeout, timeoutError) {
        const timeoutPromise = new pinkie_1.default((_, reject) => {
            this.connectionsReadyTimeout = setTimeout(() => reject(timeoutError), timeout);
        });
        return pinkie_1.default
            .race([readyPromise, timeoutPromise])
            .then(value => {
            this.connectionsReadyTimeout.unref();
            return value;
        }, error => {
            this.connectionsReadyTimeout.unref();
            throw error;
        });
    }
    async _waitConnectionsOpened() {
        const connectionsReadyPromise = pinkie_1.default.all(this.browserConnections
            .filter(bc => !bc.opened)
            .map(bc => promisify_event_1.default(bc, 'opened')));
        const timeoutError = new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotEstablishBrowserConnection);
        const readyTimeout = await this._getReadyTimeout();
        await this._createPendingConnectionPromise(connectionsReadyPromise, readyTimeout, timeoutError);
    }
    _checkForDisconnections() {
        const disconnectedUserAgents = this.browserConnections
            .filter(bc => bc.closed)
            .map(bc => bc.userAgent);
        if (disconnectedUserAgents.length)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.cannotRunAgainstDisconnectedBrowsers, disconnectedUserAgents.join(', '));
    }
    //API
    static from(browserConnections) {
        const browserSet = new BrowserSet(browserConnections);
        const prepareConnection = pinkie_1.default.resolve()
            .then(() => {
            browserSet._checkForDisconnections();
            return browserSet._waitConnectionsOpened();
        })
            .then(() => browserSet);
        return pinkie_1.default
            .race([
            prepareConnection,
            promisify_event_1.default(browserSet, 'error')
        ])
            .catch(async (error) => {
            await browserSet.dispose();
            throw error;
        });
    }
    releaseConnection(bc) {
        if (this.browserConnections.indexOf(bc) < 0)
            return pinkie_1.default.resolve();
        lodash_1.pull(this.browserConnections, bc);
        bc.removeListener('error', this.browserErrorHandler);
        const appropriateStateSwitch = !bc.permanent ?
            BrowserSet._closeConnection(bc) :
            BrowserSet._waitIdle(bc);
        const release = time_limit_promise_1.default(appropriateStateSwitch, this.RELEASE_TIMEOUT).then(() => lodash_1.pull(this.pendingReleases, release));
        this.pendingReleases.push(release);
        return release;
    }
    async dispose() {
        // NOTE: When browserConnection is cancelled, it is removed from
        // the this.connections array, which leads to shifting indexes
        // towards the beginning. So, we must copy the array in order to iterate it,
        // or we can perform iteration from the end to the beginning.
        if (this.connectionsReadyTimeout)
            this.connectionsReadyTimeout.unref();
        map_reverse_1.default(this.browserConnections, bc => this.releaseConnection(bc));
        await pinkie_1.default.all(this.pendingReleases);
    }
}
exports.default = BrowserSet;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,