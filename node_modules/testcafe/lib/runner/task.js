'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _asyncEventEmitter = require('../utils/async-event-emitter');

var _asyncEventEmitter2 = _interopRequireDefault(_asyncEventEmitter);

var _browserJob = require('./browser-job');

var _browserJob2 = _interopRequireDefault(_browserJob);

var _screenshots = require('../screenshots');

var _screenshots2 = _interopRequireDefault(_screenshots);

var _videoRecorder = require('../video-recorder');

var _videoRecorder2 = _interopRequireDefault(_videoRecorder);

var _warningLog = require('../notifications/warning-log');

var _warningLog2 = _interopRequireDefault(_warningLog);

var _fixtureHookController = require('./fixture-hook-controller');

var _fixtureHookController2 = _interopRequireDefault(_fixtureHookController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Task extends _asyncEventEmitter2.default {
    constructor(tests, browserConnectionGroups, proxy, opts) {
        super();

        this.timeStamp = (0, _moment2.default)();
        this.running = false;
        this.browserConnectionGroups = browserConnectionGroups;
        this.tests = tests;
        this.opts = opts;
        this.screenshots = new _screenshots2.default(this.opts.screenshotPath, this.opts.screenshotPathPattern);
        this.warningLog = new _warningLog2.default();

        this.fixtureHookController = new _fixtureHookController2.default(tests, browserConnectionGroups.length);
        this.pendingBrowserJobs = this._createBrowserJobs(proxy, this.opts);

        if (this.opts.videoPath) this.videoRecorders = this._createVideoRecorders(this.pendingBrowserJobs);
    }

    _assignBrowserJobEventHandlers(job) {
        var _this = this;

        job.on('test-run-start', testRun => this.emit('test-run-start', testRun));

        job.on('test-run-done', (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (testRun) {
                yield _this.emit('test-run-done', testRun);

                if (_this.opts.stopOnFirstFail && testRun.errs.length) {
                    _this.abort();
                    yield _this.emit('done');
                }
            });

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        })());

        job.once('start', (0, _asyncToGenerator3.default)(function* () {
            if (!_this.running) {
                _this.running = true;
                yield _this.emit('start');
            }
        }));

        job.once('done', (0, _asyncToGenerator3.default)(function* () {
            yield _this.emit('browser-job-done', job);

            (0, _lodash.pull)(_this.pendingBrowserJobs, job);

            if (!_this.pendingBrowserJobs.length) yield _this.emit('done');
        }));
    }

    _createBrowserJobs(proxy, opts) {
        return this.browserConnectionGroups.map(browserConnectionGroup => {
            const job = new _browserJob2.default(this.tests, browserConnectionGroup, proxy, this.screenshots, this.warningLog, this.fixtureHookController, opts);

            this._assignBrowserJobEventHandlers(job);
            browserConnectionGroup.map(bc => bc.addJob(job));

            return job;
        });
    }

    _createVideoRecorders(browserJobs) {
        const videoOptions = (0, _extends3.default)({ timeStamp: this.timeStamp }, this.opts.videoOptions);

        return browserJobs.map(browserJob => new _videoRecorder2.default(browserJob, this.opts.videoPath, videoOptions, this.opts.videoEncodingOptions, this.warningLog));
    }

    // API
    abort() {
        this.pendingBrowserJobs.forEach(job => job.abort());
    }
}
exports.default = Task;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW5uZXIvdGFzay5qcyJdLCJuYW1lcyI6WyJUYXNrIiwiQXN5bmNFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsInRlc3RzIiwiYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMiLCJwcm94eSIsIm9wdHMiLCJ0aW1lU3RhbXAiLCJydW5uaW5nIiwic2NyZWVuc2hvdHMiLCJTY3JlZW5zaG90cyIsInNjcmVlbnNob3RQYXRoIiwic2NyZWVuc2hvdFBhdGhQYXR0ZXJuIiwid2FybmluZ0xvZyIsIldhcm5pbmdMb2ciLCJmaXh0dXJlSG9va0NvbnRyb2xsZXIiLCJGaXh0dXJlSG9va0NvbnRyb2xsZXIiLCJsZW5ndGgiLCJwZW5kaW5nQnJvd3NlckpvYnMiLCJfY3JlYXRlQnJvd3NlckpvYnMiLCJ2aWRlb1BhdGgiLCJ2aWRlb1JlY29yZGVycyIsIl9jcmVhdGVWaWRlb1JlY29yZGVycyIsIl9hc3NpZ25Ccm93c2VySm9iRXZlbnRIYW5kbGVycyIsImpvYiIsIm9uIiwidGVzdFJ1biIsImVtaXQiLCJzdG9wT25GaXJzdEZhaWwiLCJlcnJzIiwiYWJvcnQiLCJvbmNlIiwibWFwIiwiYnJvd3NlckNvbm5lY3Rpb25Hcm91cCIsIkJyb3dzZXJKb2IiLCJiYyIsImFkZEpvYiIsImJyb3dzZXJKb2JzIiwidmlkZW9PcHRpb25zIiwiYnJvd3NlckpvYiIsIlZpZGVvUmVjb3JkZXIiLCJ2aWRlb0VuY29kaW5nT3B0aW9ucyIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxJQUFOLFNBQW1CQywyQkFBbkIsQ0FBcUM7QUFDaERDLGdCQUFhQyxLQUFiLEVBQW9CQyx1QkFBcEIsRUFBNkNDLEtBQTdDLEVBQW9EQyxJQUFwRCxFQUEwRDtBQUN0RDs7QUFFQSxhQUFLQyxTQUFMLEdBQStCLHVCQUEvQjtBQUNB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QUFLakMsSUFBTCxDQUFVYyxTQUF4QyxFQUFtRGtCLFlBQW5ELEVBQWlFLEtBQUtoQyxJQUFMLENBQVVtQyxvQkFBM0UsRUFBaUcsS0FBSzVCLFVBQXRHLENBQTlCLENBQVA7QUFDSDs7QUFFRDtBQUNBaUIsWUFBUztBQUNMLGFBQUtaLGtCQUFMLENBQXdCd0IsT0FBeEIsQ0FBZ0NsQixPQUFPQSxJQUFJTSxLQUFKLEVBQXZDO0FBQ0g7QUFwRStDO2tCQUEvQjlCLEkiLCJmaWxlIjoicnVubmVyL3Rhc2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdWxsIGFzIHJlbW92ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgQXN5bmNFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdXRpbHMvYXN5bmMtZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgQnJvd3NlckpvYiBmcm9tICcuL2Jyb3dzZXItam9iJztcbmltcG9ydCBTY3JlZW5zaG90cyBmcm9tICcuLi9zY3JlZW5zaG90cyc7XG5pbXBvcnQgVmlkZW9SZWNvcmRlciBmcm9tICcuLi92aWRlby1yZWNvcmRlcic7XG5pbXBvcnQgV2FybmluZ0xvZyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbG9nJztcbmltcG9ydCBGaXh0dXJlSG9va0NvbnRyb2xsZXIgZnJvbSAnLi9maXh0dXJlLWhvb2stY29udHJvbGxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sgZXh0ZW5kcyBBc3luY0V2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IgKHRlc3RzLCBicm93c2VyQ29ubmVjdGlvbkdyb3VwcywgcHJveHksIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnRpbWVTdGFtcCAgICAgICAgICAgICAgID0gbW9tZW50KCk7XG4gICAgICAgIHRoaXMucnVubmluZyAgICAgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5icm93c2VyQ29ubmVjdGlvbkdyb3VwcyA9IGJyb3dzZXJDb25uZWN0aW9uR3JvdXBzO1xuICAgICAgICB0aGlzLnRlc3RzICAgICAgICAgICAgICAgICAgID0gdGVzdHM7XG4gICAgICAgIHRoaXMub3B0cyAgICAgICAgICAgICAgICAgICAgPSBvcHRzO1xuICAgICAgICB0aGlzLnNjcmVlbnNob3RzICAgICAgICAgICAgID0gbmV3IFNjcmVlbnNob3RzKHRoaXMub3B0cy5zY3JlZW5zaG90UGF0aCwgdGhpcy5vcHRzLnNjcmVlbnNob3RQYXRoUGF0dGVybik7XG4gICAgICAgIHRoaXMud2FybmluZ0xvZyAgICAgICAgICAgICAgPSBuZXcgV2FybmluZ0xvZygpO1xuXG4gICAgICAgIHRoaXMuZml4dHVyZUhvb2tDb250cm9sbGVyID0gbmV3IEZpeHR1cmVIb29rQ29udHJvbGxlcih0ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnJvd3NlckpvYnMgICAgPSB0aGlzLl9jcmVhdGVCcm93c2VySm9icyhwcm94eSwgdGhpcy5vcHRzKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRzLnZpZGVvUGF0aClcbiAgICAgICAgICAgIHRoaXMudmlkZW9SZWNvcmRlcnMgPSB0aGlzLl9jcmVhdGVWaWRlb1JlY29yZGVycyh0aGlzLnBlbmRpbmdCcm93c2VySm9icyk7XG4gICAgfVxuXG4gICAgX2Fzc2lnbkJyb3dzZXJKb2JFdmVudEhhbmRsZXJzIChqb2IpIHtcbiAgICAgICAgam9iLm9uKCd0ZXN0LXJ1bi1zdGFydCcsIHRlc3RSdW4gPT4gdGhpcy5lbWl0KCd0ZXN0LXJ1bi1zdGFydCcsIHRlc3RSdW4pKTtcblxuICAgICAgICBqb2Iub24oJ3Rlc3QtcnVuLWRvbmUnLCBhc3luYyB0ZXN0UnVuID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgndGVzdC1ydW4tZG9uZScsIHRlc3RSdW4pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnN0b3BPbkZpcnN0RmFpbCAmJiB0ZXN0UnVuLmVycnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgnZG9uZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBqb2Iub25jZSgnc3RhcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucnVubmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbWl0KCdzdGFydCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBqb2Iub25jZSgnZG9uZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgnYnJvd3Nlci1qb2ItZG9uZScsIGpvYik7XG5cbiAgICAgICAgICAgIHJlbW92ZSh0aGlzLnBlbmRpbmdCcm93c2VySm9icywgam9iKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdCcm93c2VySm9icy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbWl0KCdkb25lJyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jcmVhdGVCcm93c2VySm9icyAocHJveHksIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMubWFwKGJyb3dzZXJDb25uZWN0aW9uR3JvdXAgPT4ge1xuICAgICAgICAgICAgY29uc3Qgam9iID0gbmV3IEJyb3dzZXJKb2IodGhpcy50ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cCwgcHJveHksIHRoaXMuc2NyZWVuc2hvdHMsIHRoaXMud2FybmluZ0xvZywgdGhpcy5maXh0dXJlSG9va0NvbnRyb2xsZXIsIG9wdHMpO1xuXG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Ccm93c2VySm9iRXZlbnRIYW5kbGVycyhqb2IpO1xuICAgICAgICAgICAgYnJvd3NlckNvbm5lY3Rpb25Hcm91cC5tYXAoYmMgPT4gYmMuYWRkSm9iKGpvYikpO1xuXG4gICAgICAgICAgICByZXR1cm4gam9iO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlVmlkZW9SZWNvcmRlcnMgKGJyb3dzZXJKb2JzKSB7XG4gICAgICAgIGNvbnN0IHZpZGVvT3B0aW9ucyA9IHsgdGltZVN0YW1wOiB0aGlzLnRpbWVTdGFtcCwgLi4udGhpcy5vcHRzLnZpZGVvT3B0aW9ucyB9O1xuXG4gICAgICAgIHJldHVybiBicm93c2VySm9icy5tYXAoYnJvd3NlckpvYiA9PiBuZXcgVmlkZW9SZWNvcmRlcihicm93c2VySm9iLCB0aGlzLm9wdHMudmlkZW9QYXRoLCB2aWRlb09wdGlvbnMsIHRoaXMub3B0cy52aWRlb0VuY29kaW5nT3B0aW9ucywgdGhpcy53YXJuaW5nTG9nKSk7XG4gICAgfVxuXG4gICAgLy8gQVBJXG4gICAgYWJvcnQgKCkge1xuICAgICAgICB0aGlzLnBlbmRpbmdCcm93c2VySm9icy5mb3JFYWNoKGpvYiA9PiBqb2IuYWJvcnQoKSk7XG4gICAgfVxufVxuIl19
