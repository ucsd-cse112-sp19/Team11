'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _asyncEventEmitter = require('../utils/async-event-emitter');

var _asyncEventEmitter2 = _interopRequireDefault(_asyncEventEmitter);

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testRun = require('../test-run');

var _testRun2 = _interopRequireDefault(_testRun);

var _sessionController = require('../test-run/session-controller');

var _sessionController2 = _interopRequireDefault(_sessionController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const QUARANTINE_THRESHOLD = 3;
const DISCONNECT_THRESHOLD = 3;

class Quarantine {
    constructor() {
        this.attempts = [];
    }

    getFailedAttempts() {
        return this.attempts.filter(errors => !!errors.length);
    }

    getPassedAttempts() {
        return this.attempts.filter(errors => errors.length === 0);
    }

    getNextAttemptNumber() {
        return this.attempts.length + 1;
    }

    isThresholdReached(extraErrors) {
        var _getAttemptsResult = this._getAttemptsResult(extraErrors);

        const failedTimes = _getAttemptsResult.failedTimes,
              passedTimes = _getAttemptsResult.passedTimes;


        const failedThresholdReached = failedTimes >= QUARANTINE_THRESHOLD;
        const passedThresholdReached = passedTimes >= QUARANTINE_THRESHOLD;

        return failedThresholdReached || passedThresholdReached;
    }

    _getAttemptsResult(extraErrors) {
        let failedTimes = this.getFailedAttempts().length;
        let passedTimes = this.getPassedAttempts().length;

        if (extraErrors) {
            if (extraErrors.length) failedTimes += extraErrors.length;else passedTimes += 1;
        }

        return { failedTimes, passedTimes };
    }
}

class TestRunController extends _asyncEventEmitter2.default {
    constructor(test, index, proxy, screenshots, warningLog, fixtureHookController, opts) {
        super();

        this.test = test;
        this.index = index;
        this.opts = opts;

        this.proxy = proxy;
        this.screenshots = screenshots;
        this.warningLog = warningLog;
        this.fixtureHookController = fixtureHookController;

        this.TestRunCtor = TestRunController._getTestRunCtor(test, opts);

        this.testRun = null;
        this.done = false;
        this.quarantine = null;
        this.disconnectionCount = 0;

        if (this.opts.quarantineMode) this.quarantine = new Quarantine();
    }

    static _getTestRunCtor(test, opts) {
        if (opts.TestRunCtor) return opts.TestRunCtor;

        return test.isLegacy ? _testcafeLegacyApi.TestRun : _testRun2.default;
    }

    _createTestRun(connection) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const screenshotCapturer = _this.screenshots.createCapturerFor(_this.test, _this.index, _this.quarantine, connection, _this.warningLog);
            const TestRunCtor = _this.TestRunCtor;

            _this.testRun = new TestRunCtor(_this.test, connection, screenshotCapturer, _this.warningLog, _this.opts);

            if (_this.testRun.addQuarantineInfo) _this.testRun.addQuarantineInfo(_this.quarantine);

            if (!_this.quarantine || _this._isFirstQuarantineAttempt()) {
                yield _this.emit('test-run-create', {
                    testRun: _this.testRun,
                    legacy: TestRunCtor === _testcafeLegacyApi.TestRun,
                    test: _this.test,
                    index: _this.index,
                    quarantine: _this.quarantine
                });
            }

            return _this.testRun;
        })();
    }

    _endQuarantine() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this2.quarantine.attempts.length > 1) _this2.testRun.unstable = _this2.quarantine.getPassedAttempts().length > 0;

            yield _this2._emitTestRunDone();
        })();
    }

    _shouldKeepInQuarantine() {
        const errors = this.testRun.errs;
        const hasErrors = !!errors.length;
        const attempts = this.quarantine.attempts;
        const isFirstAttempt = this._isFirstQuarantineAttempt();

        attempts.push(errors);

        return isFirstAttempt ? hasErrors : !this.quarantine.isThresholdReached();
    }

    _isFirstQuarantineAttempt() {
        return this.quarantine && !this.quarantine.attempts.length;
    }

    _keepInQuarantine() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this3._restartTest();
        })();
    }

    _restartTest() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this4.emit('test-run-restart');
        })();
    }

    _testRunDoneInQuarantineMode() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this5._shouldKeepInQuarantine()) yield _this5._keepInQuarantine();else yield _this5._endQuarantine();
        })();
    }

    _testRunDone() {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this6.quarantine) yield _this6._testRunDoneInQuarantineMode();else yield _this6._emitTestRunDone();
        })();
    }

    _emitTestRunDone() {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // NOTE: we should report test run completion in order they were completed in browser.
            // To keep a sequence after fixture hook execution we use completion queue.
            yield _this7.fixtureHookController.runFixtureAfterHookIfNecessary(_this7.testRun);

            _this7.done = true;

            yield _this7.emit('test-run-done');
        })();
    }

    _testRunBeforeDone() {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            let raiseEvent = !_this8.quarantine;

            if (!raiseEvent) {
                const isSuccessfulQuarantineFirstAttempt = _this8._isFirstQuarantineAttempt() && !_this8.testRun.errs.length;
                const isAttemptsThresholdReached = _this8.quarantine.isThresholdReached(_this8.testRun.errs);

                raiseEvent = isSuccessfulQuarantineFirstAttempt || isAttemptsThresholdReached;
            }

            if (raiseEvent) yield _this8.emit('test-run-before-done');
        })();
    }

    _testRunDisconnected(connection) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this9.disconnectionCount++;

            if (_this9.disconnectionCount < DISCONNECT_THRESHOLD) {
                connection.suppressError();

                yield connection.restartBrowser();

                yield _this9._restartTest();
            }
        })();
    }

    get blocked() {
        return this.fixtureHookController.isTestBlocked(this.test);
    }

    start(connection) {
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testRun = yield _this10._createTestRun(connection);

            const hookOk = yield _this10.fixtureHookController.runFixtureBeforeHookIfNecessary(testRun);

            if (_this10.test.skip || !hookOk) {
                yield _this10.emit('test-run-start');
                yield _this10._emitTestRunDone();
                return null;
            }

            testRun.once('start', function () {
                return _this10.emit('test-run-start');
            });
            testRun.once('ready', function () {
                if (!_this10.quarantine || _this10._isFirstQuarantineAttempt()) _this10.emit('test-run-ready');
            });
            testRun.once('before-done', function () {
                return _this10._testRunBeforeDone();
            });
            testRun.once('done', function () {
                return _this10._testRunDone();
            });
            testRun.once('disconnected', function () {
                return _this10._testRunDisconnected(connection);
            });

            testRun.start();

            return _sessionController2.default.getSessionUrl(testRun, _this10.proxy);
        })();
    }
}
exports.default = TestRunController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW5uZXIvdGVzdC1ydW4tY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJRVUFSQU5USU5FX1RIUkVTSE9MRCIsIkRJU0NPTk5FQ1RfVEhSRVNIT0xEIiwiUXVhcmFudGluZSIsImNvbnN0cnVjdG9yIiwiYXR0ZW1wdHMiLCJnZXRGYWlsZWRBdHRlbXB0cyIsImZpbHRlciIsImVycm9ycyIsImxlbmd0aCIsImdldFBhc3NlZEF0dGVtcHRzIiwiZ2V0TmV4dEF0dGVtcHROdW1iZXIiLCJpc1RocmVzaG9sZFJlYWNoZWQiLCJleHRyYUVycm9ycyIsIl9nZXRBdHRlbXB0c1Jlc3VsdCIsImZhaWxlZFRpbWVzIiwicGFzc2VkVGltZXMiLCJmYWlsZWRUaHJlc2hvbGRSZWFjaGVkIiwicGFzc2VkVGhyZXNob2xkUmVhY2hlZCIsIlRlc3RSdW5Db250cm9sbGVyIiwiQXN5bmNFdmVudEVtaXR0ZXIiLCJ0ZXN0IiwiaW5kZXgiLCJwcm94eSIsInNjcmVlbnNob3RzIiwid2FybmluZ0xvZyIsImZpeHR1cmVIb29rQ29udHJvbGxlciIsIm9wdHMiLCJUZXN0UnVuQ3RvciIsIl9nZXRUZXN0UnVuQ3RvciIsInRlc3RSdW4iLCJkb25lIiwicXVhcmFudGluZSIsImRpc2Nvbm5lY3Rpb25Db3VudCIsInF1YXJhbnRpbmVNb2RlIiwiaXNMZWdhY3kiLCJMZWdhY3lUZXN0UnVuIiwiVGVzdFJ1biIsIl9jcmVhdGVUZXN0UnVuIiwiY29ubmVjdGlvbiIsInNjcmVlbnNob3RDYXB0dXJlciIsImNyZWF0ZUNhcHR1cmVyRm9yIiwiYWRkUXVhcmFudGluZUluZm8iLCJfaXNGaXJzdFF1YXJhbnRpbmVBdHRlbXB0IiwiZW1pdCIsImxlZ2FjeSIsIl9lbmRRdWFyYW50aW5lIiwidW5zdGFibGUiLCJfZW1pdFRlc3RSdW5Eb25lIiwiX3Nob3VsZEtlZXBJblF1YXJhbnRpbmUiLCJlcnJzIiwiaGFzRXJyb3JzIiwiaXNGaXJzdEF0dGVtcHQiLCJwdXNoIiwiX2tlZXBJblF1YXJhbnRpbmUiLCJfcmVzdGFydFRlc3QiLCJfdGVzdFJ1bkRvbmVJblF1YXJhbnRpbmVNb2RlIiwiX3Rlc3RSdW5Eb25lIiwicnVuRml4dHVyZUFmdGVySG9va0lmTmVjZXNzYXJ5IiwiX3Rlc3RSdW5CZWZvcmVEb25lIiwicmFpc2VFdmVudCIsImlzU3VjY2Vzc2Z1bFF1YXJhbnRpbmVGaXJzdEF0dGVtcHQiLCJpc0F0dGVtcHRzVGhyZXNob2xkUmVhY2hlZCIsIl90ZXN0UnVuRGlzY29ubmVjdGVkIiwic3VwcHJlc3NFcnJvciIsInJlc3RhcnRCcm93c2VyIiwiYmxvY2tlZCIsImlzVGVzdEJsb2NrZWQiLCJzdGFydCIsImhvb2tPayIsInJ1bkZpeHR1cmVCZWZvcmVIb29rSWZOZWNlc3NhcnkiLCJza2lwIiwib25jZSIsIlNlc3Npb25Db250cm9sbGVyIiwiZ2V0U2Vzc2lvblVybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLHVCQUF1QixDQUE3QjtBQUNBLE1BQU1DLHVCQUF1QixDQUE3Qjs7QUFFQSxNQUFNQyxVQUFOLENBQWlCO0FBQ2JDLGtCQUFlO0FBQ1gsYUFBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNIOztBQUVEQyx3QkFBcUI7QUFDakIsZUFBTyxLQUFLRCxRQUFMLENBQWNFLE1BQWQsQ0FBcUJDLFVBQVUsQ0FBQyxDQUFDQSxPQUFPQyxNQUF4QyxDQUFQO0FBQ0g7O0FBRURDLHdCQUFxQjtBQUNqQixlQUFPLEtBQUtMLFFBQUwsQ0FBY0UsTUFBZCxDQUFxQkMsVUFBVUEsT0FBT0MsTUFBUCxLQUFrQixDQUFqRCxDQUFQO0FBQ0g7O0FBRURFLDJCQUF3QjtBQUNwQixlQUFPLEtBQUtOLFFBQUwsQ0FBY0ksTUFBZCxHQUF1QixDQUE5QjtBQUNIOztBQUVERyx1QkFBb0JDLFdBQXBCLEVBQWlDO0FBQUEsaUNBQ1EsS0FBS0Msa0JBQUwsQ0FBd0JELFdBQXhCLENBRFI7O0FBQUEsY0FDckJFLFdBRHFCLHNCQUNy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QWtCQyxhQUFsQixDQUFnQzVDLE9BQWhDLEVBQXlDLFFBQUtQLEtBQTlDLENBQVA7QUF0QnFCO0FBdUJ4QjtBQWhLNEQ7a0JBQTVDSixpQiIsImZpbGUiOiJydW5uZXIvdGVzdC1ydW4tY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3luY0V2ZW50RW1pdHRlciBmcm9tICcuLi91dGlscy9hc3luYy1ldmVudC1lbWl0dGVyJztcbmltcG9ydCB7IFRlc3RSdW4gYXMgTGVnYWN5VGVzdFJ1biB9IGZyb20gJ3Rlc3RjYWZlLWxlZ2FjeS1hcGknO1xuaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vdGVzdC1ydW4nO1xuaW1wb3J0IFNlc3Npb25Db250cm9sbGVyIGZyb20gJy4uL3Rlc3QtcnVuL3Nlc3Npb24tY29udHJvbGxlcic7XG5cbmNvbnN0IFFVQVJBTlRJTkVfVEhSRVNIT0xEID0gMztcbmNvbnN0IERJU0NPTk5FQ1RfVEhSRVNIT0xEID0gMztcblxuY2xhc3MgUXVhcmFudGluZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLmF0dGVtcHRzID0gW107XG4gICAgfVxuXG4gICAgZ2V0RmFpbGVkQXR0ZW1wdHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRlbXB0cy5maWx0ZXIoZXJyb3JzID0+ICEhZXJyb3JzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgZ2V0UGFzc2VkQXR0ZW1wdHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRlbXB0cy5maWx0ZXIoZXJyb3JzID0+IGVycm9ycy5sZW5ndGggPT09IDApO1xuICAgIH1cblxuICAgIGdldE5leHRBdHRlbXB0TnVtYmVyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0ZW1wdHMubGVuZ3RoICsgMTtcbiAgICB9XG5cbiAgICBpc1RocmVzaG9sZFJlYWNoZWQgKGV4dHJhRXJyb3JzKSB7XG4gICAgICAgIGNvbnN0IHsgZmFpbGVkVGltZXMsIHBhc3NlZFRpbWVzIH0gPSB0aGlzLl9nZXRBdHRlbXB0c1Jlc3VsdChleHRyYUVycm9ycyk7XG5cbiAgICAgICAgY29uc3QgZmFpbGVkVGhyZXNob2xkUmVhY2hlZCA9IGZhaWxlZFRpbWVzID49IFFVQVJBTlRJTkVfVEhSRVNIT0xEO1xuICAgICAgICBjb25zdCBwYXNzZWRUaHJlc2hvbGRSZWFjaGVkID0gcGFzc2VkVGltZXMgPj0gUVVBUkFOVElORV9USFJFU0hPTEQ7XG5cbiAgICAgICAgcmV0dXJuIGZhaWxlZFRocmVzaG9sZFJlYWNoZWQgfHwgcGFzc2VkVGhyZXNob2xkUmVhY2hlZDtcbiAgICB9XG5cbiAgICBfZ2V0QXR0ZW1wdHNSZXN1bHQgKGV4dHJhRXJyb3JzKSB7XG4gICAgICAgIGxldCBmYWlsZWRUaW1lcyA9IHRoaXMuZ2V0RmFpbGVkQXR0ZW1wdHMoKS5sZW5ndGg7XG4gICAgICAgIGxldCBwYXNzZWRUaW1lcyA9IHRoaXMuZ2V0UGFzc2VkQXR0ZW1wdHMoKS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGV4dHJhRXJyb3JzKSB7XG4gICAgICAgICAgICBpZiAoZXh0cmFFcnJvcnMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZhaWxlZFRpbWVzICs9IGV4dHJhRXJyb3JzLmxlbmd0aDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwYXNzZWRUaW1lcyArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgZmFpbGVkVGltZXMsIHBhc3NlZFRpbWVzIH07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0UnVuQ29udHJvbGxlciBleHRlbmRzIEFzeW5jRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvciAodGVzdCwgaW5kZXgsIHByb3h5LCBzY3JlZW5zaG90cywgd2FybmluZ0xvZywgZml4dHVyZUhvb2tDb250cm9sbGVyLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy50ZXN0ICA9IHRlc3Q7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5vcHRzICA9IG9wdHM7XG5cbiAgICAgICAgdGhpcy5wcm94eSAgICAgICAgICAgICAgICAgPSBwcm94eTtcbiAgICAgICAgdGhpcy5zY3JlZW5zaG90cyAgICAgICAgICAgPSBzY3JlZW5zaG90cztcbiAgICAgICAgdGhpcy53YXJuaW5nTG9nICAgICAgICAgICAgPSB3YXJuaW5nTG9nO1xuICAgICAgICB0aGlzLmZpeHR1cmVIb29rQ29udHJvbGxlciA9IGZpeHR1cmVIb29rQ29udHJvbGxlcjtcblxuICAgICAgICB0aGlzLlRlc3RSdW5DdG9yID0gVGVzdFJ1bkNvbnRyb2xsZXIuX2dldFRlc3RSdW5DdG9yKHRlc3QsIG9wdHMpO1xuXG4gICAgICAgIHRoaXMudGVzdFJ1biAgICAgICAgICAgID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb25lICAgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5xdWFyYW50aW5lICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3Rpb25Db3VudCA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0cy5xdWFyYW50aW5lTW9kZSlcbiAgICAgICAgICAgIHRoaXMucXVhcmFudGluZSA9IG5ldyBRdWFyYW50aW5lKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9nZXRUZXN0UnVuQ3RvciAodGVzdCwgb3B0cykge1xuICAgICAgICBpZiAob3B0cy5UZXN0UnVuQ3RvcilcbiAgICAgICAgICAgIHJldHVybiBvcHRzLlRlc3RSdW5DdG9yO1xuXG4gICAgICAgIHJldHVybiB0ZXN0LmlzTGVnYWN5ID8gTGVnYWN5VGVzdFJ1biA6IFRlc3RSdW47XG4gICAgfVxuXG4gICAgYXN5bmMgX2NyZWF0ZVRlc3RSdW4gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgc2NyZWVuc2hvdENhcHR1cmVyID0gdGhpcy5zY3JlZW5zaG90cy5jcmVhdGVDYXB0dXJlckZvcih0aGlzLnRlc3QsIHRoaXMuaW5kZXgsIHRoaXMucXVhcmFudGluZSwgY29ubmVjdGlvbiwgdGhpcy53YXJuaW5nTG9nKTtcbiAgICAgICAgY29uc3QgVGVzdFJ1bkN0b3IgICAgICAgID0gdGhpcy5UZXN0UnVuQ3RvcjtcblxuICAgICAgICB0aGlzLnRlc3RSdW4gPSBuZXcgVGVzdFJ1bkN0b3IodGhpcy50ZXN0LCBjb25uZWN0aW9uLCBzY3JlZW5zaG90Q2FwdHVyZXIsIHRoaXMud2FybmluZ0xvZywgdGhpcy5vcHRzKTtcblxuICAgICAgICBpZiAodGhpcy50ZXN0UnVuLmFkZFF1YXJhbnRpbmVJbmZvKVxuICAgICAgICAgICAgdGhpcy50ZXN0UnVuLmFkZFF1YXJhbnRpbmVJbmZvKHRoaXMucXVhcmFudGluZSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnF1YXJhbnRpbmUgfHwgdGhpcy5faXNGaXJzdFF1YXJhbnRpbmVBdHRlbXB0KCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1pdCgndGVzdC1ydW4tY3JlYXRlJywge1xuICAgICAgICAgICAgICAgIHRlc3RSdW46ICAgIHRoaXMudGVzdFJ1bixcbiAgICAgICAgICAgICAgICBsZWdhY3k6ICAgICBUZXN0UnVuQ3RvciA9PT0gTGVnYWN5VGVzdFJ1bixcbiAgICAgICAgICAgICAgICB0ZXN0OiAgICAgICB0aGlzLnRlc3QsXG4gICAgICAgICAgICAgICAgaW5kZXg6ICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgICAgICBxdWFyYW50aW5lOiB0aGlzLnF1YXJhbnRpbmUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRlc3RSdW47XG4gICAgfVxuXG4gICAgYXN5bmMgX2VuZFF1YXJhbnRpbmUgKCkge1xuICAgICAgICBpZiAodGhpcy5xdWFyYW50aW5lLmF0dGVtcHRzLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICB0aGlzLnRlc3RSdW4udW5zdGFibGUgPSB0aGlzLnF1YXJhbnRpbmUuZ2V0UGFzc2VkQXR0ZW1wdHMoKS5sZW5ndGggPiAwO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuX2VtaXRUZXN0UnVuRG9uZSgpO1xuICAgIH1cblxuICAgIF9zaG91bGRLZWVwSW5RdWFyYW50aW5lICgpIHtcbiAgICAgICAgY29uc3QgZXJyb3JzICAgICAgICAgPSB0aGlzLnRlc3RSdW4uZXJycztcbiAgICAgICAgY29uc3QgaGFzRXJyb3JzICAgICAgPSAhIWVycm9ycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGF0dGVtcHRzICAgICAgID0gdGhpcy5xdWFyYW50aW5lLmF0dGVtcHRzO1xuICAgICAgICBjb25zdCBpc0ZpcnN0QXR0ZW1wdCA9IHRoaXMuX2lzRmlyc3RRdWFyYW50aW5lQXR0ZW1wdCgpO1xuXG4gICAgICAgIGF0dGVtcHRzLnB1c2goZXJyb3JzKTtcblxuICAgICAgICByZXR1cm4gaXNGaXJzdEF0dGVtcHQgPyBoYXNFcnJvcnMgOiAhdGhpcy5xdWFyYW50aW5lLmlzVGhyZXNob2xkUmVhY2hlZCgpO1xuICAgIH1cblxuICAgIF9pc0ZpcnN0UXVhcmFudGluZUF0dGVtcHQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWFyYW50aW5lICYmICF0aGlzLnF1YXJhbnRpbmUuYXR0ZW1wdHMubGVuZ3RoO1xuICAgIH1cblxuICAgIGFzeW5jIF9rZWVwSW5RdWFyYW50aW5lICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVzdGFydFRlc3QoKTtcbiAgICB9XG5cbiAgICBhc3luYyBfcmVzdGFydFRlc3QgKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmVtaXQoJ3Rlc3QtcnVuLXJlc3RhcnQnKTtcbiAgICB9XG5cbiAgICBhc3luYyBfdGVzdFJ1bkRvbmVJblF1YXJhbnRpbmVNb2RlICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nob3VsZEtlZXBJblF1YXJhbnRpbmUoKSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2tlZXBJblF1YXJhbnRpbmUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW5kUXVhcmFudGluZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIF90ZXN0UnVuRG9uZSAoKSB7XG4gICAgICAgIGlmICh0aGlzLnF1YXJhbnRpbmUpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl90ZXN0UnVuRG9uZUluUXVhcmFudGluZU1vZGUoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW1pdFRlc3RSdW5Eb25lKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2VtaXRUZXN0UnVuRG9uZSAoKSB7XG4gICAgICAgIC8vIE5PVEU6IHdlIHNob3VsZCByZXBvcnQgdGVzdCBydW4gY29tcGxldGlvbiBpbiBvcmRlciB0aGV5IHdlcmUgY29tcGxldGVkIGluIGJyb3dzZXIuXG4gICAgICAgIC8vIFRvIGtlZXAgYSBzZXF1ZW5jZSBhZnRlciBmaXh0dXJlIGhvb2sgZXhlY3V0aW9uIHdlIHVzZSBjb21wbGV0aW9uIHF1ZXVlLlxuICAgICAgICBhd2FpdCB0aGlzLmZpeHR1cmVIb29rQ29udHJvbGxlci5ydW5GaXh0dXJlQWZ0ZXJIb29rSWZOZWNlc3NhcnkodGhpcy50ZXN0UnVuKTtcblxuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuZW1pdCgndGVzdC1ydW4tZG9uZScpO1xuICAgIH1cblxuICAgIGFzeW5jIF90ZXN0UnVuQmVmb3JlRG9uZSAoKSB7XG4gICAgICAgIGxldCByYWlzZUV2ZW50ID0gIXRoaXMucXVhcmFudGluZTtcblxuICAgICAgICBpZiAoIXJhaXNlRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU3VjY2Vzc2Z1bFF1YXJhbnRpbmVGaXJzdEF0dGVtcHQgPSB0aGlzLl9pc0ZpcnN0UXVhcmFudGluZUF0dGVtcHQoKSAmJiAhdGhpcy50ZXN0UnVuLmVycnMubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgaXNBdHRlbXB0c1RocmVzaG9sZFJlYWNoZWQgICAgICAgICA9IHRoaXMucXVhcmFudGluZS5pc1RocmVzaG9sZFJlYWNoZWQodGhpcy50ZXN0UnVuLmVycnMpO1xuXG4gICAgICAgICAgICByYWlzZUV2ZW50ID0gaXNTdWNjZXNzZnVsUXVhcmFudGluZUZpcnN0QXR0ZW1wdCB8fCBpc0F0dGVtcHRzVGhyZXNob2xkUmVhY2hlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYWlzZUV2ZW50KVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbWl0KCd0ZXN0LXJ1bi1iZWZvcmUtZG9uZScpO1xuICAgIH1cblxuICAgIGFzeW5jIF90ZXN0UnVuRGlzY29ubmVjdGVkIChjb25uZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGlvbkNvdW50Kys7XG5cbiAgICAgICAgaWYgKHRoaXMuZGlzY29ubmVjdGlvbkNvdW50IDwgRElTQ09OTkVDVF9USFJFU0hPTEQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc3VwcHJlc3NFcnJvcigpO1xuXG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0aW9uLnJlc3RhcnRCcm93c2VyKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3Jlc3RhcnRUZXN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgYmxvY2tlZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpeHR1cmVIb29rQ29udHJvbGxlci5pc1Rlc3RCbG9ja2VkKHRoaXMudGVzdCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3RhcnQgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29uc3QgdGVzdFJ1biA9IGF3YWl0IHRoaXMuX2NyZWF0ZVRlc3RSdW4oY29ubmVjdGlvbik7XG5cbiAgICAgICAgY29uc3QgaG9va09rID0gYXdhaXQgdGhpcy5maXh0dXJlSG9va0NvbnRyb2xsZXIucnVuRml4dHVyZUJlZm9yZUhvb2tJZk5lY2Vzc2FyeSh0ZXN0UnVuKTtcblxuICAgICAgICBpZiAodGhpcy50ZXN0LnNraXAgfHwgIWhvb2tPaykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbWl0KCd0ZXN0LXJ1bi1zdGFydCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZW1pdFRlc3RSdW5Eb25lKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRlc3RSdW4ub25jZSgnc3RhcnQnLCAoKSA9PiB0aGlzLmVtaXQoJ3Rlc3QtcnVuLXN0YXJ0JykpO1xuICAgICAgICB0ZXN0UnVuLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnF1YXJhbnRpbmUgfHwgdGhpcy5faXNGaXJzdFF1YXJhbnRpbmVBdHRlbXB0KCkpXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd0ZXN0LXJ1bi1yZWFkeScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGVzdFJ1bi5vbmNlKCdiZWZvcmUtZG9uZScsICgpID0+IHRoaXMuX3Rlc3RSdW5CZWZvcmVEb25lKCkpO1xuICAgICAgICB0ZXN0UnVuLm9uY2UoJ2RvbmUnLCAoKSA9PiB0aGlzLl90ZXN0UnVuRG9uZSgpKTtcbiAgICAgICAgdGVzdFJ1bi5vbmNlKCdkaXNjb25uZWN0ZWQnLCAoKSA9PiB0aGlzLl90ZXN0UnVuRGlzY29ubmVjdGVkKGNvbm5lY3Rpb24pKTtcblxuICAgICAgICB0ZXN0UnVuLnN0YXJ0KCk7XG5cbiAgICAgICAgcmV0dXJuIFNlc3Npb25Db250cm9sbGVyLmdldFNlc3Npb25VcmwodGVzdFJ1biwgdGhpcy5wcm94eSk7XG4gICAgfVxufVxuIl19
