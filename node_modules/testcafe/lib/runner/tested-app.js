'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _child_process = require('child_process');

var _path = require('path');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _treeKill = require('tree-kill');

var _treeKill2 = _interopRequireDefault(_treeKill);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

var _resolvePathRelativelyCwd = require('../utils/resolve-path-relatively-cwd');

var _resolvePathRelativelyCwd2 = _interopRequireDefault(_resolvePathRelativelyCwd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MODULES_BIN_DIR = (0, _resolvePathRelativelyCwd2.default)('./node_modules/.bin');

const ENV_PATH_KEY = function () {
    if (_osFamily2.default.win) {
        let pathKey = 'Path';

        (0, _keys2.default)(process.env).forEach(key => {
            if (key.toLowerCase() === 'path') pathKey = key;
        });

        return pathKey;
    }

    return 'PATH';
}();

class TestedApp {
    constructor() {
        this.process = null;
        this.errorPromise = null;
        this.killed = false;
    }

    start(command, initDelay) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this.errorPromise = new _pinkie2.default(function (resolve, reject) {
                const env = (0, _assign2.default)({}, process.env);
                const path = env[ENV_PATH_KEY] || '';
                const pathParts = path.split(_path.delimiter);

                pathParts.unshift(MODULES_BIN_DIR);

                env[ENV_PATH_KEY] = pathParts.join(_path.delimiter);

                _this.process = (0, _child_process.exec)(command, { env }, function (err) {
                    if (!_this.killed && err) {
                        const message = err.stack || String(err);

                        reject(new _runtime.GeneralError(_types.RUNTIME_ERRORS.testedAppFailedWithError, message));
                    }
                });
            });

            yield _pinkie2.default.race([(0, _delay2.default)(initDelay), _this.errorPromise]);
        })();
    }

    kill() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this2.killed = true;

            const killPromise = new _pinkie2.default(function (resolve) {
                return (0, _treeKill2.default)(_this2.process.pid, 'SIGTERM', resolve);
            });

            yield killPromise;
        })();
    }
}
exports.default = TestedApp;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW5uZXIvdGVzdGVkLWFwcC5qcyJdLCJuYW1lcyI6WyJNT0RVTEVTX0JJTl9ESVIiLCJFTlZfUEFUSF9LRVkiLCJPUyIsIndpbiIsInBhdGhLZXkiLCJwcm9jZXNzIiwiZW52IiwiZm9yRWFjaCIsImtleSIsInRvTG93ZXJDYXNlIiwiVGVzdGVkQXBwIiwiY29uc3RydWN0b3IiLCJlcnJvclByb21pc2UiLCJraWxsZWQiLCJzdGFydCIsImNvbW1hbmQiLCJpbml0RGVsYXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInBhdGgiLCJwYXRoUGFydHMiLCJzcGxpdCIsInBhdGhEZWxpbWl0ZXIiLCJ1bnNoaWZ0Iiwiam9pbiIsImVyciIsIm1lc3NhZ2UiLCJzdGFjayIsIlN0cmluZyIsIkdlbmVyYWxFcnJvciIsIlJVTlRJTUVfRVJST1JTIiwidGVzdGVkQXBwRmFpbGVkV2l0aEVycm9yIiwicmFjZSIsImtpbGwiLCJraWxsUHJvbWlzZSIsInBpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGtCQUFrQix3Q0FBeUIscUJBQXpCLENBQXhCOztBQUVBLE1BQU1DLGVBQWdCLFlBQVk7QUFDOUIsUUFBSUMsbUJBQUdDLEdBQVAsRUFBWTtBQUNSLFlBQUlDLFVBQVUsTUFBZDs7QUFFQSw0QkFBWUMsUUFBUUMsR0FBcEIsRUFBeUJDLE9BQXpCLENBQWlDQyxPQUFPO0FBQ3BDLGdCQUFJQSxJQUFJQyxXQUFKLE9BQXNCLE1BQTFCLEVBQ0lMLFVBQVVJLEdBQVY7QUFDUCxTQUhEOztBQUtBLGVBQU9KLE9BQVA7QUFDSDs7QUFFRCxXQUFPLE1BQVA7QUFDSCxDQWJvQixFQUFyQjs7QUFnQmUsTUFBTU0sU0FBTixDQUFnQjtBQUMzQkMsa0JBQWU7QUFDWCxhQUFLTixPQUFMLEdBQW9CLElBQXBCO0FBQ0EsYUFBS08sWUFBTCxHQUFvQixJQUFwQjtBQUNBLGFBQUtDLE1BQUwsR0FBb0IsS0FBcEI7QUFDSDs7QUFFS0MsU0FBTixDQUFhQyxPQUFiLEVBQXNCQyxTQUF0QixFQUFpQztBQUFBOztBQUFBO0FBQzdCLGtCQUFLSixZQUFMLEdBQW9CLElBQUlLLGdCQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ2pELHNCQUFNYixNQUFZLHNCQUFjLEVBQWQsRUFBa0JELFFBQVFDLEdBQTFCLENBQWxCO0FBQ0Esc0JBQU1jLE9BQVlkLElBQUlMLFlBQUosS0FBcUIsRUFBdkM7QUFDQSxzQkFBTW9CLFlBQVlELEtBQUtFLEtBQUwsQ0FBV0MsZUFBWCxDQUFsQjs7QUFFQUYsMEJBQVVHLE9BQVYsQ0FBa0J4QixlQUFsQjs7QUFFQU0sb0JBQUlMLFlBQUosSUFBb0JvQixVQUFVSSxJQUFWLENBQWVGLGVBQWYsQ0FBcEI7O0FBRUEsc0JBQUtsQixPQUFMLEdBQWUseUJBQUtVLE9BQUwsRUFBYyxFQUFFVCxHQUFGLEVBQWQsRUFBdUIsZUFBTztBQUN6Qyx3QkFBSSxDQUFDLE1BQUtPLE1BQU4sSUFBZ0JhLEdBQXBCLEVBQXlCO0FBQ3JCLDhCQUFNQyxVQUFVRCxJQUFJRSxLQUFKLElBQWFDLE9BQU9ILEdBQVAsQ0FBN0I7O0FBRUFQLCtCQUFPLElBQUlXLHFCQUFKLENBQWlCQyxzQkFBZUMsd0JBQWhDLEVBQTBETCxPQUExRCxDQUFQO0FBQ0g7QUFDSixpQkFOYyxDQUFmO0FBT0gsYUFoQm1CLENBQXBCOztBQWtCQSxrQkFBTVYsaUJBQVFnQixJQUFSLENBQWEsQ0FDZixxQkFBTWpCLFNBQU4sQ0FEZSxFQUVmLE1BQUtKLFlBRlUsQ0FBYixDQUFOO0FBbkI2QjtBQXVCaEM7O0FBRUtzQixRQUFOLEdBQWM7QUFBQTs7QUFBQTtBQUNWLG1CQUFLckIsTUFBTCxHQUFjLElBQWQ7O0FBRUEsa0JBQU1zQixjQUFjLElBQUlsQixnQkFBSixDQUFZO0FBQUEsdUJBQVcsd0JBQUssT0FBS1osT0FBTCxDQUFhK0IsR0FBbEIsRUFBdUIsU0FBdkIsRUFBa0NsQixPQUFsQyxDQUFYO0FBQUEsYUFBWixDQUFwQjs7QUFFQSxrQkFBTWlCLFdBQU47QUFMVTtBQU1iO0FBdEMwQjtrQkFBVnpCLFMiLCJmaWxlIjoicnVubmVyL3Rlc3RlZC1hcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBkZWxpbWl0ZXIgYXMgcGF0aERlbGltaXRlciB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAncGlua2llJztcbmltcG9ydCBraWxsIGZyb20gJ3RyZWUta2lsbCc7XG5pbXBvcnQgT1MgZnJvbSAnb3MtZmFtaWx5JztcbmltcG9ydCBkZWxheSBmcm9tICcuLi91dGlscy9kZWxheSc7XG5pbXBvcnQgeyBHZW5lcmFsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBSVU5USU1FX0VSUk9SUyB9IGZyb20gJy4uL2Vycm9ycy90eXBlcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhSZWxhdGl2ZWx5Q3dkIGZyb20gJy4uL3V0aWxzL3Jlc29sdmUtcGF0aC1yZWxhdGl2ZWx5LWN3ZCc7XG5cbmNvbnN0IE1PRFVMRVNfQklOX0RJUiA9IHJlc29sdmVQYXRoUmVsYXRpdmVseUN3ZCgnLi9ub2RlX21vZHVsZXMvLmJpbicpO1xuXG5jb25zdCBFTlZfUEFUSF9LRVkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmIChPUy53aW4pIHtcbiAgICAgICAgbGV0IHBhdGhLZXkgPSAnUGF0aCc7XG5cbiAgICAgICAgT2JqZWN0LmtleXMocHJvY2Vzcy5lbnYpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3BhdGgnKVxuICAgICAgICAgICAgICAgIHBhdGhLZXkgPSBrZXk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwYXRoS2V5O1xuICAgIH1cblxuICAgIHJldHVybiAnUEFUSCc7XG59KSgpO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RlZEFwcCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnByb2Nlc3MgICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMuZXJyb3JQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5raWxsZWQgICAgICAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBhc3luYyBzdGFydCAoY29tbWFuZCwgaW5pdERlbGF5KSB7XG4gICAgICAgIHRoaXMuZXJyb3JQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW52ICAgICAgID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvY2Vzcy5lbnYpO1xuICAgICAgICAgICAgY29uc3QgcGF0aCAgICAgID0gZW52W0VOVl9QQVRIX0tFWV0gfHwgJyc7XG4gICAgICAgICAgICBjb25zdCBwYXRoUGFydHMgPSBwYXRoLnNwbGl0KHBhdGhEZWxpbWl0ZXIpO1xuXG4gICAgICAgICAgICBwYXRoUGFydHMudW5zaGlmdChNT0RVTEVTX0JJTl9ESVIpO1xuXG4gICAgICAgICAgICBlbnZbRU5WX1BBVEhfS0VZXSA9IHBhdGhQYXJ0cy5qb2luKHBhdGhEZWxpbWl0ZXIpO1xuXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3MgPSBleGVjKGNvbW1hbmQsIHsgZW52IH0sIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmtpbGxlZCAmJiBlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVyci5zdGFjayB8fCBTdHJpbmcoZXJyKTtcblxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy50ZXN0ZWRBcHBGYWlsZWRXaXRoRXJyb3IsIG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgIGRlbGF5KGluaXREZWxheSksXG4gICAgICAgICAgICB0aGlzLmVycm9yUHJvbWlzZVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBhc3luYyBraWxsICgpIHtcbiAgICAgICAgdGhpcy5raWxsZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGtpbGxQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBraWxsKHRoaXMucHJvY2Vzcy5waWQsICdTSUdURVJNJywgcmVzb2x2ZSkpO1xuXG4gICAgICAgIGF3YWl0IGtpbGxQcm9taXNlO1xuICAgIH1cbn1cbiJdfQ==
