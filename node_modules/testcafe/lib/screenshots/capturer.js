'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _crop = require('./crop');

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _asyncQueue = require('../utils/async-queue');

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _escapeUserAgent = require('../utils/escape-user-agent');

var _escapeUserAgent2 = _interopRequireDefault(_escapeUserAgent);

var _correctFilePath = require('../utils/correct-file-path');

var _correctFilePath2 = _interopRequireDefault(_correctFilePath);

var _promisifiedFunctions = require('../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Capturer {
    constructor(baseScreenshotsPath, testEntry, connection, pathPattern, warningLog) {
        this.enabled = !!baseScreenshotsPath;
        this.baseScreenshotsPath = baseScreenshotsPath;
        this.testEntry = testEntry;
        this.provider = connection.provider;
        this.browserId = connection.id;
        this.warningLog = warningLog;
        this.pathPattern = pathPattern;
    }

    static _getDimensionWithoutScrollbar(fullDimension, documentDimension, bodyDimension) {
        if (bodyDimension > fullDimension) return documentDimension;

        if (documentDimension > fullDimension) return bodyDimension;

        return Math.max(documentDimension, bodyDimension);
    }

    static _getCropDimensions(cropDimensions, pageDimensions) {
        if (!cropDimensions || !pageDimensions) return null;

        const dpr = pageDimensions.dpr;
        const top = cropDimensions.top,
              left = cropDimensions.left,
              bottom = cropDimensions.bottom,
              right = cropDimensions.right;


        return {
            top: Math.round(top * dpr),
            left: Math.round(left * dpr),
            bottom: Math.round(bottom * dpr),
            right: Math.round(right * dpr)
        };
    }

    static _getClientAreaDimensions(pageDimensions) {
        if (!pageDimensions) return null;

        const innerWidth = pageDimensions.innerWidth,
              documentWidth = pageDimensions.documentWidth,
              bodyWidth = pageDimensions.bodyWidth,
              innerHeight = pageDimensions.innerHeight,
              documentHeight = pageDimensions.documentHeight,
              bodyHeight = pageDimensions.bodyHeight,
              dpr = pageDimensions.dpr;


        return {
            width: Math.floor(Capturer._getDimensionWithoutScrollbar(innerWidth, documentWidth, bodyWidth) * dpr),
            height: Math.floor(Capturer._getDimensionWithoutScrollbar(innerHeight, documentHeight, bodyHeight) * dpr)
        };
    }

    static _isScreenshotCaptured(screenshotPath) {
        return (0, _asyncToGenerator3.default)(function* () {
            try {
                const stats = yield (0, _promisifiedFunctions.stat)(screenshotPath);

                return stats.isFile();
            } catch (e) {
                return false;
            }
        })();
    }

    _joinWithBaseScreenshotPath(path) {
        return (0, _path.join)(this.baseScreenshotsPath, path);
    }

    _incrementFileIndexes(forError) {
        if (forError) this.pathPattern.data.errorFileIndex++;else this.pathPattern.data.fileIndex++;
    }

    _getCustomScreenshotPath(customPath) {
        const correctedCustomPath = (0, _correctFilePath2.default)(customPath);

        return this._joinWithBaseScreenshotPath(correctedCustomPath);
    }

    _getScreenshotPath(forError) {
        const path = this.pathPattern.getPath(forError);

        this._incrementFileIndexes(forError);

        return this._joinWithBaseScreenshotPath(path);
    }

    _getThumbnailPath(screenshotPath) {
        const imageName = (0, _path.basename)(screenshotPath);
        const imageDir = (0, _path.dirname)(screenshotPath);

        return (0, _path.join)(imageDir, 'thumbnails', imageName);
    }

    _takeScreenshot(filePath, pageWidth, pageHeight) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield (0, _makeDir2.default)((0, _path.dirname)(filePath));
            yield _this.provider.takeScreenshot(_this.browserId, filePath, pageWidth, pageHeight);
        })();
    }

    _capture(forError, { pageDimensions, cropDimensions, markSeed, customPath } = {}) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this2.enabled) return null;

            const screenshotPath = customPath ? _this2._getCustomScreenshotPath(customPath) : _this2._getScreenshotPath(forError);
            const thumbnailPath = _this2._getThumbnailPath(screenshotPath);

            if ((0, _asyncQueue.isInQueue)(screenshotPath)) _this2.warningLog.addWarning(_warningMessage2.default.screenshotRewritingError, screenshotPath);

            yield (0, _asyncQueue.addToQueue)(screenshotPath, (0, _asyncToGenerator3.default)(function* () {
                const clientAreaDimensions = Capturer._getClientAreaDimensions(pageDimensions);

                yield _this2._takeScreenshot(screenshotPath, ...(clientAreaDimensions ? [clientAreaDimensions.width, clientAreaDimensions.height] : []));

                if (!(yield Capturer._isScreenshotCaptured(screenshotPath))) return;

                try {
                    const image = yield (0, _promisifiedFunctions.readPngFile)(screenshotPath);

                    const croppedImage = yield (0, _crop.cropScreenshot)(image, {
                        markSeed,
                        clientAreaDimensions,

                        path: screenshotPath,
                        cropDimensions: Capturer._getCropDimensions(cropDimensions, pageDimensions)
                    });

                    if (croppedImage) yield (0, _promisifiedFunctions.writePng)(screenshotPath, croppedImage);
                } catch (err) {
                    yield (0, _promisifiedFunctions.deleteFile)(screenshotPath);

                    throw err;
                }

                yield (0, _testcafeBrowserTools.generateThumbnail)(screenshotPath, thumbnailPath);
            }));

            const screenshot = {
                screenshotPath,
                thumbnailPath,
                userAgent: (0, _escapeUserAgent2.default)(_this2.pathPattern.data.parsedUserAgent),
                quarantineAttempt: _this2.pathPattern.data.quarantineAttempt,
                takenOnFail: forError
            };

            _this2.testEntry.screenshots.push(screenshot);

            return screenshotPath;
        })();
    }

    captureAction(options) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this3._capture(false, options);
        })();
    }

    captureError(options) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return yield _this4._capture(true, options);
        })();
    }
}
exports.default = Capturer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
