'use strict';

exports.__esModule = true;
exports.generateScreenshotMark = generateScreenshotMark;
exports.copyImagePart = copyImagePart;

var _pngjs = require('pngjs');

var _lodash = require('lodash');

var _generate = require('nanoid/generate');

var _generate2 = _interopRequireDefault(_generate);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ALPHABET = '01';

function generateScreenshotMark() {
    // NOTE: 32-bit id
    const id = (0, _generate2.default)(ALPHABET, _constants.MARK_LENGTH);

    // NOTE: array of RGB values
    const markSeed = (0, _lodash.flatten)((0, _lodash.map)(id, bit => bit === '0' ? [0, 0, 0, 255] : [255, 255, 255, 255]));

    // NOTE: macOS browsers can't display an element, if it's CSS height is lesser than 1.
    // It happens on Retina displays, because they have more than 1 physical pixel in a CSS pixel.
    // So increase mark size by prepending transparent pixels before the actual mark.
    const imageData = (0, _lodash.times)(_constants.MARK_BYTES_PER_PIXEL * _constants.MARK_LENGTH * (_constants.MARK_HEIGHT - 1), (0, _lodash.constant)(0)).concat(markSeed);
    const imageDataBuffer = Buffer.from(imageData);
    const pngImage = new _pngjs.PNG({ width: _constants.MARK_LENGTH, height: _constants.MARK_HEIGHT });

    imageDataBuffer.copy(pngImage.data);

    const markData = 'data:image/png;base64,' + _pngjs.PNG.sync.write(pngImage).toString('base64');

    return { markSeed, markData };
}

function copyImagePart(pngImage, { clipLeft, clipTop, clipRight, clipBottom }) {
    const width = clipRight - clipLeft;
    const height = clipBottom - clipTop;

    const dstImage = new _pngjs.PNG({ width, height });

    const stride = dstImage.width * _constants.MARK_BYTES_PER_PIXEL;

    for (let i = 0; i < height; i++) {
        const srcStartIndex = (pngImage.width * (i + clipTop) + clipLeft) * _constants.MARK_BYTES_PER_PIXEL;

        pngImage.data.copy(dstImage.data, stride * i, srcStartIndex, srcStartIndex + stride);
    }

    return dstImage;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy91dGlscy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZVNjcmVlbnNob3RNYXJrIiwiY29weUltYWdlUGFydCIsIkFMUEhBQkVUIiwiaWQiLCJNQVJLX0xFTkdUSCIsIm1hcmtTZWVkIiwiYml0IiwiaW1hZ2VEYXRhIiwiTUFSS19CWVRFU19QRVJfUElYRUwiLCJNQVJLX0hFSUdIVCIsImNvbmNhdCIsImltYWdlRGF0YUJ1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJwbmdJbWFnZSIsIlBORyIsIndpZHRoIiwiaGVpZ2h0IiwiY29weSIsImRhdGEiLCJtYXJrRGF0YSIsInN5bmMiLCJ3cml0ZSIsInRvU3RyaW5nIiwiY2xpcExlZnQiLCJjbGlwVG9wIiwiY2xpcFJpZ2h0IiwiY2xpcEJvdHRvbSIsImRzdEltYWdlIiwic3RyaWRlIiwiaSIsInNyY1N0YXJ0SW5kZXgiXSwibWFwcGluZ3MiOiI7OztRQU9nQkEsc0IsR0FBQUEsc0I7UUFxQkFDLGEsR0FBQUEsYTs7QUE1QmhCOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNQyxXQUFXLElBQWpCOztBQUVPLFNBQVNGLHNCQUFULEdBQW1DO0FBQ3RDO0FBQ0EsVUFBTUcsS0FBSyx3QkFBV0QsUUFBWCxFQUFxQkUsc0JBQXJCLENBQVg7O0FBRUE7QUFDQSxVQUFNQyxXQUFXLHFCQUFRLGlCQUFJRixFQUFKLEVBQVFHLE9BQU9BLFFBQVEsR0FBUixHQUFjLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsR0FBVixDQUFkLEdBQStCLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLENBQTlDLENBQVIsQ0FBakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBTUMsWUFBa0IsbUJBQU1DLGtDQUF1Qkosc0JBQXZCLElBQXNDSyx5QkFBYyxDQUFwRCxDQUFOLEVBQThELHNCQUFTLENBQVQsQ0FBOUQsRUFBMkVDLE1BQTNFLENBQWtGTCxRQUFsRixDQUF4QjtBQUNBLFVBQU1NLGtCQUFrQkMsT0FBT0MsSUFBUCxDQUFZTixTQUFaLENBQXhCO0FBQ0EsVUFBTU8sV0FBa0IsSUFBSUMsVUFBSixDQUFRLEVBQUVDLE9BQU9aLHNCQUFULEVBQXNCYSxRQUFRUixzQkFBOUIsRUFBUixDQUF4Qjs7QUFFQUUsb0JBQWdCTyxJQUFoQixDQUFxQkosU0FBU0ssSUFBOUI7O0FBRUEsVUFBTUMsV0FBVywyQkFBMkJMLFdBQUlNLElBQUosQ0FBU0MsS0FBVCxDQUFlUixRQUFmLEVBQXlCUyxRQUF6QixDQUFrQyxRQUFsQyxDQUE1Qzs7QUFFQSxXQUFPLEVBQUVsQixRQUFGLEVBQVllLFFBQVosRUFBUDtBQUNIOztBQUVNLFNBQVNuQixhQUFULENBQXdCYSxRQUF4QixFQUFrQyxFQUFFVSxRQUFGLEVBQVlDLE9BQVosRUFBcUJDLFNBQXJCLEVBQWdDQyxVQUFoQyxFQUFsQyxFQUFnRjtBQUNuRixVQUFNWCxRQUFTVSxZQUFZRixRQUEzQjtBQUNBLFVBQU1QLFNBQVNVLGFBQWFGLE9BQTVCOztBQUVBLFVBQU1HLFdBQVcsSUFBSWIsVUFBSixDQUFRLEVBQUVDLEtBQUYsRUFBU0MsTUFBVCxFQUFSLENBQWpCOztBQUVBLFVBQU1ZLFNBQVNELFNBQVNaLEtBQVQsR0FBaUJSLCtCQUFoQzs7QUFFQSxTQUFLLElBQUlzQixJQUFJLENBQWIsRUFBZ0JBLElBQUliLE1BQXBCLEVBQTRCYSxHQUE1QixFQUFpQztBQUM3QixjQUFNQyxnQkFBZ0IsQ0FBQ2pCLFNBQVNFLEtBQVQsSUFBa0JjLElBQUlMLE9BQXRCLElBQWlDRCxRQUFsQyxJQUE4Q2hCLCtCQUFwRTs7QUFFQU0saUJBQVNLLElBQVQsQ0FBY0QsSUFBZCxDQUFtQlUsU0FBU1QsSUFBNUIsRUFBa0NVLFNBQVNDLENBQTNDLEVBQThDQyxhQUE5QyxFQUE2REEsZ0JBQWdCRixNQUE3RTtBQUNIOztBQUVELFdBQU9ELFFBQVA7QUFDSCIsImZpbGUiOiJzY3JlZW5zaG90cy91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBORyB9IGZyb20gJ3BuZ2pzJztcbmltcG9ydCB7IG1hcCwgZmxhdHRlbiwgdGltZXMsIGNvbnN0YW50IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBnZW5lcmF0ZUlkIGZyb20gJ25hbm9pZC9nZW5lcmF0ZSc7XG5pbXBvcnQgeyBNQVJLX0xFTkdUSCwgTUFSS19IRUlHSFQsIE1BUktfQllURVNfUEVSX1BJWEVMIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBBTFBIQUJFVCA9ICcwMSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNjcmVlbnNob3RNYXJrICgpIHtcbiAgICAvLyBOT1RFOiAzMi1iaXQgaWRcbiAgICBjb25zdCBpZCA9IGdlbmVyYXRlSWQoQUxQSEFCRVQsIE1BUktfTEVOR1RIKTtcblxuICAgIC8vIE5PVEU6IGFycmF5IG9mIFJHQiB2YWx1ZXNcbiAgICBjb25zdCBtYXJrU2VlZCA9IGZsYXR0ZW4obWFwKGlkLCBiaXQgPT4gYml0ID09PSAnMCcgPyBbMCwgMCwgMCwgMjU1XSA6IFsyNTUsIDI1NSwgMjU1LCAyNTVdKSk7XG5cbiAgICAvLyBOT1RFOiBtYWNPUyBicm93c2VycyBjYW4ndCBkaXNwbGF5IGFuIGVsZW1lbnQsIGlmIGl0J3MgQ1NTIGhlaWdodCBpcyBsZXNzZXIgdGhhbiAxLlxuICAgIC8vIEl0IGhhcHBlbnMgb24gUmV0aW5hIGRpc3BsYXlzLCBiZWNhdXNlIHRoZXkgaGF2ZSBtb3JlIHRoYW4gMSBwaHlzaWNhbCBwaXhlbCBpbiBhIENTUyBwaXhlbC5cbiAgICAvLyBTbyBpbmNyZWFzZSBtYXJrIHNpemUgYnkgcHJlcGVuZGluZyB0cmFuc3BhcmVudCBwaXhlbHMgYmVmb3JlIHRoZSBhY3R1YWwgbWFyay5cbiAgICBjb25zdCBpbWFnZURhdGEgICAgICAgPSB0aW1lcyhNQVJLX0JZVEVTX1BFUl9QSVhFTCAqIE1BUktfTEVOR1RIICogKE1BUktfSEVJR0hUIC0gMSksIGNvbnN0YW50KDApKS5jb25jYXQobWFya1NlZWQpO1xuICAgIGNvbnN0IGltYWdlRGF0YUJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGltYWdlRGF0YSk7XG4gICAgY29uc3QgcG5nSW1hZ2UgICAgICAgID0gbmV3IFBORyh7IHdpZHRoOiBNQVJLX0xFTkdUSCwgaGVpZ2h0OiBNQVJLX0hFSUdIVCB9KTtcblxuICAgIGltYWdlRGF0YUJ1ZmZlci5jb3B5KHBuZ0ltYWdlLmRhdGEpO1xuXG4gICAgY29uc3QgbWFya0RhdGEgPSAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBQTkcuc3luYy53cml0ZShwbmdJbWFnZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gICAgcmV0dXJuIHsgbWFya1NlZWQsIG1hcmtEYXRhIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5SW1hZ2VQYXJ0IChwbmdJbWFnZSwgeyBjbGlwTGVmdCwgY2xpcFRvcCwgY2xpcFJpZ2h0LCBjbGlwQm90dG9tIH0pIHtcbiAgICBjb25zdCB3aWR0aCAgPSBjbGlwUmlnaHQgLSBjbGlwTGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBjbGlwQm90dG9tIC0gY2xpcFRvcDtcblxuICAgIGNvbnN0IGRzdEltYWdlID0gbmV3IFBORyh7IHdpZHRoLCBoZWlnaHQgfSk7XG5cbiAgICBjb25zdCBzdHJpZGUgPSBkc3RJbWFnZS53aWR0aCAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICBjb25zdCBzcmNTdGFydEluZGV4ID0gKHBuZ0ltYWdlLndpZHRoICogKGkgKyBjbGlwVG9wKSArIGNsaXBMZWZ0KSAqIE1BUktfQllURVNfUEVSX1BJWEVMO1xuXG4gICAgICAgIHBuZ0ltYWdlLmRhdGEuY29weShkc3RJbWFnZS5kYXRhLCBzdHJpZGUgKiBpLCBzcmNTdGFydEluZGV4LCBzcmNTdGFydEluZGV4ICsgc3RyaWRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZHN0SW1hZ2U7XG59XG4iXX0=
