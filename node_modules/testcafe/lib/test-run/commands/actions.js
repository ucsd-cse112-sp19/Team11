"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = __importDefault(require("./type"));
const selector_builder_1 = __importDefault(require("../../client-functions/selectors/selector-builder"));
const client_function_builder_1 = __importDefault(require("../../client-functions/client-function-builder"));
const builder_symbol_1 = __importDefault(require("../../client-functions/builder-symbol"));
const base_1 = __importDefault(require("./base"));
const options_1 = require("./options");
const initializers_1 = require("./validations/initializers");
const execute_js_expression_1 = __importDefault(require("../execute-js-expression"));
const utils_1 = require("./utils");
const argument_1 = require("./validations/argument");
const test_run_1 = require("../../errors/test-run");
const observation_1 = require("./observation");
// Initializers
function initActionOptions(name, val) {
    return new options_1.ActionOptions(val, true);
}
function initClickOptions(name, val) {
    return new options_1.ClickOptions(val, true);
}
function initMouseOptions(name, val) {
    return new options_1.MouseOptions(val, true);
}
function initTypeOptions(name, val) {
    return new options_1.TypeOptions(val, true);
}
function initDragToElementOptions(name, val) {
    return new options_1.DragToElementOptions(val, true);
}
function initDialogHandler(name, val, { skipVisibilityCheck, testRun }) {
    let fn;
    if (utils_1.isJSExpression(val))
        fn = execute_js_expression_1.default(val.value, testRun, { skipVisibilityCheck });
    else
        fn = val.fn;
    if (fn === null || fn instanceof observation_1.ExecuteClientFunctionCommand)
        return fn;
    const options = val.options;
    const methodName = 'setNativeDialogHandler';
    let builder = fn && fn[builder_symbol_1.default];
    const isSelector = builder instanceof selector_builder_1.default;
    const functionType = typeof fn;
    if (functionType !== 'function' || isSelector)
        throw new test_run_1.SetNativeDialogHandlerCodeWrongTypeError(isSelector ? 'Selector' : functionType);
    builder = builder instanceof client_function_builder_1.default ?
        fn.with(options)[builder_symbol_1.default] :
        new client_function_builder_1.default(fn, options, { instantiation: methodName, execution: methodName });
    return builder.getCommand([]);
}
// Commands
class ClickCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.click);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initClickOptions, required: true }
        ];
    }
}
exports.ClickCommand = ClickCommand;
class RightClickCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.rightClick);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initClickOptions, required: true }
        ];
    }
}
exports.RightClickCommand = RightClickCommand;
class ExecuteExpressionCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.executeExpression);
    }
    _getAssignableProperties() {
        return [
            { name: 'expression', type: argument_1.nonEmptyStringArgument, required: true },
            { name: 'resultVariableName', type: argument_1.nonEmptyStringArgument, defaultValue: null },
            { name: 'isAsyncExpression', type: argument_1.booleanArgument, defaultValue: false }
        ];
    }
}
exports.ExecuteExpressionCommand = ExecuteExpressionCommand;
class DoubleClickCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.doubleClick);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initClickOptions, required: true }
        ];
    }
}
exports.DoubleClickCommand = DoubleClickCommand;
class HoverCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.hover);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initMouseOptions, required: true }
        ];
    }
}
exports.HoverCommand = HoverCommand;
class TypeTextCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.typeText);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'text', type: argument_1.nonEmptyStringArgument, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initTypeOptions, required: true }
        ];
    }
}
exports.TypeTextCommand = TypeTextCommand;
class DragCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.drag);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'dragOffsetX', type: argument_1.integerArgument, required: true },
            { name: 'dragOffsetY', type: argument_1.integerArgument, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initMouseOptions, required: true }
        ];
    }
}
exports.DragCommand = DragCommand;
class DragToElementCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.dragToElement);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'destinationSelector', init: initializers_1.initSelector, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initDragToElementOptions, required: true }
        ];
    }
}
exports.DragToElementCommand = DragToElementCommand;
class SelectTextCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.selectText);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'startPos', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'endPos', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'options', type: argument_1.actionOptions, init: initActionOptions, required: true }
        ];
    }
}
exports.SelectTextCommand = SelectTextCommand;
class SelectEditableContentCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.selectEditableContent);
    }
    _getAssignableProperties() {
        return [
            { name: 'startSelector', init: initializers_1.initSelector, required: true },
            { name: 'endSelector', init: initializers_1.initSelector, defaultValue: null },
            { name: 'options', type: argument_1.actionOptions, init: initActionOptions, required: true }
        ];
    }
}
exports.SelectEditableContentCommand = SelectEditableContentCommand;
class SelectTextAreaContentCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.selectTextAreaContent);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'startLine', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'startPos', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'endLine', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'endPos', type: argument_1.positiveIntegerArgument, defaultValue: null },
            { name: 'options', type: argument_1.actionOptions, init: initActionOptions, required: true }
        ];
    }
}
exports.SelectTextAreaContentCommand = SelectTextAreaContentCommand;
class PressKeyCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.pressKey);
    }
    _getAssignableProperties() {
        return [
            { name: 'keys', type: argument_1.nonEmptyStringArgument, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initActionOptions, required: true }
        ];
    }
}
exports.PressKeyCommand = PressKeyCommand;
class NavigateToCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.navigateTo);
    }
    _getAssignableProperties() {
        return [
            { name: 'url', type: argument_1.urlArgument, required: true },
            { name: 'stateSnapshot', type: argument_1.nullableStringArgument, defaultValue: null },
            { name: 'forceReload', type: argument_1.booleanArgument, defaultValue: false }
        ];
    }
}
exports.NavigateToCommand = NavigateToCommand;
class SetFilesToUploadCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.setFilesToUpload);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initUploadSelector, required: true },
            { name: 'filePath', type: argument_1.stringOrStringArrayArgument, required: true }
        ];
    }
}
exports.SetFilesToUploadCommand = SetFilesToUploadCommand;
class ClearUploadCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.clearUpload);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initUploadSelector, required: true }
        ];
    }
}
exports.ClearUploadCommand = ClearUploadCommand;
class SwitchToIframeCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.switchToIframe);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true }
        ];
    }
}
exports.SwitchToIframeCommand = SwitchToIframeCommand;
class SwitchToMainWindowCommand {
    constructor() {
        this.type = type_1.default.switchToMainWindow;
    }
}
exports.SwitchToMainWindowCommand = SwitchToMainWindowCommand;
class SetNativeDialogHandlerCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.setNativeDialogHandler);
    }
    _getAssignableProperties() {
        return [
            { name: 'dialogHandler', init: initDialogHandler, required: true }
        ];
    }
}
exports.SetNativeDialogHandlerCommand = SetNativeDialogHandlerCommand;
class GetNativeDialogHistoryCommand {
    constructor() {
        this.type = type_1.default.getNativeDialogHistory;
    }
}
exports.GetNativeDialogHistoryCommand = GetNativeDialogHistoryCommand;
class GetBrowserConsoleMessagesCommand {
    constructor() {
        this.type = type_1.default.getBrowserConsoleMessages;
    }
}
exports.GetBrowserConsoleMessagesCommand = GetBrowserConsoleMessagesCommand;
class SetTestSpeedCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.setTestSpeed);
    }
    _getAssignableProperties() {
        return [
            { name: 'speed', type: argument_1.setSpeedArgument, required: true }
        ];
    }
}
exports.SetTestSpeedCommand = SetTestSpeedCommand;
class SetPageLoadTimeoutCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.setPageLoadTimeout);
    }
    _getAssignableProperties() {
        return [
            { name: 'duration', type: argument_1.positiveIntegerArgument, required: true }
        ];
    }
}
exports.SetPageLoadTimeoutCommand = SetPageLoadTimeoutCommand;
class UseRoleCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.useRole);
    }
    _getAssignableProperties() {
        return [
            { name: 'role', type: argument_1.actionRoleArgument, required: true }
        ];
    }
}
exports.UseRoleCommand = UseRoleCommand;
//# sourceMappingURL=data:application/json;base64,