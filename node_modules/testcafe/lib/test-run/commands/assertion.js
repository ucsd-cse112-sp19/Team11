'use strict';

exports.__esModule = true;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _runtime = require('../../errors/runtime');

var _testRun = require('../../errors/test-run');

var _executeJsExpression = require('../execute-js-expression');

var _executeJsExpression2 = _interopRequireDefault(_executeJsExpression);

var _utils = require('./utils');

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initAssertionOptions(name, val) {
    return new _options.AssertionOptions(val, true);
}

//Initializers
function initAssertionParameter(name, val, { skipVisibilityCheck, testRun }) {
    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression2.default)(val.value, testRun, { skipVisibilityCheck });

        return val;
    } catch (err) {
        throw new _testRun.AssertionExecutableArgumentError(name, val.value, err, err instanceof _runtime.APIError);
    }
}

// Commands
class AssertionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.assertion);
    }

    _getAssignableProperties() {
        return [{ name: 'assertionType', type: _argument.nonEmptyStringArgument, required: true }, { name: 'actual', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected2', init: initAssertionParameter, defaultValue: void 0 }, { name: 'message', type: _argument.stringArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initAssertionOptions, required: true }];
    }
}
exports.default = AssertionCommand;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiXSwibmFtZXMiOlsiaW5pdEFzc2VydGlvbk9wdGlvbnMiLCJuYW1lIiwidmFsIiwiQXNzZXJ0aW9uT3B0aW9ucyIsImluaXRBc3NlcnRpb25QYXJhbWV0ZXIiLCJza2lwVmlzaWJpbGl0eUNoZWNrIiwidGVzdFJ1biIsInZhbHVlIiwiZXJyIiwiQXNzZXJ0aW9uRXhlY3V0YWJsZUFyZ3VtZW50RXJyb3IiLCJBUElFcnJvciIsIkFzc2VydGlvbkNvbW1hbmQiLCJDb21tYW5kQmFzZSIsImNvbnN0cnVjdG9yIiwib2JqIiwiVFlQRSIsImFzc2VydGlvbiIsIl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyIsInR5cGUiLCJub25FbXB0eVN0cmluZ0FyZ3VtZW50IiwicmVxdWlyZWQiLCJpbml0IiwiZGVmYXVsdFZhbHVlIiwic3RyaW5nQXJndW1lbnQiLCJhY3Rpb25PcHRpb25zIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBRUE7Ozs7QUFFQTtBQUNBLFNBQVNBLG9CQUFULENBQStCQyxJQUEvQixFQUFxQ0MsR0FBckMsRUFBMEM7QUFDdEMsV0FBTyxJQUFJQyx5QkFBSixDQUFxQkQsR0FBckIsRUFBMEIsSUFBMUIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsU0FBU0Usc0JBQVQsQ0FBaUNILElBQWpDLEVBQXVDQyxHQUF2QyxFQUE0QyxFQUFFRyxtQkFBRixFQUF1QkMsT0FBdkIsRUFBNUMsRUFBOEU7QUFDMUUsUUFBSTtBQUNBLFlBQUksMkJBQWVKLEdBQWYsQ0FBSixFQUNJQSxNQUFNLG1DQUFvQkEsSUFBSUssS0FBeEIsRUFBK0JELE9BQS9CLEVBQXdDLEVBQUVELG1CQUFGLEVBQXhDLENBQU47O0FBRUosZUFBT0gsR0FBUDtBQUNILEtBTEQsQ0FNQSxPQUFPTSxHQUFQLEVBQVk7QUFDUixjQUFNLElBQUlDLHlDQUFKLENBQXFDUixJQUFyQyxFQUEyQ0MsSUFBSUssS0FBL0MsRUFBc0RDLEdBQXRELEVBQTJEQSxlQUFlRSxpQkFBMUUsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQ7QUFDZSxNQUFNQyxnQkFBTixTQUErQkMsY0FBL0IsQ0FBMkM7QUFDdERDLGdCQUFhQyxHQUFiLEVBQWtCUixPQUFsQixFQUEyQjtBQUN2QixjQUFNUSxHQUFOLEVBQVdSLE9BQVgsRUFBb0JTLGVBQUtDLFNBQXpCO0FBQ0g7O0FBRURDLCtCQUE0QjtBQUN4QixlQUFPLENBQ0gsRUFBRWhCLE1BQU0sZUFBUixFQUF5QmlCLE1BQU1DLGdDQUEvQixFQUF1REMsVUFBVSxJQUFqRSxFQURHLEVBRUgsRUFBRW5CLE1BQU0sUUFBUixFQUFrQm9CLE1BQU1qQixzQkFBeEIsRUFBZ0RrQixjQUFjLEtBQUssQ0FBbkUsRUFGRyxFQUdILEVBQUVyQixNQUFNLFVBQVIsRUFBb0JvQixNQUFNakIsc0JBQTFCLEVBQWtEa0IsY0FBYyxLQUFLLENBQXJFLEVBSEcsRUFJSCxFQUFFckIsTUFBTSxXQUFSLEVBQXFCb0IsTUFBTWpCLHNCQUEzQixFQUFtRGtCLGNBQWMsS0FBSyxDQUF0RSxFQUpHLEVBS0gsRUFBRXJCLE1BQU0sU0FBUixFQUFtQmlCLE1BQU1LLHdCQUF6QixFQUF5Q0QsY0FBYyxJQUF2RCxFQUxHLEVBTUgsRUFBRXJCLE1BQU0sU0FBUixFQUFtQmlCLE1BQU1NLHVCQUF6QixFQUF3Q0gsTUFBTXJCLG9CQUE5QyxFQUFvRW9CLFVBQVUsSUFBOUUsRUFORyxDQUFQO0FBUUg7QUFkcUQ7a0JBQXJDVCxnQiIsImZpbGUiOiJ0ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVFlQRSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBBc3NlcnRpb25PcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgQXNzZXJ0aW9uRXhlY3V0YWJsZUFyZ3VtZW50RXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IGV4ZWN1dGVKc0V4cHJlc3Npb24gZnJvbSAnLi4vZXhlY3V0ZS1qcy1leHByZXNzaW9uJztcbmltcG9ydCB7IGlzSlNFeHByZXNzaW9uIH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7IHN0cmluZ0FyZ3VtZW50LCBhY3Rpb25PcHRpb25zLCBub25FbXB0eVN0cmluZ0FyZ3VtZW50IH0gZnJvbSAnLi92YWxpZGF0aW9ucy9hcmd1bWVudCc7XG5cbi8vIEluaXRpYWxpemVyc1xuZnVuY3Rpb24gaW5pdEFzc2VydGlvbk9wdGlvbnMgKG5hbWUsIHZhbCkge1xuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uT3B0aW9ucyh2YWwsIHRydWUpO1xufVxuXG4vL0luaXRpYWxpemVyc1xuZnVuY3Rpb24gaW5pdEFzc2VydGlvblBhcmFtZXRlciAobmFtZSwgdmFsLCB7IHNraXBWaXNpYmlsaXR5Q2hlY2ssIHRlc3RSdW4gfSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0pTRXhwcmVzc2lvbih2YWwpKVxuICAgICAgICAgICAgdmFsID0gZXhlY3V0ZUpzRXhwcmVzc2lvbih2YWwudmFsdWUsIHRlc3RSdW4sIHsgc2tpcFZpc2liaWxpdHlDaGVjayB9KTtcblxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FeGVjdXRhYmxlQXJndW1lbnRFcnJvcihuYW1lLCB2YWwudmFsdWUsIGVyciwgZXJyIGluc3RhbmNlb2YgQVBJRXJyb3IpO1xuICAgIH1cbn1cblxuLy8gQ29tbWFuZHNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2VydGlvbkNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUuYXNzZXJ0aW9uKTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAnYXNzZXJ0aW9uVHlwZScsIHR5cGU6IG5vbkVtcHR5U3RyaW5nQXJndW1lbnQsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhY3R1YWwnLCBpbml0OiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyLCBkZWZhdWx0VmFsdWU6IHZvaWQgMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZXhwZWN0ZWQnLCBpbml0OiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyLCBkZWZhdWx0VmFsdWU6IHZvaWQgMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZXhwZWN0ZWQyJywgaW5pdDogaW5pdEFzc2VydGlvblBhcmFtZXRlciwgZGVmYXVsdFZhbHVlOiB2b2lkIDAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ21lc3NhZ2UnLCB0eXBlOiBzdHJpbmdBcmd1bWVudCwgZGVmYXVsdFZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdvcHRpb25zJywgdHlwZTogYWN0aW9uT3B0aW9ucywgaW5pdDogaW5pdEFzc2VydGlvbk9wdGlvbnMsIHJlcXVpcmVkOiB0cnVlIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG4iXX0=
