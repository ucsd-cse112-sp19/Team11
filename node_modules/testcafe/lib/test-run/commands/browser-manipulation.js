'use strict';

exports.__esModule = true;
exports.MaximizeWindowCommand = exports.ResizeWindowToFitDeviceCommand = exports.ResizeWindowCommand = exports.TakeScreenshotOnFailCommand = exports.TakeElementScreenshotCommand = exports.TakeScreenshotCommand = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _initializers = require('./validations/initializers');

var _argument = require('./validations/argument');

var _utils = require('../../screenshots/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initResizeToFitDeviceOptions(name, val) {
    return new _options.ResizeToFitDeviceOptions(val, true);
}

function initElementScreenshotOptions(name, val) {
    return new _options.ElementScreenshotOptions(val, true);
}

// Commands
class TakeScreenshotBaseCommand extends _base2.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type);

        this.markSeed = null;
        this.markData = '';
    }

    generateScreenshotMark() {
        (0, _assign2.default)(this, (0, _utils.generateScreenshotMark)());
    }
}

class TakeScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'path', type: _argument.screenshotPathArgument, defaultValue: '' }];
    }
}

exports.TakeScreenshotCommand = TakeScreenshotCommand;
class TakeElementScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeElementScreenshot);
    }

    _getAssignableProperties() {
        return [{ name: 'selector', init: _initializers.initSelector, required: true }, { name: 'options', init: initElementScreenshotOptions, required: true }, { name: 'path', type: _argument.screenshotPathArgument, defaultValue: '' }];
    }
}

exports.TakeElementScreenshotCommand = TakeElementScreenshotCommand;
class TakeScreenshotOnFailCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.takeScreenshotOnFail);
    }

    _getAssignableProperties() {
        return [];
    }
}

exports.TakeScreenshotOnFailCommand = TakeScreenshotOnFailCommand;
class ResizeWindowCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindow);
    }

    _getAssignableProperties() {
        return [{ name: 'width', type: _argument.positiveIntegerArgument, required: true }, { name: 'height', type: _argument.positiveIntegerArgument, required: true }];
    }
}

exports.ResizeWindowCommand = ResizeWindowCommand;
class ResizeWindowToFitDeviceCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.resizeWindowToFitDevice);
    }

    _getAssignableProperties() {
        return [{ name: 'device', type: _argument.resizeWindowDeviceArgument, required: true }, { name: 'options', type: _argument.actionOptions, init: initResizeToFitDeviceOptions, required: true }];
    }
}

exports.ResizeWindowToFitDeviceCommand = ResizeWindowToFitDeviceCommand;
class MaximizeWindowCommand {
    constructor() {
        this.type = _type2.default.maximizeWindow;
    }
}
exports.MaximizeWindowCommand = MaximizeWindowCommand;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9icm93c2VyLW1hbmlwdWxhdGlvbi5qcyJdLCJuYW1lcyI6WyJpbml0UmVzaXplVG9GaXREZXZpY2VPcHRpb25zIiwibmFtZSIsInZhbCIsIlJlc2l6ZVRvRml0RGV2aWNlT3B0aW9ucyIsImluaXRFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMiLCJFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMiLCJUYWtlU2NyZWVuc2hvdEJhc2VDb21tYW5kIiwiQ29tbWFuZEJhc2UiLCJjb25zdHJ1Y3RvciIsIm9iaiIsInRlc3RSdW4iLCJ0eXBlIiwibWFya1NlZWQiLCJtYXJrRGF0YSIsImdlbmVyYXRlU2NyZWVuc2hvdE1hcmsiLCJUYWtlU2NyZWVuc2hvdENvbW1hbmQiLCJUWVBFIiwidGFrZVNjcmVlbnNob3QiLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJzY3JlZW5zaG90UGF0aEFyZ3VtZW50IiwiZGVmYXVsdFZhbHVlIiwiVGFrZUVsZW1lbnRTY3JlZW5zaG90Q29tbWFuZCIsInRha2VFbGVtZW50U2NyZWVuc2hvdCIsImluaXQiLCJpbml0U2VsZWN0b3IiLCJyZXF1aXJlZCIsIlRha2VTY3JlZW5zaG90T25GYWlsQ29tbWFuZCIsInRha2VTY3JlZW5zaG90T25GYWlsIiwiUmVzaXplV2luZG93Q29tbWFuZCIsInJlc2l6ZVdpbmRvdyIsInBvc2l0aXZlSW50ZWdlckFyZ3VtZW50IiwiUmVzaXplV2luZG93VG9GaXREZXZpY2VDb21tYW5kIiwicmVzaXplV2luZG93VG9GaXREZXZpY2UiLCJyZXNpemVXaW5kb3dEZXZpY2VBcmd1bWVudCIsImFjdGlvbk9wdGlvbnMiLCJNYXhpbWl6ZVdpbmRvd0NvbW1hbmQiLCJtYXhpbWl6ZVdpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUVBOztBQU9BOzs7O0FBRUEsU0FBU0EsNEJBQVQsQ0FBdUNDLElB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VSxJQUE5RCxFQURHLEVBRUgsRUFBRXhCLE1BQU0sU0FBUixFQUFtQlUsTUFBTXVCLHVCQUF6QixFQUF3Q1gsTUFBTXZCLDRCQUE5QyxFQUE0RXlCLFVBQVUsSUFBdEYsRUFGRyxDQUFQO0FBSUg7QUFWMkQ7O1FBQW5ETSw4QixHQUFBQSw4QjtBQWFOLE1BQU1JLHFCQUFOLENBQTRCO0FBQy9CM0Isa0JBQWU7QUFDWCxhQUFLRyxJQUFMLEdBQVlLLGVBQUtvQixjQUFqQjtBQUNIO0FBSDhCO1FBQXRCRCxxQixHQUFBQSxxQiIsImZpbGUiOiJ0ZXN0LXJ1bi9jb21tYW5kcy9icm93c2VyLW1hbmlwdWxhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUWVBFIGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgQ29tbWFuZEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IEVsZW1lbnRTY3JlZW5zaG90T3B0aW9ucywgUmVzaXplVG9GaXREZXZpY2VPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB7IGluaXRTZWxlY3RvciB9IGZyb20gJy4vdmFsaWRhdGlvbnMvaW5pdGlhbGl6ZXJzJztcblxuaW1wb3J0IHtcbiAgICBwb3NpdGl2ZUludGVnZXJBcmd1bWVudCxcbiAgICBzY3JlZW5zaG90UGF0aEFyZ3VtZW50LFxuICAgIHJlc2l6ZVdpbmRvd0RldmljZUFyZ3VtZW50LFxuICAgIGFjdGlvbk9wdGlvbnNcbn0gZnJvbSAnLi92YWxpZGF0aW9ucy9hcmd1bWVudCc7XG5cbmltcG9ydCB7IGdlbmVyYXRlU2NyZWVuc2hvdE1hcmsgfSBmcm9tICcuLi8uLi9zY3JlZW5zaG90cy91dGlscyc7XG5cbmZ1bmN0aW9uIGluaXRSZXNpemVUb0ZpdERldmljZU9wdGlvbnMgKG5hbWUsIHZhbCkge1xuICAgIHJldHVybiBuZXcgUmVzaXplVG9GaXREZXZpY2VPcHRpb25zKHZhbCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXRFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMgKG5hbWUsIHZhbCkge1xuICAgIHJldHVybiBuZXcgRWxlbWVudFNjcmVlbnNob3RPcHRpb25zKHZhbCwgdHJ1ZSk7XG59XG5cbi8vIENvbW1hbmRzXG5jbGFzcyBUYWtlU2NyZWVuc2hvdEJhc2VDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4sIHR5cGUpIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCB0eXBlKTtcblxuICAgICAgICB0aGlzLm1hcmtTZWVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXJrRGF0YSA9ICcnO1xuICAgIH1cblxuICAgIGdlbmVyYXRlU2NyZWVuc2hvdE1hcmsgKCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGdlbmVyYXRlU2NyZWVuc2hvdE1hcmsoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFrZVNjcmVlbnNob3RDb21tYW5kIGV4dGVuZHMgVGFrZVNjcmVlbnNob3RCYXNlQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUudGFrZVNjcmVlbnNob3QpO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdwYXRoJywgdHlwZTogc2NyZWVuc2hvdFBhdGhBcmd1bWVudCwgZGVmYXVsdFZhbHVlOiAnJyB9XG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFrZUVsZW1lbnRTY3JlZW5zaG90Q29tbWFuZCBleHRlbmRzIFRha2VTY3JlZW5zaG90QmFzZUNvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLnRha2VFbGVtZW50U2NyZWVuc2hvdCk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3NlbGVjdG9yJywgaW5pdDogaW5pdFNlbGVjdG9yLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnb3B0aW9ucycsIGluaXQ6IGluaXRFbGVtZW50U2NyZWVuc2hvdE9wdGlvbnMsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdwYXRoJywgdHlwZTogc2NyZWVuc2hvdFBhdGhBcmd1bWVudCwgZGVmYXVsdFZhbHVlOiAnJyB9XG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFrZVNjcmVlbnNob3RPbkZhaWxDb21tYW5kIGV4dGVuZHMgVGFrZVNjcmVlbnNob3RCYXNlQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUudGFrZVNjcmVlbnNob3RPbkZhaWwpO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNpemVXaW5kb3dDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLnJlc2l6ZVdpbmRvdyk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3dpZHRoJywgdHlwZTogcG9zaXRpdmVJbnRlZ2VyQXJndW1lbnQsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdoZWlnaHQnLCB0eXBlOiBwb3NpdGl2ZUludGVnZXJBcmd1bWVudCwgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5yZXNpemVXaW5kb3dUb0ZpdERldmljZSk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ2RldmljZScsIHR5cGU6IHJlc2l6ZVdpbmRvd0RldmljZUFyZ3VtZW50LCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnb3B0aW9ucycsIHR5cGU6IGFjdGlvbk9wdGlvbnMsIGluaXQ6IGluaXRSZXNpemVUb0ZpdERldmljZU9wdGlvbnMsIHJlcXVpcmVkOiB0cnVlIH1cbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNYXhpbWl6ZVdpbmRvd0NvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS5tYXhpbWl6ZVdpbmRvdztcbiAgICB9XG59XG4iXX0=
