'use strict';

exports.__esModule = true;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

exports.default = {
    click: 'click',
    rightClick: 'right-click',
    doubleClick: 'double-click',
    drag: 'drag',
    dragToElement: 'drag-to-element',
    hover: 'hover',
    typeText: 'type-text',
    selectText: 'select-text',
    selectTextAreaContent: 'select-text-area-content',
    selectEditableContent: 'select-editable-content',
    pressKey: 'press-key',
    wait: 'wait',
    navigateTo: 'navigate-to',
    setFilesToUpload: 'set-files-to-upload',
    clearUpload: 'clear-upload',
    executeClientFunction: 'execute-client-function',
    executeSelector: 'execute-selector',
    takeScreenshot: 'take-screenshot',
    takeElementScreenshot: 'take-element-screenshot',
    takeScreenshotOnFail: 'take-screenshot-on-fail',
    prepareBrowserManipulation: 'prepare-browser-manipulation',
    showAssertionRetriesStatus: 'show-assertion-retries-status',
    hideAssertionRetriesStatus: 'hide-assertion-retries-status',
    setBreakpoint: 'set-breakpoint',
    resizeWindow: 'resize-window',
    resizeWindowToFitDevice: 'resize-window-to-fit-device',
    maximizeWindow: 'maximize-window',
    switchToIframe: 'switch-to-iframe',
    switchToMainWindow: 'switch-to-main-window',
    setNativeDialogHandler: 'set-native-dialog-handler',
    getNativeDialogHistory: 'get-native-dialog-history',
    getBrowserConsoleMessages: 'get-browser-console-messages',
    setTestSpeed: 'set-test-speed',
    setPageLoadTimeout: 'set-page-load-timeout',
    debug: 'debug',
    assertion: 'assertion',
    useRole: 'useRole',
    testDone: 'test-done',
    backupStorages: 'backup-storages',
    executeExpression: 'execute-expression',
    unlockPage: 'unlock-page'
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy90eXBlLmpzIl0sIm5hbWVzIjpbImNsaWNrIiwicmlnaHRDbGljayIsImRvdWJsZUNsaWNrIiwiZHJhZyIsImRyYWdUb0VsZW1lbnQiLCJob3ZlciIsInR5cGVUZXh0Iiwic2VsZWN0VGV4dCIsInNlbGVjdFRleHRBcmVhQ29udGVudCIsInNlbGVjdEVkaXRhYmxlQ29udGVudCIsInByZXNzS2V5Iiwid2FpdCIsIm5hdmlnYXRlVG8iLCJzZXRGaWxlc1RvVXBsb2FkIiwiY2xlYXJVcGxvYWQiLCJleGVjdXRlQ2xpZW50RnVuY3Rpb24iLCJleGVjdXRlU2VsZWN0b3IiLCJ0YWtlU2NyZWVuc2hvdCIsInRha2VFbGVtZW50U2NyZWVuc2hvdCIsInRha2VTY3JlZW5zaG90T25GYWlsIiwicHJlcGFyZUJyb3dzZXJNYW5pcHVsYXRpb24iLCJzaG93QXNzZXJ0aW9uUmV0cmllc1N0YXR1cyIsImhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzIiwic2V0QnJlYWtwb2ludCIsInJlc2l6ZVdpbmRvdyIsInJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlIiwibWF4aW1pemVXaW5kb3ciLCJzd2l0Y2hUb0lmcmFtZSIsInN3aXRjaFRvTWFpbldpbmRvdyIsInNldE5hdGl2ZURpYWxvZ0hhbmRsZXIiLCJnZXROYXRpdmVEaWFsb2dIaXN0b3J5IiwiZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlcyIsInNldFRlc3RTcGVlZCIsInNldFBhZ2VMb2FkVGltZW91dCIsImRlYnVnIiwiYXNzZXJ0aW9uIiwidXNlUm9sZSIsInRlc3REb25lIiwiYmFja3VwU3RvcmFnZXMiLCJleGVjdXRlRXhwcmVzc2lvbiIsInVubG9ja1BhZ2UiXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztrQkFFZTtBQUNYQSxXQUE0QixPQURqQjtBQUVYQyxnQkFBNEIsYUFGakI7QUFHWEMsaUJBQTRCLGNBSGpCO0FBSVhDLFVBQTRCLE1BSmpCO0FBS1hDLG1CQUE0QixpQkFMakI7QUFNWEMsV0FBNEIsT0FOakI7QUFPWEMsY0FBNEIsV0FQakI7QUFRWEMsZ0JBQTRCLGFBUmpCO0FBU1hDLDJCQUE0QiwwQkFUakI7QUFVWEMsMkJBQTRCLHlCQVZqQjtBQVdYQyxjQUE0QixXQVhqQjtBQVlYQyxVQUE0QixNQVpqQjtBQWFYQyxnQkFBNEIsYUFiakI7QUFjWEMsc0JBQTRCLHFCQWRqQjtBQWVYQyxpQkFBNEIsY0FmakI7QUFnQlhDLDJCQUE0Qix5QkFoQmpCO0FBaUJYQyxxQkFBNEIsa0JBakJqQjtBQWtCWEMsb0JBQTRCLGlCQWxCakI7QUFtQlhDLDJCQUE0Qix5QkFuQmpCO0FBb0JYQywwQkFBNEIseUJBcEJqQjtBQXFCWEMsZ0NBQTRCLDhCQXJCakI7QUFzQlhDLGdDQUE0QiwrQkF0QmpCO0FBdUJYQyxnQ0FBNEIsK0JBdkJqQjtBQXdCWEMsbUJBQTRCLGdCQXhCakI7QUF5QlhDLGtCQUE0QixlQXpCakI7QUEwQlhDLDZCQUE0Qiw2QkExQmpCO0FBMkJYQyxvQkFBNEIsaUJBM0JqQjtBQTRCWEMsb0JBQTRCLGtCQTVCakI7QUE2QlhDLHdCQUE0Qix1QkE3QmpCO0FBOEJYQyw0QkFBNEIsMkJBOUJqQjtBQStCWEMsNEJBQTRCLDJCQS9CakI7QUFnQ1hDLCtCQUE0Qiw4QkFoQ2pCO0FBaUNYQyxrQkFBNEIsZ0JBakNqQjtBQWtDWEMsd0JBQTRCLHVCQWxDakI7QUFtQ1hDLFdBQTRCLE9BbkNqQjtBQW9DWEMsZUFBNEIsV0FwQ2pCO0FBcUNYQyxhQUE0QixTQXJDakI7QUFzQ1hDLGNBQTRCLFdBdENqQjtBQXVDWEMsb0JBQTRCLGlCQXZDakI7QUF3Q1hDLHVCQUE0QixvQkF4Q2pCO0FBeUNYQyxnQkFBNEI7QUF6Q2pCLEMiLCJmaWxlIjoidGVzdC1ydW4vY29tbWFuZHMvdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFdBUk5JTkc6IHRoaXMgZmlsZSBpcyB1c2VkIGJ5IGJvdGggdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlci5cbi8vIERvIG5vdCB1c2UgYW55IGJyb3dzZXIgb3Igbm9kZS1zcGVjaWZpYyBBUEkhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjbGljazogICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICByaWdodENsaWNrOiAgICAgICAgICAgICAgICAgJ3JpZ2h0LWNsaWNrJyxcbiAgICBkb3VibGVDbGljazogICAgICAgICAgICAgICAgJ2RvdWJsZS1jbGljaycsXG4gICAgZHJhZzogICAgICAgICAgICAgICAgICAgICAgICdkcmFnJyxcbiAgICBkcmFnVG9FbGVtZW50OiAgICAgICAgICAgICAgJ2RyYWctdG8tZWxlbWVudCcsXG4gICAgaG92ZXI6ICAgICAgICAgICAgICAgICAgICAgICdob3ZlcicsXG4gICAgdHlwZVRleHQ6ICAgICAgICAgICAgICAgICAgICd0eXBlLXRleHQnLFxuICAgIHNlbGVjdFRleHQ6ICAgICAgICAgICAgICAgICAnc2VsZWN0LXRleHQnLFxuICAgIHNlbGVjdFRleHRBcmVhQ29udGVudDogICAgICAnc2VsZWN0LXRleHQtYXJlYS1jb250ZW50JyxcbiAgICBzZWxlY3RFZGl0YWJsZUNvbnRlbnQ6ICAgICAgJ3NlbGVjdC1lZGl0YWJsZS1jb250ZW50JyxcbiAgICBwcmVzc0tleTogICAgICAgICAgICAgICAgICAgJ3ByZXNzLWtleScsXG4gICAgd2FpdDogICAgICAgICAgICAgICAgICAgICAgICd3YWl0JyxcbiAgICBuYXZpZ2F0ZVRvOiAgICAgICAgICAgICAgICAgJ25hdmlnYXRlLXRvJyxcbiAgICBzZXRGaWxlc1RvVXBsb2FkOiAgICAgICAgICAgJ3NldC1maWxlcy10by11cGxvYWQnLFxuICAgIGNsZWFyVXBsb2FkOiAgICAgICAgICAgICAgICAnY2xlYXItdXBsb2FkJyxcbiAgICBleGVjdXRlQ2xpZW50RnVuY3Rpb246ICAgICAgJ2V4ZWN1dGUtY2xpZW50LWZ1bmN0aW9uJyxcbiAgICBleGVjdXRlU2VsZWN0b3I6ICAgICAgICAgICAgJ2V4ZWN1dGUtc2VsZWN0b3InLFxuICAgIHRha2VTY3JlZW5zaG90OiAgICAgICAgICAgICAndGFrZS1zY3JlZW5zaG90JyxcbiAgICB0YWtlRWxlbWVudFNjcmVlbnNob3Q6ICAgICAgJ3Rha2UtZWxlbWVudC1zY3JlZW5zaG90JyxcbiAgICB0YWtlU2NyZWVuc2hvdE9uRmFpbDogICAgICAgJ3Rha2Utc2NyZWVuc2hvdC1vbi1mYWlsJyxcbiAgICBwcmVwYXJlQnJvd3Nlck1hbmlwdWxhdGlvbjogJ3ByZXBhcmUtYnJvd3Nlci1tYW5pcHVsYXRpb24nLFxuICAgIHNob3dBc3NlcnRpb25SZXRyaWVzU3RhdHVzOiAnc2hvdy1hc3NlcnRpb24tcmV0cmllcy1zdGF0dXMnLFxuICAgIGhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzOiAnaGlkZS1hc3NlcnRpb24tcmV0cmllcy1zdGF0dXMnLFxuICAgIHNldEJyZWFrcG9pbnQ6ICAgICAgICAgICAgICAnc2V0LWJyZWFrcG9pbnQnLFxuICAgIHJlc2l6ZVdpbmRvdzogICAgICAgICAgICAgICAncmVzaXplLXdpbmRvdycsXG4gICAgcmVzaXplV2luZG93VG9GaXREZXZpY2U6ICAgICdyZXNpemUtd2luZG93LXRvLWZpdC1kZXZpY2UnLFxuICAgIG1heGltaXplV2luZG93OiAgICAgICAgICAgICAnbWF4aW1pemUtd2luZG93JyxcbiAgICBzd2l0Y2hUb0lmcmFtZTogICAgICAgICAgICAgJ3N3aXRjaC10by1pZnJhbWUnLFxuICAgIHN3aXRjaFRvTWFpbldpbmRvdzogICAgICAgICAnc3dpdGNoLXRvLW1haW4td2luZG93JyxcbiAgICBzZXROYXRpdmVEaWFsb2dIYW5kbGVyOiAgICAgJ3NldC1uYXRpdmUtZGlhbG9nLWhhbmRsZXInLFxuICAgIGdldE5hdGl2ZURpYWxvZ0hpc3Rvcnk6ICAgICAnZ2V0LW5hdGl2ZS1kaWFsb2ctaGlzdG9yeScsXG4gICAgZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlczogICdnZXQtYnJvd3Nlci1jb25zb2xlLW1lc3NhZ2VzJyxcbiAgICBzZXRUZXN0U3BlZWQ6ICAgICAgICAgICAgICAgJ3NldC10ZXN0LXNwZWVkJyxcbiAgICBzZXRQYWdlTG9hZFRpbWVvdXQ6ICAgICAgICAgJ3NldC1wYWdlLWxvYWQtdGltZW91dCcsXG4gICAgZGVidWc6ICAgICAgICAgICAgICAgICAgICAgICdkZWJ1ZycsXG4gICAgYXNzZXJ0aW9uOiAgICAgICAgICAgICAgICAgICdhc3NlcnRpb24nLFxuICAgIHVzZVJvbGU6ICAgICAgICAgICAgICAgICAgICAndXNlUm9sZScsXG4gICAgdGVzdERvbmU6ICAgICAgICAgICAgICAgICAgICd0ZXN0LWRvbmUnLFxuICAgIGJhY2t1cFN0b3JhZ2VzOiAgICAgICAgICAgICAnYmFja3VwLXN0b3JhZ2VzJyxcbiAgICBleGVjdXRlRXhwcmVzc2lvbjogICAgICAgICAgJ2V4ZWN1dGUtZXhwcmVzc2lvbicsXG4gICAgdW5sb2NrUGFnZTogICAgICAgICAgICAgICAgICd1bmxvY2stcGFnZSdcbn07XG4iXX0=
