'use strict';

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _unstableNetworkMode = require('../browser/connection/unstable-network-mode');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ACTIVE_SESSIONS_MAP = {};

class SessionController extends _testcafeHammerhead.Session {
    constructor(uploadsRoot) {
        super(uploadsRoot);

        this.currentTestRun = null;
    }

    // Hammerhead payload
    _getPayloadScript() {
        return this.currentTestRun._getPayloadScript();
    }

    _getIframePayloadScript() {
        return this.currentTestRun._getIframePayloadScript();
    }

    // Hammerhead handlers
    handleServiceMessage(msg, serverInfo) {
        if (this.currentTestRun[msg.cmd]) return super.handleServiceMessage.call(this.currentTestRun, msg, serverInfo);

        return super.handleServiceMessage(msg, serverInfo);
    }

    getAuthCredentials() {
        return this.currentTestRun.getAuthCredentials();
    }

    handleFileDownload() {
        return this.currentTestRun.handleFileDownload();
    }

    handlePageError(ctx, err) {
        return this.currentTestRun.handlePageError(ctx, err);
    }

    onPageRequest(ctx) {
        const pendingStateSnapshot = this.pendingStateSnapshot;

        super.onPageRequest(ctx);

        if (pendingStateSnapshot && ctx.req.headers[_unstableNetworkMode.UNSTABLE_NETWORK_MODE_HEADER]) this.pendingStateSnapshot = pendingStateSnapshot;
    }
    // API
    static getSession(testRun) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || !testRun.disablePageReloads) {
            if (sessionInfo && sessionInfo.url) SessionController.closeSession(testRun);

            let session = null;

            if (testRun.test.isLegacy) session = testRun;else {
                session = new SessionController(_path2.default.dirname(testRun.test.fixture.path));

                session.currentTestRun = testRun;
            }

            sessionInfo = {
                session: session,
                proxy: null,
                url: null
            };

            ACTIVE_SESSIONS_MAP[testRun.browserConnection.id] = sessionInfo;
        } else if (!testRun.test.isLegacy) sessionInfo.session.currentTestRun = testRun;

        return sessionInfo.session;
    }

    static getSessionUrl(testRun, proxy) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || testRun.test.isLegacy) {
            SessionController.getSession(testRun);

            sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        }

        if (!sessionInfo.url) {
            const pageUrl = testRun.test.pageUrl;
            const externalProxyHost = testRun.opts.proxy;
            let externalProxySettings = null;

            if (externalProxyHost) {
                externalProxySettings = {
                    url: externalProxyHost,
                    bypassRules: testRun.opts.proxyBypass
                };
            }

            sessionInfo.proxy = proxy;
            sessionInfo.url = proxy.openSession(pageUrl, sessionInfo.session, externalProxySettings);
        }

        return sessionInfo.url;
    }

    static closeSession(testRun) {
        const sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];

        if (!sessionInfo || !sessionInfo.url || !sessionInfo.proxy) return;

        sessionInfo.proxy.closeSession(sessionInfo.session);

        delete ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
    }
}
exports.default = SessionController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0LXJ1bi9zZXNzaW9uLWNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiQUNUSVZFX1NFU1NJT05TX01BUCIsIlNlc3Npb25Db250cm9sbGVyIiwiU2Vzc2lvbiIsImNvbnN0cnVjdG9yIiwidXBsb2Fkc1Jvb3QiLCJjdXJyZW50VGVzdFJ1biIsIl9nZXRQYXlsb2FkU2NyaXB0IiwiX2dldElmcmFtZVBheWxvYWRTY3JpcHQiLCJoYW5kbGVTZXJ2aWNlTWVzc2FnZSIsIm1zZyIsInNlcnZlckluZm8iLCJjbWQiLCJjYWxsIiwiZ2V0QXV0aENyZWRlbnRpYWxzIiwiaGFuZGxlRmlsZURvd25sb2FkIiwiaGFuZGxlUGFnZUVycm9yIiwiY3R4IiwiZXJyIiwib25QYWdlUmVxdWVzdCIsInBlbmRpbmdTdGF0ZVNuYXBzaG90IiwicmVxIiwiaGVhZGVycyIsIlVOU1RBQkxFX05FVFdPUktfTU9ERV9IRUFERVIiLCJnZXRTZXNzaW9uIiwidGVzdFJ1biIsInNlc3Npb25JbmZvIiwiYnJvd3NlckNvbm5lY3Rpb24iLCJpZCIsImRpc2FibGVQYWdlUmVsb2FkcyIsInVybCIsImNsb3NlU2Vzc2lvbiIsInNlc3Npb24iLCJ0ZXN0IiwiaXNMZWdhY3kiLCJwYXRoIiwiZGlybmFtZSIsImZpeHR1cmUiLCJwcm94eSIsImdldFNlc3Npb25VcmwiLCJwYWdlVXJsIiwiZXh0ZXJuYWxQcm94eUhvc3QiLCJvcHRzIiwiZXh0ZXJuYWxQcm94eVNldHRpbmdzIiwiYnlwYXNzUnVsZXMiLCJwcm94eUJ5cGFzcyIsIm9wZW5TZXNzaW9uIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7OztBQUdBLE1BQU1BLHNCQUFzQixFQUE1Qjs7QUFFZSxNQUFNQyxpQkFBTixTQUFnQ0MsMkJBQWhDLENBQXdDO0FBQ25EQyxnQkFBYUMsV0FBYixFQUEwQjtBQUN0QixjQUFNQSxXQUFOOztBQUVBLGFBQUtDLGNBQUwsR0FBc0IsSUFBdEI7QUFDSDs7QUFF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QUNBLGtCQUFNQyxvQkFBc0JoQixRQUFRaUIsSUFBUixDQUFhSixLQUF6QztBQUNBLGdCQUFJSyx3QkFBd0IsSUFBNUI7O0FBRUEsZ0JBQUlGLGlCQUFKLEVBQXVCO0FBQ25CRSx3Q0FBd0I7QUFDcEJiLHlCQUFhVyxpQkFETztBQUVwQkcsaUNBQWFuQixRQUFRaUIsSUFBUixDQUFhRztBQUZOLGlCQUF4QjtBQUlIOztBQUVEbkIsd0JBQVlZLEtBQVosR0FBb0JBLEtBQXBCO0FBQ0FaLHdCQUFZSSxHQUFaLEdBQW9CUSxNQUFNUSxXQUFOLENBQWtCTixPQUFsQixFQUEyQmQsWUFBWU0sT0FBdkMsRUFBZ0RXLHFCQUFoRCxDQUFwQjtBQUNIOztBQUVELGVBQU9qQixZQUFZSSxHQUFuQjtBQUNIOztBQUVELFdBQU9DLFlBQVAsQ0FBcUJOLE9BQXJCLEVBQThCO0FBQzFCLGNBQU1DLGNBQWN6QixvQkFBb0J3QixRQUFRRSxpQkFBUixDQUEwQkMsRUFBOUMsQ0FBcEI7O0FBRUEsWUFBSSxDQUFDRixXQUFELElBQWdCLENBQUNBLFlBQVlJLEdBQTdCLElBQW9DLENBQUNKLFlBQVlZLEtBQXJELEVBQ0k7O0FBRUpaLG9CQUFZWSxLQUFaLENBQWtCUCxZQUFsQixDQUErQkwsWUFBWU0sT0FBM0M7O0FBRUEsZUFBTy9CLG9CQUFvQndCLFFBQVFFLGlCQUFSLENBQTBCQyxFQUE5QyxDQUFQO0FBQ0g7QUFsSGtEO2tCQUFsQzFCLGlCIiwiZmlsZSI6InRlc3QtcnVuL3Nlc3Npb24tY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IHsgVU5TVEFCTEVfTkVUV09SS19NT0RFX0hFQURFUiB9IGZyb20gJy4uL2Jyb3dzZXIvY29ubmVjdGlvbi91bnN0YWJsZS1uZXR3b3JrLW1vZGUnO1xuXG5cbmNvbnN0IEFDVElWRV9TRVNTSU9OU19NQVAgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Vzc2lvbkNvbnRyb2xsZXIgZXh0ZW5kcyBTZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvciAodXBsb2Fkc1Jvb3QpIHtcbiAgICAgICAgc3VwZXIodXBsb2Fkc1Jvb3QpO1xuXG4gICAgICAgIHRoaXMuY3VycmVudFRlc3RSdW4gPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEhhbW1lcmhlYWQgcGF5bG9hZFxuICAgIF9nZXRQYXlsb2FkU2NyaXB0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRlc3RSdW4uX2dldFBheWxvYWRTY3JpcHQoKTtcbiAgICB9XG5cbiAgICBfZ2V0SWZyYW1lUGF5bG9hZFNjcmlwdCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUZXN0UnVuLl9nZXRJZnJhbWVQYXlsb2FkU2NyaXB0KCk7XG4gICAgfVxuXG5cbiAgICAvLyBIYW1tZXJoZWFkIGhhbmRsZXJzXG4gICAgaGFuZGxlU2VydmljZU1lc3NhZ2UgKG1zZywgc2VydmVySW5mbykge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50VGVzdFJ1blttc2cuY21kXSlcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5oYW5kbGVTZXJ2aWNlTWVzc2FnZS5jYWxsKHRoaXMuY3VycmVudFRlc3RSdW4sIG1zZywgc2VydmVySW5mbyk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmhhbmRsZVNlcnZpY2VNZXNzYWdlKG1zZywgc2VydmVySW5mbyk7XG4gICAgfVxuXG4gICAgZ2V0QXV0aENyZWRlbnRpYWxzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRlc3RSdW4uZ2V0QXV0aENyZWRlbnRpYWxzKCk7XG4gICAgfVxuXG4gICAgaGFuZGxlRmlsZURvd25sb2FkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRlc3RSdW4uaGFuZGxlRmlsZURvd25sb2FkKCk7XG4gICAgfVxuXG4gICAgaGFuZGxlUGFnZUVycm9yIChjdHgsIGVycikge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGVzdFJ1bi5oYW5kbGVQYWdlRXJyb3IoY3R4LCBlcnIpO1xuICAgIH1cblxuICAgIG9uUGFnZVJlcXVlc3QgKGN0eCkge1xuICAgICAgICBjb25zdCBwZW5kaW5nU3RhdGVTbmFwc2hvdCA9IHRoaXMucGVuZGluZ1N0YXRlU25hcHNob3Q7XG5cbiAgICAgICAgc3VwZXIub25QYWdlUmVxdWVzdChjdHgpO1xuXG4gICAgICAgIGlmIChwZW5kaW5nU3RhdGVTbmFwc2hvdCAmJiBjdHgucmVxLmhlYWRlcnNbVU5TVEFCTEVfTkVUV09SS19NT0RFX0hFQURFUl0pXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdTdGF0ZVNuYXBzaG90ID0gcGVuZGluZ1N0YXRlU25hcHNob3Q7XG4gICAgfVxuICAgIC8vIEFQSVxuICAgIHN0YXRpYyBnZXRTZXNzaW9uICh0ZXN0UnVuKSB7XG4gICAgICAgIGxldCBzZXNzaW9uSW5mbyA9IEFDVElWRV9TRVNTSU9OU19NQVBbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF07XG5cbiAgICAgICAgaWYgKCFzZXNzaW9uSW5mbyB8fCAhdGVzdFJ1bi5kaXNhYmxlUGFnZVJlbG9hZHMpIHtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uSW5mbyAmJiBzZXNzaW9uSW5mby51cmwpXG4gICAgICAgICAgICAgICAgU2Vzc2lvbkNvbnRyb2xsZXIuY2xvc2VTZXNzaW9uKHRlc3RSdW4pO1xuXG4gICAgICAgICAgICBsZXQgc2Vzc2lvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0ZXN0UnVuLnRlc3QuaXNMZWdhY3kpXG4gICAgICAgICAgICAgICAgc2Vzc2lvbiA9IHRlc3RSdW47XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uID0gbmV3IFNlc3Npb25Db250cm9sbGVyKHBhdGguZGlybmFtZSh0ZXN0UnVuLnRlc3QuZml4dHVyZS5wYXRoKSk7XG5cbiAgICAgICAgICAgICAgICBzZXNzaW9uLmN1cnJlbnRUZXN0UnVuID0gdGVzdFJ1bjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2Vzc2lvbkluZm8gPSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbjogc2Vzc2lvbixcbiAgICAgICAgICAgICAgICBwcm94eTogICBudWxsLFxuICAgICAgICAgICAgICAgIHVybDogICAgIG51bGxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEFDVElWRV9TRVNTSU9OU19NQVBbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF0gPSBzZXNzaW9uSW5mbztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGVzdFJ1bi50ZXN0LmlzTGVnYWN5KVxuICAgICAgICAgICAgc2Vzc2lvbkluZm8uc2Vzc2lvbi5jdXJyZW50VGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgICAgICAgcmV0dXJuIHNlc3Npb25JbmZvLnNlc3Npb247XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNlc3Npb25VcmwgKHRlc3RSdW4sIHByb3h5KSB7XG4gICAgICAgIGxldCBzZXNzaW9uSW5mbyA9IEFDVElWRV9TRVNTSU9OU19NQVBbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF07XG5cbiAgICAgICAgaWYgKCFzZXNzaW9uSW5mbyB8fCB0ZXN0UnVuLnRlc3QuaXNMZWdhY3kpIHtcbiAgICAgICAgICAgIFNlc3Npb25Db250cm9sbGVyLmdldFNlc3Npb24odGVzdFJ1bik7XG5cbiAgICAgICAgICAgIHNlc3Npb25JbmZvID0gQUNUSVZFX1NFU1NJT05TX01BUFt0ZXN0UnVuLmJyb3dzZXJDb25uZWN0aW9uLmlkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2Vzc2lvbkluZm8udXJsKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlVXJsICAgICAgICAgICAgID0gdGVzdFJ1bi50ZXN0LnBhZ2VVcmw7XG4gICAgICAgICAgICBjb25zdCBleHRlcm5hbFByb3h5SG9zdCAgID0gdGVzdFJ1bi5vcHRzLnByb3h5O1xuICAgICAgICAgICAgbGV0IGV4dGVybmFsUHJveHlTZXR0aW5ncyA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChleHRlcm5hbFByb3h5SG9zdCkge1xuICAgICAgICAgICAgICAgIGV4dGVybmFsUHJveHlTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAgICAgICAgIGV4dGVybmFsUHJveHlIb3N0LFxuICAgICAgICAgICAgICAgICAgICBieXBhc3NSdWxlczogdGVzdFJ1bi5vcHRzLnByb3h5QnlwYXNzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2Vzc2lvbkluZm8ucHJveHkgPSBwcm94eTtcbiAgICAgICAgICAgIHNlc3Npb25JbmZvLnVybCAgID0gcHJveHkub3BlblNlc3Npb24ocGFnZVVybCwgc2Vzc2lvbkluZm8uc2Vzc2lvbiwgZXh0ZXJuYWxQcm94eVNldHRpbmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXNzaW9uSW5mby51cmw7XG4gICAgfVxuXG4gICAgc3RhdGljIGNsb3NlU2Vzc2lvbiAodGVzdFJ1bikge1xuICAgICAgICBjb25zdCBzZXNzaW9uSW5mbyA9IEFDVElWRV9TRVNTSU9OU19NQVBbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF07XG5cbiAgICAgICAgaWYgKCFzZXNzaW9uSW5mbyB8fCAhc2Vzc2lvbkluZm8udXJsIHx8ICFzZXNzaW9uSW5mby5wcm94eSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBzZXNzaW9uSW5mby5wcm94eS5jbG9zZVNlc3Npb24oc2Vzc2lvbkluZm8uc2Vzc2lvbik7XG5cbiAgICAgICAgZGVsZXRlIEFDVElWRV9TRVNTSU9OU19NQVBbdGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbi5pZF07XG4gICAgfVxufVxuXG4iXX0=
