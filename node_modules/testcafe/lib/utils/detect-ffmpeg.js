'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let findFFMPEGinPath = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* () {
        try {
            const ffmpegPath = yield (0, _promisifiedFunctions.exec)(`${FFMPEG_SEARCH_COMMAND} ${FFMPEG_BINARY_NAME}`);

            return ffmpegPath.trim();
        } catch (e) {
            return '';
        }
    });

    return function findFFMPEGinPath() {
        return _ref.apply(this, arguments);
    };
})();

let requireFFMPEGModuleFromCwd = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* () {
        try {
            const ffmpegModulePath = (0, _resolveCwd2.default)(FFMPEG_MODULE_NAME);

            return require(ffmpegModulePath).path;
        } catch (e) {
            return '';
        }
    });

    return function requireFFMPEGModuleFromCwd() {
        return _ref2.apply(this, arguments);
    };
})();

let requireFFMPEGModule = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* () {
        try {
            return require(FFMPEG_MODULE_NAME).path;
        } catch (e) {
            return '';
        }
    });

    return function requireFFMPEGModule() {
        return _ref3.apply(this, arguments);
    };
})();

var _osFamily = require('os-family');

var _resolveCwd = require('resolve-cwd');

var _resolveCwd2 = _interopRequireDefault(_resolveCwd);

var _promisifiedFunctions = require('./promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FFMPEG_MODULE_NAME = '@ffmpeg-installer/ffmpeg';
const FFMPEG_SEARCH_COMMAND = _osFamily.isWin ? 'where' : 'which';
const FFMPEG_BINARY_NAME = 'ffmpeg';

exports.default = (0, _asyncToGenerator3.default)(function* () {
    return process.env.FFMPEG_PATH || (yield requireFFMPEGModuleFromCwd()) || (yield requireFFMPEGModule()) || (yield findFFMPEGinPath());
});
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZXRlY3QtZmZtcGVnLmpzIl0sIm5hbWVzIjpbImZmbXBlZ1BhdGgiLCJGRk1QRUdfU0VBUkNIX0NPTU1BTkQiLCJGRk1QRUdfQklOQVJZX05BTUUiLCJ0cmltIiwiZSIsImZpbmRGRk1QRUdpblBhdGgiLCJmZm1wZWdNb2R1bGVQYXRoIiwiRkZNUEVHX01PRFVMRV9OQU1FIiwicmVxdWlyZSIsInBhdGgiLCJyZXF1aXJlRkZNUEVHTW9kdWxlRnJvbUN3ZCIsInJlcXVpcmVGRk1QRUdNb2R1bGUiLCJpc1dpbiIsInByb2Nlc3MiLCJlbnYiLCJGRk1QRUdfUEFUSCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OytDQVFBLGFBQW1DO0FBQy9CLFlBQUk7QUFDQSxrQkFBTUEsYUFBYSxNQUFNLGdDQUFNLEdBQUVDLHFCQUFzQixJQUFHQyxrQkFBbUIsRUFBcEQsQ0FBekI7O0FBRUEsbUJBQU9GLFdBQVdHLElBQVgsRUFBUDtBQUNILFNBSkQsQ0FLQSxPQUFPQyxDQUFQLEVBQVU7QUFDTixtQkFBTyxFQUFQO0FBQ0g7QUFDSixLOztvQkFUY0MsZ0I7Ozs7OztnREFXZixhQUE2QztBQUN6QyxZQUFJO0FBQ0Esa0JBQU1DLG1CQUFtQiwwQkFBV0Msa0JBQVgsQ0FBekI7O0FBRUEsbUJBQU9DLFFBQVFGLGdCQUFSLEVBQTBCRyxJQUFqQztBQUNILFNBSkQsQ0FLQSxPQUFPTCxDQUFQLEVBQVU7QUFDTixtQkFBTyxFQUFQO0FBQ0g7QUFDSixLOztvQkFUY00sMEI7Ozs7OztnREFXZixhQUFzQztBQUNsQyxZQUFJO0FBQ0EsbUJBQU9GLFFBQVFELGtCQUFSLEVBQTRCRSxJQUFuQztBQUNILFNBRkQsQ0FHQSxPQUFPTCxDQUFQLEVBQVU7QUFDTixtQkFBTyxFQUFQO0FBQ0g7QUFDSixLOztvQkFQY08sbUI7Ozs7O0FBOUJmOztBQUNBOzs7O0FBQ0E7Ozs7QUFFQSxNQUFNSixxQkFBd0IsMEJBQTlCO0FBQ0EsTUFBTU4sd0JBQXdCVyxrQkFBUSxPQUFSLEdBQWtCLE9BQWhEO0FBQ0EsTUFBTVYscUJBQXdCLFFBQTlCOztrREFpQ2UsYUFBa0I7QUFDN0IsV0FBT1csUUFBUUMsR0FBUixDQUFZQyxXQUFaLEtBQ0gsTUFBTUwsNEJBREgsTUFFSCxNQUFNQyxxQkFGSCxNQUdILE1BQU1OLGtCQUhILENBQVA7QUFJSCxDIiwiZmlsZSI6InV0aWxzL2RldGVjdC1mZm1wZWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1dpbiB9IGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgcmVzb2x2ZUN3ZCBmcm9tICdyZXNvbHZlLWN3ZCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnLi9wcm9taXNpZmllZC1mdW5jdGlvbnMnO1xuXG5jb25zdCBGRk1QRUdfTU9EVUxFX05BTUUgICAgPSAnQGZmbXBlZy1pbnN0YWxsZXIvZmZtcGVnJztcbmNvbnN0IEZGTVBFR19TRUFSQ0hfQ09NTUFORCA9IGlzV2luID8gJ3doZXJlJyA6ICd3aGljaCc7XG5jb25zdCBGRk1QRUdfQklOQVJZX05BTUUgICAgPSAnZmZtcGVnJztcblxuYXN5bmMgZnVuY3Rpb24gZmluZEZGTVBFR2luUGF0aCAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmZtcGVnUGF0aCA9IGF3YWl0IGV4ZWMoYCR7RkZNUEVHX1NFQVJDSF9DT01NQU5EfSAke0ZGTVBFR19CSU5BUllfTkFNRX1gKTtcblxuICAgICAgICByZXR1cm4gZmZtcGVnUGF0aC50cmltKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlcXVpcmVGRk1QRUdNb2R1bGVGcm9tQ3dkICgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBmZm1wZWdNb2R1bGVQYXRoID0gcmVzb2x2ZUN3ZChGRk1QRUdfTU9EVUxFX05BTUUpO1xuXG4gICAgICAgIHJldHVybiByZXF1aXJlKGZmbXBlZ01vZHVsZVBhdGgpLnBhdGg7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlcXVpcmVGRk1QRUdNb2R1bGUgKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKEZGTVBFR19NT0RVTEVfTkFNRSkucGF0aDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5GRk1QRUdfUEFUSCB8fFxuICAgICAgICBhd2FpdCByZXF1aXJlRkZNUEVHTW9kdWxlRnJvbUN3ZCgpIHx8XG4gICAgICAgIGF3YWl0IHJlcXVpcmVGRk1QRUdNb2R1bGUoKSB8fFxuICAgICAgICBhd2FpdCBmaW5kRkZNUEVHaW5QYXRoKCk7XG59XG4iXX0=
