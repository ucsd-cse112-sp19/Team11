'use strict';

exports.__esModule = true;

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _convertToBestFitType = require('../convert-to-best-fit-type');

var _convertToBestFitType2 = _interopRequireDefault(_convertToBestFitType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_OPTIONS_SEPARATOR = ',';
const DEFAULT_KEY_VALUE_SEPARATOR = '=';

function convertOptionValueType(value) {
    // NOTE: threat a key without a separator and a value as a boolean flag
    if (value === void 0) return true;

    return (0, _convertToBestFitType2.default)(value);
}

function parseOptionsString(optionsStr, optionsSeparator, keyValueSeparator) {
    return optionsStr.split(optionsSeparator).map(keyValueString => keyValueString.split(keyValueSeparator)).map(([key, ...value]) => [key, value.length > 1 ? value.join(keyValueSeparator) : value[0]]);
}

exports.default = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (sourceOptions = '', optionsConfig) {
        var _optionsConfig$option = optionsConfig.optionsSeparator;
        const optionsSeparator = _optionsConfig$option === undefined ? DEFAULT_OPTIONS_SEPARATOR : _optionsConfig$option;
        var _optionsConfig$keyVal = optionsConfig.keyValueSeparator;
        const keyValueSeparator = _optionsConfig$keyVal === undefined ? DEFAULT_KEY_VALUE_SEPARATOR : _optionsConfig$keyVal;
        var _optionsConfig$skipOp = optionsConfig.skipOptionValueTypeConversion;
        const skipOptionValueTypeConversion = _optionsConfig$skipOp === undefined ? false : _optionsConfig$skipOp;
        var _optionsConfig$onOpti = optionsConfig.onOptionParsed;
        const onOptionParsed = _optionsConfig$onOpti === undefined ? void 0 : _optionsConfig$onOpti;


        const optionsList = typeof sourceOptions === 'string' ? parseOptionsString(sourceOptions, optionsSeparator, keyValueSeparator) : (0, _entries2.default)(sourceOptions);

        const resultOptions = {};

        yield _pinkie2.default.all(optionsList.map((() => {
            var _ref2 = (0, _asyncToGenerator3.default)(function* ([key, value]) {
                if (!skipOptionValueTypeConversion) value = convertOptionValueType(value);

                if (onOptionParsed) value = yield onOptionParsed(key, value);

                resultOptions[key] = value;
            });

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        })()));

        return resultOptions;
    });

    return function () {
        return _ref.apply(this, arguments);
    };
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9nZXQtb3B0aW9ucy9iYXNlLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IiLCJERUZBVUxUX0tFWV9WQUxVRV9TRVBBUkFUT1IiLCJjb252ZXJ0T3B0aW9uVmFsdWVUeXBlIiwidmFsdWUiLCJwYXJzZU9wdGlvbnNTdHJpbmciLCJvcHRpb25zU3RyIiwib3B0aW9uc1NlcGFyYXRvciIsImtleVZhbHVlU2VwYXJhdG9yIiwic3BsaXQiLCJtYXAiLCJrZXlWYWx1ZVN0cmluZyIsImtleSIsImxlbmd0aCIsImpvaW4iLCJzb3VyY2VPcHRpb25zIiwib3B0aW9uc0NvbmZpZyIsInNraXBPcHRpb25WYWx1ZVR5cGVDb252ZXJzaW9uIiwib25PcHRpb25QYXJzZWQiLCJvcHRpb25zTGlzdCIsInJlc3VsdE9wdGlvbnMiLCJQcm9taXNlIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFHQSxNQUFNQSw0QkFBOEIsR0FBcEM7QUFDQSxNQUFNQyw4QkFBOEIsR0FBcEM7O0FBR0EsU0FBU0Msc0JBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDO0FBQ3BDO0FBQ0EsUUFBSUEsVUFBVSxLQUFLLENBQW5CLEVBQ0ksT0FBTyxJQUFQOztBQUVKLFdBQU8sb0NBQXFCQSxLQUFyQixDQUFQO0FBQ0g7O0FBRUQsU0FBU0Msa0JBQVQsQ0FBNkJDLFVBQTdCLEVBQXlDQyxnQkFBekMsRUFBMkRDLGlCQUEzRCxFQUE4RTtBQUMxRSxXQUFPRixXQUNGRyxLQURFLENBQ0lGLGdCQURKLEVBRUZHLEdBRkUsQ0FFRUMsa0JBQWtCQSxlQUFlRixLQUFmLENBQXFCRCxpQkFBckIsQ0FGcEIsRUFHRkUsR0FIRSxDQUdFLENBQUMsQ0FBQ0UsR0FBRCxFQUFNLEdBQUdSLEtBQVQsQ0FBRCxLQUFxQixDQUFDUSxHQUFELEVBQU1SLE1BQU1TLE1BQU4sR0FBZSxDQUFmLEdBQW1CVCxNQUFNVSxJQUFOLENBQVdOLGlCQUFYLENBQW5CLEdBQW1ESixNQUFNLENBQU4sQ0FBekQsQ0FIdkIsQ0FBUDtBQUlIOzs7K0NBRWMsV0FBZ0JXLGdCQUFnQixFQUFoQyxFQUFvQ0MsYUFBcEMsRUFBbUQ7QUFBQSxvQ0FNMURBLGFBTjBELENBRTFEVCxnQkFGMEQ7QUFBQSxjQUUxREEsZ0JBRjBELHlDQUV2Q04seUJBRnVDO0FBQUEsb0NBTTFEZSxhQU4wRCxDQUcxRFIsaUJBSDBEO0FBQUEsY0FHMURBLGlCQUgwRCx5Q0FHdENOLDJCQUhzQztBQUFBLG9DQU0xRGMsYUFOMEQsQ0FJMURDLDZCQUowRDtBQUFBLGNBSTFEQSw2QkFKMEQseUNBSTFCLEtBSjBCO0FBQUEsb0NBTTFERCxhQU4wRCxDQUsxREUsY0FMMEQ7QUFBQSxjQUsxREEsY0FMMEQseUNBS3pDLEtBQUssQ0FMb0M7OztBQVE5RCxjQUFNQyxjQUFjLE9BQU9KLGFBQVAsS0FBeUIsUUFBekIsR0FDaEJWLG1CQUFtQlUsYUFBbkIsRUFBa0NSLGdCQUFsQyxFQUFvREMsaUJBQXBELENBRGdCLEdBRWhCLHVCQUFlTyxhQUFmLENBRko7O0FBSUEsY0FBTUssZ0JBQWdCLEVBQXRCOztBQUVBLGNBQU1DLGlCQUFRQyxHQUFSLENBQVlILFlBQVlULEdBQVo7QUFBQSx3REFBZ0IsV0FBTyxDQUFDRSxHQUFELEVBQU1SLEtBQU4sQ0FBUCxFQUF3QjtBQUN0RCxvQkFBSSxDQUFDYSw2QkFBTCxFQUNJYixRQUFRRCx1QkFBdUJDLEtBQXZCLENBQVI7O0FBRUosb0JBQUljLGNBQUosRUFDSWQsUUFBUSxNQUFNYyxlQUFlTixHQUFmLEVBQW9CUixLQUFwQixDQUFkOztBQUVKZ0IsOEJBQWNSLEdBQWQsSUFBcUJSLEtBQXJCO0FBQ0gsYUFSaUI7O0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBWixDQUFOOztBQVVBLGVBQU9nQixhQUFQO0FBQ0gsSyIsImZpbGUiOiJ1dGlscy9nZXQtb3B0aW9ucy9iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2UgZnJvbSAncGlua2llJztcbmltcG9ydCBjb252ZXJ0VG9CZXN0Rml0VHlwZSBmcm9tICcuLi9jb252ZXJ0LXRvLWJlc3QtZml0LXR5cGUnO1xuXG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OU19TRVBBUkFUT1IgICA9ICcsJztcbmNvbnN0IERFRkFVTFRfS0VZX1ZBTFVFX1NFUEFSQVRPUiA9ICc9JztcblxuXG5mdW5jdGlvbiBjb252ZXJ0T3B0aW9uVmFsdWVUeXBlICh2YWx1ZSkge1xuICAgIC8vIE5PVEU6IHRocmVhdCBhIGtleSB3aXRob3V0IGEgc2VwYXJhdG9yIGFuZCBhIHZhbHVlIGFzIGEgYm9vbGVhbiBmbGFnXG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGNvbnZlcnRUb0Jlc3RGaXRUeXBlKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VPcHRpb25zU3RyaW5nIChvcHRpb25zU3RyLCBvcHRpb25zU2VwYXJhdG9yLCBrZXlWYWx1ZVNlcGFyYXRvcikge1xuICAgIHJldHVybiBvcHRpb25zU3RyXG4gICAgICAgIC5zcGxpdChvcHRpb25zU2VwYXJhdG9yKVxuICAgICAgICAubWFwKGtleVZhbHVlU3RyaW5nID0+IGtleVZhbHVlU3RyaW5nLnNwbGl0KGtleVZhbHVlU2VwYXJhdG9yKSlcbiAgICAgICAgLm1hcCgoW2tleSwgLi4udmFsdWVdKSA9PiBba2V5LCB2YWx1ZS5sZW5ndGggPiAxID8gdmFsdWUuam9pbihrZXlWYWx1ZVNlcGFyYXRvcikgOiB2YWx1ZVswXV0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoc291cmNlT3B0aW9ucyA9ICcnLCBvcHRpb25zQ29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBvcHRpb25zU2VwYXJhdG9yID0gREVGQVVMVF9PUFRJT05TX1NFUEFSQVRPUixcbiAgICAgICAga2V5VmFsdWVTZXBhcmF0b3IgPSBERUZBVUxUX0tFWV9WQUxVRV9TRVBBUkFUT1IsXG4gICAgICAgIHNraXBPcHRpb25WYWx1ZVR5cGVDb252ZXJzaW9uID0gZmFsc2UsXG4gICAgICAgIG9uT3B0aW9uUGFyc2VkID0gdm9pZCAwLFxuICAgIH0gPSBvcHRpb25zQ29uZmlnO1xuXG4gICAgY29uc3Qgb3B0aW9uc0xpc3QgPSB0eXBlb2Ygc291cmNlT3B0aW9ucyA9PT0gJ3N0cmluZycgP1xuICAgICAgICBwYXJzZU9wdGlvbnNTdHJpbmcoc291cmNlT3B0aW9ucywgb3B0aW9uc1NlcGFyYXRvciwga2V5VmFsdWVTZXBhcmF0b3IpIDpcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoc291cmNlT3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXN1bHRPcHRpb25zID0ge307XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChvcHRpb25zTGlzdC5tYXAoYXN5bmMgKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBpZiAoIXNraXBPcHRpb25WYWx1ZVR5cGVDb252ZXJzaW9uKVxuICAgICAgICAgICAgdmFsdWUgPSBjb252ZXJ0T3B0aW9uVmFsdWVUeXBlKHZhbHVlKTtcblxuICAgICAgICBpZiAob25PcHRpb25QYXJzZWQpXG4gICAgICAgICAgICB2YWx1ZSA9IGF3YWl0IG9uT3B0aW9uUGFyc2VkKGtleSwgdmFsdWUpO1xuXG4gICAgICAgIHJlc3VsdE9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgIH0pKTtcblxuICAgIHJldHVybiByZXN1bHRPcHRpb25zO1xufVxuXG4iXX0=
