'use strict';

exports.__esModule = true;
exports.killBrowserProcess = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let findProcessUnix = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (browserId) {
        const output = yield getProcessOutputUnix();

        return findProcessIdUnix(browserId, output);
    });

    return function findProcessUnix(_x) {
        return _ref.apply(this, arguments);
    };
})();

let checkUnixProcessIsKilled = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (processId) {
        const output = yield getProcessOutputUnix();

        if (isProcessExistUnix(processId, output)) {
            yield (0, _delay2.default)(CHECK_KILLED_DELAY);

            yield checkUnixProcessIsKilled();
        }
    });

    return function checkUnixProcessIsKilled(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

let killProcessUnix = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (processId) {
        let timeoutError = false;

        process.kill(processId);

        const killTimeoutTimer = (0, _delay2.default)(CHECK_PROCESS_IS_KILLED_TIMEOUT).then(function () {
            timeoutError = true;
        });

        return _pinkie2.default.race([killTimeoutTimer, checkUnixProcessIsKilled(processId)]).then(function () {
            if (timeoutError) throw new Error(killProcessTimeoutError);
        });
    });

    return function killProcessUnix(_x3) {
        return _ref3.apply(this, arguments);
    };
})();

let runWMIC = (() => {
    var _ref4 = (0, _asyncToGenerator3.default)(function* (args) {
        const wmicProcess = (0, _child_process.spawn)('wmic.exe', args, { detached: true });

        let wmicOutput = '';

        wmicProcess.stdout.on('data', function (data) {
            wmicOutput += data.toString();
        });

        try {
            yield _pinkie2.default.race([(0, _promisifyEvent2.default)(wmicProcess.stdout, 'end'), (0, _promisifyEvent2.default)(wmicProcess, 'error')]);

            return wmicOutput;
        } catch (e) {
            return '';
        }
    });

    return function runWMIC(_x4) {
        return _ref4.apply(this, arguments);
    };
})();

let findProcessWin = (() => {
    var _ref5 = (0, _asyncToGenerator3.default)(function* (browserId) {
        const wmicArgs = ['process', 'where', `commandline like '%${browserId}%' and name <> 'cmd.exe' and name <> 'wmic.exe'`, 'get', 'processid'];
        const wmicOutput = yield runWMIC(wmicArgs);
        let processList = wmicOutput.split(/\s*\n/);

        processList = processList
        // NOTE: remove list's header and empty last element, caused by trailing newline
        .slice(1, -1).map(function (pid) {
            return { pid: Number(pid) };
        });

        return processList[0] ? processList[0].pid : null;
    });

    return function findProcessWin(_x5) {
        return _ref5.apply(this, arguments);
    };
})();

let killBrowserProcess = exports.killBrowserProcess = (() => {
    var _ref6 = (0, _asyncToGenerator3.default)(function* (browserId) {
        const processId = _osFamily2.default.win ? yield findProcessWin(browserId) : yield findProcessUnix(browserId);

        if (!processId) return true;

        try {
            if (_osFamily2.default.win) process.kill(processId);else yield killProcessUnix(processId);

            return true;
        } catch (e) {
            return false;
        }
    });

    return function killBrowserProcess(_x6) {
        return _ref6.apply(this, arguments);
    };
})();

var _child_process = require('child_process');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CHECK_PROCESS_IS_KILLED_TIMEOUT = 5000;
const CHECK_KILLED_DELAY = 1000;
const NEW_LINE_SEPERATOR_RE = /(\r\n)|(\n\r)|\n|\r/g;
const cannotGetListOfProcessError = 'Cannot get list of processes';
const killProcessTimeoutError = 'Kill process timeout';

function getProcessOutputUnix() {
    const error = new Error(cannotGetListOfProcessError);

    return new _pinkie2.default((resolve, reject) => {
        const child = (0, _child_process.spawn)('ps', ['-eo', 'pid,command']);
        let stdout = '';
        let stderr = '';

        child.stdout.on('data', data => {
            stdout += data.toString();
        });

        child.stderr.on('data', data => {
            stderr += data.toString();
        });

        child.on('exit', () => {
            if (stderr) reject(error);else resolve(stdout);
        });

        child.on('error', () => {
            reject(error);
        });
    });
}

function findProcessIdUnix(browserId, psOutput) {
    const processIdRegex = new RegExp('^\\s*(\\d+)\\s+.*' + browserId);
    const lines = psOutput.split(NEW_LINE_SEPERATOR_RE);

    for (let i = 0; i < lines.length; i++) {
        const match = processIdRegex.exec(lines[i]);

        if (match) return parseInt(match[1], 10);
    }

    return null;
}

function isProcessExistUnix(processId, psOutput) {
    const processIdRegex = new RegExp('^\\s*' + processId + '\\s+.*');
    const lines = psOutput.split(NEW_LINE_SEPERATOR_RE);

    return lines.some(line => processIdRegex.test(line));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
