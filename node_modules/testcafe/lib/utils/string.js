'use strict';

exports.__esModule = true;
exports.removeTTYColors = removeTTYColors;
exports.wordWrap = wordWrap;
exports.splitQuotedText = splitQuotedText;
exports.getPluralSuffix = getPluralSuffix;
exports.getConcatenatedValuesString = getConcatenatedValuesString;
exports.getToBeInPastTense = getToBeInPastTense;

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rtrim(str) {
    return str.replace(/\s+$/, '');
}

function removeTTYColors(str) {
    return str.replace(/\033\[[0-9;]*m/g, '');
}

function wordWrap(str, indent, width) {
    let curStr = '';
    let wrappedMsg = '';

    if (removeTTYColors(str).length <= width - indent) return (0, _indentString2.default)(str, ' ', indent);

    str = str.replace(/(\r\n)/gm, '\n').split(/(\S+[ \t]+)|(\S+(?:\n))|(\n)/m)
    //NOTE: cut empty elements
    .filter(elm => !!elm);

    str.forEach(word => {
        const newStr = curStr + word;

        if (removeTTYColors(newStr).length > width - indent) {
            wrappedMsg += `${rtrim(curStr)}\n`;
            curStr = word;
        } else {
            if (curStr[curStr.length - 1] === '\n') {
                wrappedMsg += `${rtrim(curStr)}\n`;
                curStr = '';
            }

            curStr += word;
        }
    });

    return (0, _indentString2.default)(wrappedMsg + curStr, ' ', indent);
}

function splitQuotedText(str, splitChar, quotes = '"\'') {
    let currentPart = '';
    const parts = [];
    let quoteChar = null;

    for (let i = 0; i < str.length; i++) {
        const currentChar = str[i];

        if (currentChar === splitChar) {
            if (quoteChar) currentPart += currentChar;else {
                parts.push(currentPart);
                currentPart = '';
            }
        } else if (quotes.indexOf(currentChar) > -1) {
            if (quoteChar === currentChar) quoteChar = null;else if (!quoteChar) quoteChar = currentChar;else currentPart += currentChar;
        } else currentPart += currentChar;
    }

    if (currentPart) parts.push(currentPart);

    return parts;
}

function getPluralSuffix(array) {
    return array.length > 1 ? 's' : '';
}

function getConcatenatedValuesString(array) {
    return array.map(item => `"${item}"`).join(', ');
}

function getToBeInPastTense(array) {
    return array.length > 1 ? 'were' : 'was';
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdHJpbmcuanMiXSwibmFtZXMiOlsicmVtb3ZlVFRZQ29sb3JzIiwid29yZFdyYXAiLCJzcGxpdFF1b3RlZFRleHQiLCJnZXRQbHVyYWxTdWZmaXgiLCJnZXRDb25jYXRlbmF0ZWRWYWx1ZXNTdHJpbmciLCJnZXRUb0JlSW5QYXN0VGVuc2UiLCJydHJpbSIsInN0ciIsInJlcGxhY2UiLCJpbmRlbnQiLCJ3aWR0aCIsImN1clN0ciIsIndyYXBwZWRNc2ciLCJsZW5ndGgiLCJzcGxpdCIsImZpbHRlciIsImVsbSIsImZvckVhY2giLCJ3b3JkIiwibmV3U3RyIiwic3BsaXRDaGFyIiwicXVvdGVzIiwiY3VycmVudFBhcnQiLCJwYXJ0cyIsInF1b3RlQ2hhciIsImkiLCJjdXJyZW50Q2hhciIsInB1c2giLCJpbmRleE9mIiwiYXJyYXkiLCJtYXAiLCJpdGVtIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7O1FBTWdCQSxlLEdBQUFBLGU7UUFJQUMsUSxHQUFBQSxRO1FBZ0NBQyxlLEdBQUFBLGU7UUFrQ0FDLGUsR0FBQUEsZTtRQUlBQywyQixHQUFBQSwyQjtRQUlBQyxrQixHQUFBQSxrQjs7QUFwRmhCOzs7Ozs7QUFFQSxTQUFTQyxLQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNqQixXQUFPQSxJQUFJQyxPQUFKLENBQVksTUFBWixFQUFvQixFQUFwQixDQUFQO0FBQ0g7O0FBRU0sU0FBU1IsZUFBVCxDQUEwQk8sR0FBMUIsRUFBK0I7QUFDbEMsV0FBT0EsSUFBSUMsT0FBSixDQUFZLGlCQUFaLEVBQStCLEVBQS9CLENBQVA7QUFDSDs7QUFFTSxTQUFTUCxRQUFULENBQW1CTSxHQUFuQixFQUF3QkUsTUFBeEIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQzFDLFFBQUlDLFNBQWEsRUFBakI7QUFDQSxRQUFJQyxhQUFhLEVBQWpCOztBQUVBLFFBQUlaLGdCQUFnQk8sR0FBaEIsRUFBcUJNLE1BQXJCLElBQStCSCxRQUFRRCxNQUEzQyxFQUNJLE9BQU8sNEJBQWFGLEdBQWIsRUFBa0IsR0FBbEIsRUFBdUJFLE1BQXZCLENBQVA7O0FBRUpGLFVBQU1BLElBQUlDLE9BQUosQ0FBWSxVQUFaLEVBQXdCLElBQXhCLEVBQ0RNLEtBREMsQ0FDSywrQkFETDtBQUVGO0FBRkUsS0FHREMsTUFIQyxDQUdNQyxPQUFPLENBQUMsQ0FBQ0EsR0FIZixDQUFOOztBQUtBVCxRQUFJVSxPQUFKLENBQVlDLFFBQVE7QUFDaEIsY0FBTUMsU0FBU1IsU0FBU08sSUFBeEI7O0FBRUEsWUFBSWxCLGdCQUFnQm1CLE1BQWhCLEVBQXdCTixNQUF4QixHQUFpQ0gsUUFBUUQsTUFBN0MsRUFBcUQ7QUFDakRHLDBCQUFlLEdBQUVOLE1BQU1LLE1BQU4sQ0FBYyxJQUEvQjtBQUNBQSxxQkFBU08sSUFBVDtBQUNILFNBSEQsTUFJSztBQUNELGdCQUFJUCxPQUFPQSxPQUFPRSxNQUFQLEdBQWdCLENBQXZCLE1BQThCLElBQWxDLEVBQXdDO0FBQ3BDRCw4QkFBZSxHQUFFTixNQUFNSyxNQUFOLENBQWMsSUFBL0I7QUFDQUEseUJBQVMsRUFBVDtBQUNIOztBQUVEQSxzQkFBVU8sSUFBVjtBQUNIO0FBQ0osS0FmRDs7QUFpQkEsV0FBTyw0QkFBYU4sYUFBYUQsTUFBMUIsRUFBa0MsR0FBbEMsRUFBdUNGLE1BQXZDLENBQVA7QUFDSDs7QUFFTSxTQUFTUCxlQUFULENBQTBCSyxHQUExQixFQUErQmEsU0FBL0IsRUFBMENDLFNBQVMsS0FBbkQsRUFBMEQ7QUFDN0QsUUFBSUMsY0FBYyxFQUFsQjtBQUNBLFVBQU1DLFFBQWMsRUFBcEI7QUFDQSxRQUFJQyxZQUFjLElBQWxCOztBQUVBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbEIsSUFBSU0sTUFBeEIsRUFBZ0NZLEdBQWhDLEVBQXFDO0FBQ2pDLGNBQU1DLGNBQWNuQixJQUFJa0IsQ0FBSixDQUFwQjs7QUFFQSxZQUFJQyxnQkFBZ0JOLFNBQXBCLEVBQStCO0FBQzNCLGdCQUFJSSxTQUFKLEVBQ0lGLGVBQWVJLFdBQWYsQ0FESixLQUVLO0FBQ0RILHNCQUFNSSxJQUFOLENBQVdMLFdBQVg7QUFDQUEsOEJBQWMsRUFBZDtBQUNIO0FBQ0osU0FQRCxNQVFLLElBQUlELE9BQU9PLE9BQVAsQ0FBZUYsV0FBZixJQUE4QixDQUFDLENBQW5DLEVBQXNDO0FBQ3ZDLGdCQUFJRixjQUFjRSxXQUFsQixFQUNJRixZQUFZLElBQVosQ0FESixLQUVLLElBQUksQ0FBQ0EsU0FBTCxFQUNEQSxZQUFZRSxXQUFaLENBREMsS0FHREosZUFBZUksV0FBZjtBQUNQLFNBUEksTUFTREosZUFBZUksV0FBZjtBQUNQOztBQUVELFFBQUlKLFdBQUosRUFDSUMsTUFBTUksSUFBTixDQUFXTCxXQUFYOztBQUVKLFdBQU9DLEtBQVA7QUFDSDs7QUFFTSxTQUFTcEIsZUFBVCxDQUEwQjBCLEtBQTFCLEVBQWlDO0FBQ3BDLFdBQU9BLE1BQU1oQixNQUFOLEdBQWUsQ0FBZixHQUFtQixHQUFuQixHQUF5QixFQUFoQztBQUNIOztBQUVNLFNBQVNULDJCQUFULENBQXNDeUIsS0FBdEMsRUFBNkM7QUFDaEQsV0FBT0EsTUFBTUMsR0FBTixDQUFVQyxRQUFTLElBQUdBLElBQUssR0FBM0IsRUFBK0JDLElBQS9CLENBQW9DLElBQXBDLENBQVA7QUFDSDs7QUFFTSxTQUFTM0Isa0JBQVQsQ0FBNkJ3QixLQUE3QixFQUFvQztBQUN2QyxXQUFPQSxNQUFNaEIsTUFBTixHQUFlLENBQWYsR0FBbUIsTUFBbkIsR0FBNEIsS0FBbkM7QUFDSCIsImZpbGUiOiJ1dGlscy9zdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5kZW50U3RyaW5nIGZyb20gJ2luZGVudC1zdHJpbmcnO1xuXG5mdW5jdGlvbiBydHJpbSAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRUWUNvbG9ycyAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXDAzM1xcW1swLTk7XSptL2csICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdvcmRXcmFwIChzdHIsIGluZGVudCwgd2lkdGgpIHtcbiAgICBsZXQgY3VyU3RyICAgICA9ICcnO1xuICAgIGxldCB3cmFwcGVkTXNnID0gJyc7XG5cbiAgICBpZiAocmVtb3ZlVFRZQ29sb3JzKHN0cikubGVuZ3RoIDw9IHdpZHRoIC0gaW5kZW50KVxuICAgICAgICByZXR1cm4gaW5kZW50U3RyaW5nKHN0ciwgJyAnLCBpbmRlbnQpO1xuXG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLyhcXHJcXG4pL2dtLCAnXFxuJylcbiAgICAgICAgLnNwbGl0KC8oXFxTK1sgXFx0XSspfChcXFMrKD86XFxuKSl8KFxcbikvbSlcbiAgICAgICAgLy9OT1RFOiBjdXQgZW1wdHkgZWxlbWVudHNcbiAgICAgICAgLmZpbHRlcihlbG0gPT4gISFlbG0pO1xuXG4gICAgc3RyLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0ciA9IGN1clN0ciArIHdvcmQ7XG5cbiAgICAgICAgaWYgKHJlbW92ZVRUWUNvbG9ycyhuZXdTdHIpLmxlbmd0aCA+IHdpZHRoIC0gaW5kZW50KSB7XG4gICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgIGN1clN0ciA9IHdvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VyU3RyW2N1clN0ci5sZW5ndGggLSAxXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgICAgICBjdXJTdHIgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VyU3RyICs9IHdvcmQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpbmRlbnRTdHJpbmcod3JhcHBlZE1zZyArIGN1clN0ciwgJyAnLCBpbmRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRRdW90ZWRUZXh0IChzdHIsIHNwbGl0Q2hhciwgcXVvdGVzID0gJ1wiXFwnJykge1xuICAgIGxldCBjdXJyZW50UGFydCA9ICcnO1xuICAgIGNvbnN0IHBhcnRzICAgICAgID0gW107XG4gICAgbGV0IHF1b3RlQ2hhciAgID0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDaGFyID0gc3RyW2ldO1xuXG4gICAgICAgIGlmIChjdXJyZW50Q2hhciA9PT0gc3BsaXRDaGFyKSB7XG4gICAgICAgICAgICBpZiAocXVvdGVDaGFyKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJ0ICs9IGN1cnJlbnRDaGFyO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaChjdXJyZW50UGFydCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhcnQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdW90ZXMuaW5kZXhPZihjdXJyZW50Q2hhcikgPiAtMSkge1xuICAgICAgICAgICAgaWYgKHF1b3RlQ2hhciA9PT0gY3VycmVudENoYXIpXG4gICAgICAgICAgICAgICAgcXVvdGVDaGFyID0gbnVsbDtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFxdW90ZUNoYXIpXG4gICAgICAgICAgICAgICAgcXVvdGVDaGFyID0gY3VycmVudENoYXI7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY3VycmVudFBhcnQgKz0gY3VycmVudENoYXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY3VycmVudFBhcnQgKz0gY3VycmVudENoYXI7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQYXJ0KVxuICAgICAgICBwYXJ0cy5wdXNoKGN1cnJlbnRQYXJ0KTtcblxuICAgIHJldHVybiBwYXJ0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBsdXJhbFN1ZmZpeCAoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkubGVuZ3RoID4gMSA/ICdzJyA6ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uY2F0ZW5hdGVkVmFsdWVzU3RyaW5nIChhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5tYXAoaXRlbSA9PiBgXCIke2l0ZW19XCJgKS5qb2luKCcsICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9CZUluUGFzdFRlbnNlIChhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5sZW5ndGggPiAxID8gJ3dlcmUnIDogJ3dhcyc7XG59XG5cbiJdfQ==
