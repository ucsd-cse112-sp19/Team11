"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const debug_1 = __importDefault(require("debug"));
const promisify_event_1 = __importDefault(require("promisify-event"));
const pinkie_1 = __importDefault(require("pinkie"));
const promisified_functions_1 = require("../../promisified-functions");
const commands_1 = __importDefault(require("./commands"));
const WORKER_PATH = require.resolve('./worker');
const WORKER_STDIO_CONFIG = ['ignore', 'pipe', 'pipe', 'ipc'];
const DEBUG_LOGGER = debug_1.default('testcafe:utils:temp-directory:cleanup-process');
class CleanupProcess {
    constructor() {
        this.worker = null;
        this.initialized = false;
        this.initPromise = pinkie_1.default.resolve(void 0);
        this.errorPromise = null;
        this.messageCounter = 0;
        this.pendingResponses = {};
    }
    _sendMessage(id, msg) {
        return pinkie_1.default.race([
            promisified_functions_1.sendMessageToChildProcess(this.worker, Object.assign({ id }, msg)),
            this._waitProcessError()
        ]);
    }
    _onResponse(response) {
        const pendingResponse = this.pendingResponses[response.id];
        if (response.error) {
            if (pendingResponse)
                pendingResponse.control.reject(response.error);
            else
                this.pendingResponses[response.id] = pinkie_1.default.reject(response.error);
        }
        else if (pendingResponse)
            pendingResponse.control.resolve();
        else
            this.pendingResponses[response.id] = pinkie_1.default.resolve();
    }
    async _waitResponse(id) {
        if (!this.pendingResponses[id]) {
            const promiseControl = {};
            this.pendingResponses[id] = new pinkie_1.default((resolve, reject) => {
                Object.assign(promiseControl, { resolve, reject });
            });
            this.pendingResponses[id].control = promiseControl;
        }
        try {
            await this.pendingResponses[id];
        }
        finally {
            delete this.pendingResponses[id];
        }
    }
    async _waitResponseForMessage(msg) {
        const currentId = this.messageCounter;
        this.messageCounter++;
        await this._sendMessage(currentId, msg);
        await this._waitResponse(currentId);
    }
    _waitProcessExit() {
        return promisify_event_1.default(this.worker, 'exit')
            .then(exitCode => pinkie_1.default.reject(new Error(`Worker process terminated with code ${exitCode}`)));
    }
    _waitProcessError() {
        if (this.errorPromise)
            return this.errorPromise;
        this.errorPromise = promisify_event_1.default(this.worker, 'error');
        this.errorPromise.then(() => {
            this.errorPromise = null;
        });
        return this.errorPromise;
    }
    _setupWorkerEventHandlers() {
        this.worker.on('message', message => this._onResponse(message));
        this.worker.stdout.on('data', data => DEBUG_LOGGER('Worker process stdout:\n', String(data)));
        this.worker.stderr.on('data', data => DEBUG_LOGGER('Worker process stderr:\n', String(data)));
    }
    _unrefWorkerProcess() {
        this.worker.unref();
        this.worker.stdout.unref();
        this.worker.stderr.unref();
        const channel = this.worker.channel || this.worker._channel;
        channel.unref();
    }
    _handleProcessError(error) {
        this.initialized = false;
        DEBUG_LOGGER(error);
    }
    init() {
        this.initPromise = this.initPromise
            .then(async (initialized) => {
            if (initialized !== void 0)
                return initialized;
            this.worker = child_process_1.spawn(process.argv[0], [WORKER_PATH], { detached: true, stdio: WORKER_STDIO_CONFIG });
            this._setupWorkerEventHandlers();
            this._unrefWorkerProcess();
            const exitPromise = this._waitProcessExit();
            try {
                await pinkie_1.default.race([
                    this._waitResponseForMessage({ command: commands_1.default.init }),
                    this._waitProcessError(),
                    exitPromise
                ]);
                this.initialized = true;
                exitPromise.catch(error => this._handleProcessError(error));
                this.worker.on('error', error => this._handleProcessError(error));
            }
            catch (e) {
                DEBUG_LOGGER('Failed to start cleanup process');
                DEBUG_LOGGER(e);
                this.initialized = false;
            }
            return this.initialized;
        });
        return this.initPromise;
    }
    async addDirectory(path) {
        if (!this.initialized)
            return;
        try {
            await this._waitResponseForMessage({ command: commands_1.default.add, path });
        }
        catch (e) {
            DEBUG_LOGGER(`Failed to add the ${path} directory to cleanup process`);
            DEBUG_LOGGER(e);
        }
    }
    async removeDirectory(path) {
        if (!this.initialized)
            return;
        try {
            await this._waitResponseForMessage({ command: commands_1.default.remove, path });
        }
        catch (e) {
            DEBUG_LOGGER(`Failed to remove the ${path} directory in cleanup process`);
            DEBUG_LOGGER(e);
        }
    }
}
exports.default = new CleanupProcess();
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,