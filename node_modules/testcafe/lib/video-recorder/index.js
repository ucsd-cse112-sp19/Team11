'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _path = require('path');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _child_process = require('child_process');

var _makeDir = require('make-dir');

var _makeDir2 = _interopRequireDefault(_makeDir);

var _tempDirectory = require('../utils/temp-directory');

var _tempDirectory2 = _interopRequireDefault(_tempDirectory);

var _pathPattern = require('../utils/path-pattern');

var _pathPattern2 = _interopRequireDefault(_pathPattern);

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _string = require('../utils/string');

var _testRunVideoRecorder = require('./test-run-video-recorder');

var _testRunVideoRecorder2 = _interopRequireDefault(_testRunVideoRecorder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:video-recorder');

const VIDEO_EXTENSION = 'mp4';
const TEMP_DIR_PREFIX = 'video';

class VideoRecorder {
    constructor(browserJob, basePath, opts, encodingOpts, warningLog) {
        this.browserJob = browserJob;
        this.basePath = basePath;
        this.failedOnly = opts.failedOnly;
        this.singleFile = opts.singleFile;
        this.ffmpegPath = opts.ffmpegPath;
        this.customPathPattern = opts.pathPattern;
        this.timeStamp = opts.timeStamp;
        this.encodingOptions = encodingOpts;

        this.warningLog = warningLog;

        this.tempDirectory = new _tempDirectory2.default(TEMP_DIR_PREFIX);

        this.firstFile = true;

        this.testRunVideoRecorders = {};

        this._assignEventHandlers(browserJob);
    }

    _createSafeListener(listener) {
        var _this = this;

        return (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (...args) {
                try {
                    return yield listener.apply(_this, args);
                } catch (error) {
                    DEBUG_LOGGER(listener && listener.name, error);

                    return void 0;
                }
            });

            return function () {
                return _ref.apply(this, arguments);
            };
        })();
    }

    _assignEventHandlers(browserJob) {
        browserJob.once('start', this._createSafeListener(() => {
            this.tempDirectoryInitializedPromise = this._onBrowserJobStart();

            return this.tempDirectoryInitializedPromise;
        }));

        browserJob.once('done', this._createSafeListener(this._onBrowserJobDone));
        browserJob.on('test-run-create', this._createSafeListener(this._onTestRunCreate));
        browserJob.on('test-run-ready', this._createSafeListener(this._onTestRunReady));
        browserJob.on('test-run-before-done', this._createSafeListener(this._onTestRunBeforeDone));
    }

    _addProblematicPlaceholdersWarning(placeholders) {
        const problematicPlaceholderListStr = (0, _string.getConcatenatedValuesString)(placeholders);
        const suffix = (0, _string.getPluralSuffix)(placeholders);
        const verb = (0, _string.getToBeInPastTense)(placeholders);

        this.warningLog.addWarning(_warningMessage2.default.problematicPathPatternPlaceholderForVideoRecording, problematicPlaceholderListStr, suffix, suffix, verb);
    }

    _getTargetVideoPath(testRunRecorder) {
        const data = (0, _assign2.default)(testRunRecorder.testRunInfo, { now: this.timeStamp });

        if (this.singleFile) {
            data.testIndex = null;
            data.fixture = null;
            data.test = null;
        }

        const pathPattern = new _pathPattern2.default(this.customPathPattern, VIDEO_EXTENSION, data);

        pathPattern.on('problematic-placeholders-found', ({ placeholders }) => this._addProblematicPlaceholdersWarning(placeholders));

        return (0, _path.join)(this.basePath, pathPattern.getPath());
    }

    _concatVideo(targetVideoPath, { tempVideoPath, tempMergeConfigPath, tmpMergeName }) {
        if (this.firstFile) {
            this.firstFile = false;
            return;
        }

        _fs2.default.writeFileSync(tempMergeConfigPath, `
            file '${targetVideoPath}'
            file '${tempVideoPath}'
        `);

        (0, _child_process.spawnSync)(this.ffmpegPath, ['-y', '-f', 'concat', '-safe', '0', '-i', tempMergeConfigPath, '-c', 'copy', tmpMergeName], { stdio: 'ignore' });
        _fs2.default.copyFileSync(tmpMergeName, tempVideoPath);
    }

    _onBrowserJobStart() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this2.tempDirectory.init();
        })();
    }

    _onBrowserJobDone() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this3.tempDirectory.dispose();
        })();
    }

    _onTestRunCreate(testRunInfo) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (testRunInfo.legacy) return;

            yield _this4.tempDirectoryInitializedPromise;

            const recordingOptions = {
                path: _this4.tempDirectory.path,
                ffmpegPath: _this4.ffmpegPath,
                encodingOptions: _this4.encodingOptions
            };

            const testRunVideoRecorder = _this4._createTestRunVideoRecorder(testRunInfo, recordingOptions);
            const isVideoSupported = yield testRunVideoRecorder.isVideoSupported();

            if (isVideoSupported) {
                yield testRunVideoRecorder.init();

                _this4.testRunVideoRecorders[testRunVideoRecorder.index] = testRunVideoRecorder;
            } else _this4.warningLog.addWarning(_warningMessage2.default.videoNotSupportedByBrowser, testRunVideoRecorder.testRunInfo.alias);
        })();
    }

    _createTestRunVideoRecorder(testRunInfo, recordingOptions) {
        return new _testRunVideoRecorder2.default(testRunInfo, recordingOptions, this.warningLog);
    }

    _onTestRunReady({ index }) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testRunRecorder = _this5.testRunVideoRecorders[index];

            if (!testRunRecorder) return;

            yield testRunRecorder.startCapturing();
        })();
    }

    _onTestRunBeforeDone({ index }) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const testRunRecorder = _this6.testRunVideoRecorders[index];

            if (!testRunRecorder) return;

            delete _this6.testRunVideoRecorders[index];

            yield testRunRecorder.finishCapturing();

            if (_this6.failedOnly && !testRunRecorder.hasErrors) return;

            yield _this6._saveFiles(testRunRecorder);
        })();
    }

    _saveFiles(testRunRecorder) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const videoPath = _this7._getTargetVideoPath(testRunRecorder);

            yield (0, _makeDir2.default)((0, _path.dirname)(videoPath));

            if (_this7.singleFile) _this7._concatVideo(videoPath, testRunRecorder.tempFiles);

            _fs2.default.copyFileSync(testRunRecorder.tempFiles.tempVideoPath, videoPath);
        })();
    }
}
exports.default = VideoRecorder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
