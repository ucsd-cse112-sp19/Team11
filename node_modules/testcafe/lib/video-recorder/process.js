'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _child_process = require('child_process');

var _lodash = require('lodash');

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _asyncEventEmitter = require('../utils/async-event-emitter');

var _asyncEventEmitter2 = _interopRequireDefault(_asyncEventEmitter);

var _delay = require('../utils/delay');

var _delay2 = _interopRequireDefault(_delay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER_PREFIX = 'testcafe:video-recorder:process:';

const DEFAULT_OPTIONS = {
    // NOTE: don't ask confirmation for rewriting the output file
    'y': true,

    // NOTE: use the time when a frame is read from the source as its timestamp
    // IMPORTANT: must be specified before configuring the source
    'use_wallclock_as_timestamps': 1,

    // NOTE: use stdin as a source
    'i': 'pipe:0',

    // NOTE: use the H.264 video codec
    'c:v': 'libx264',

    // NOTE: use the 'ultrafast' compression preset
    'preset': 'ultrafast',

    // NOTE: use the yuv420p pixel format (the most widely supported)
    'pix_fmt': 'yuv420p',

    // NOTE: scale input frames to make the frame height divisible by 2 (yuv420p's requirement)
    'vf': 'scale=trunc(iw/2)*2:trunc(ih/2)*2',

    // NOTE: set the frame rate to 30 in the output video (the most widely supported)
    'r': 30
};

const FFMPEG_START_DELAY = 500;

class VideoRecorder extends _asyncEventEmitter2.default {
    constructor(basePath, ffmpegPath, connection, customOptions) {
        super();

        this.debugLogger = (0, _debug2.default)(DEBUG_LOGGER_PREFIX + connection.id);

        this.customOptions = customOptions;
        this.videoPath = basePath;
        this.connection = connection;
        this.ffmpegPath = ffmpegPath;
        this.ffmpegProcess = null;

        this.ffmpegStdoutBuf = '';
        this.ffmpegStderrBuf = '';

        this.ffmpegClosingPromise = null;

        this.closed = false;

        this.optionsList = this._getOptionsList();

        this.capturingPromise = null;
    }

    static _filterOption([key, value]) {
        if (value === true) return ['-' + key];

        return ['-' + key, value];
    }

    _setupFFMPEGBuffers() {
        this.ffmpegProcess.stdout.on('data', data => {
            this.ffmpegStdoutBuf += String(data);
        });

        this.ffmpegProcess.stderr.on('data', data => {
            this.ffmpegStderrBuf += String(data);
        });
    }

    _getChildProcessPromise() {
        return new _pinkie2.default((resolve, reject) => {
            this.ffmpegProcess.on('exit', resolve);
            this.ffmpegProcess.on('error', reject);
        });
    }

    _getOptionsList() {
        const optionsObject = (0, _assign2.default)({}, DEFAULT_OPTIONS, this.customOptions);

        const optionsList = (0, _lodash.flatten)((0, _entries2.default)(optionsObject).map(VideoRecorder._filterOption));

        optionsList.push(this.videoPath);

        return optionsList;
    }

    _addFrame(frameData) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const writingFinished = _this.ffmpegProcess.stdin.write(frameData);

            if (!writingFinished) yield new _pinkie2.default(function (r) {
                return _this.ffmpegProcess.stdin.once('drain', r);
            });
        })();
    }

    _capture() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            while (!_this2.closed) {
                try {
                    const frame = yield _this2.connection.provider.getVideoFrameData(_this2.connection.id);

                    if (frame) {
                        yield _this2.emit('frame');
                        yield _this2._addFrame(frame);
                    }
                } catch (error) {
                    _this2.debugLogger(error);
                }
            }
        })();
    }

    init() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this3.ffmpegProcess = (0, _child_process.spawn)(_this3.ffmpegPath, _this3.optionsList, { stdio: 'pipe' });

            _this3._setupFFMPEGBuffers();

            _this3.ffmpegClosingPromise = _this3._getChildProcessPromise().then(function (code) {
                _this3.closed = true;

                if (code) {
                    _this3.debugLogger(code);
                    _this3.debugLogger(_this3.ffmpegStdoutBuf);
                    _this3.debugLogger(_this3.ffmpegStderrBuf);
                }
            }).catch(function (error) {
                _this3.closed = true;

                _this3.debugLogger(error);
                _this3.debugLogger(_this3.ffmpegStdoutBuf);
                _this3.debugLogger(_this3.ffmpegStderrBuf);
            });

            yield (0, _delay2.default)(FFMPEG_START_DELAY);
        })();
    }

    startCapturing() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this4.capturingPromise = _this4._capture();

            yield _this4.once('frame');
        })();
    }

    finishCapturing() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (_this5.closed) return;

            _this5.closed = true;

            yield _this5.capturingPromise;

            _this5.ffmpegProcess.stdin.end();

            yield _this5.ffmpegClosingPromise;
        })();
    }
}
exports.default = VideoRecorder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
