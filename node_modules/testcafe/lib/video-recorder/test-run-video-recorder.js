'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _process = require('./process');

var _process2 = _interopRequireDefault(_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const VIDEO_EXTENSION = 'mp4';

const TEMP_VIDEO_FILE_PREFIX = 'tmp-video';
const TEMP_MERGE_FILE_PREFIX = TEMP_VIDEO_FILE_PREFIX + '-merge';

const TEMP_MERGE_CONFIG_FILE_PREFIX = 'config';
const TEMP_MERGE_CONFIG_FILE_EXTENSION = 'txt';

class TestRunVideoRecorder {
    constructor({ testRun, test, index }, { path, ffmpegPath, encodingOptions }) {
        this.testRun = testRun;
        this.test = test;
        this.index = index;

        this.tempFiles = null;
        this.videoRecorder = null;

        this.path = path;
        this.ffmpegPath = ffmpegPath;
        this.encodingOptions = encodingOptions;
    }

    get testRunInfo() {
        return {
            testIndex: this.index,
            fixture: this.test.fixture.name,
            test: this.test.name,
            alias: this._connection.browserInfo.alias,
            parsedUserAgent: this._connection.browserInfo.parsedUserAgent
        };
    }

    get hasErrors() {
        return !!this.testRun.errs.length;
    }

    get _connection() {
        return this.testRun.browserConnection;
    }

    startCapturing() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this.videoRecorder.startCapturing();
        })();
    }

    finishCapturing() {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield _this2.videoRecorder.finishCapturing();
        })();
    }

    init() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this3.tempFiles = _this3._generateTempNames();
            _this3.videoRecorder = _this3._createVideoRecorderProcess();

            yield _this3.videoRecorder.init();
        })();
    }

    isVideoSupported() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const connectionCapabilities = yield _this4._connection.provider.hasCustomActionForBrowser(_this4._connection.id);

            return connectionCapabilities && connectionCapabilities.hasGetVideoFrameData;
        })();
    }

    _createVideoRecorderProcess() {
        return new _process2.default(this.tempFiles.tempVideoPath, this.ffmpegPath, this._connection, this.encodingOptions);
    }

    _generateTempNames() {
        const id = this._connection.id;

        const tempFileNames = {
            tempVideoPath: `${TEMP_VIDEO_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`,
            tempMergeConfigPath: `${TEMP_MERGE_CONFIG_FILE_PREFIX}-${id}.${TEMP_MERGE_CONFIG_FILE_EXTENSION}`,
            tmpMergeName: `${TEMP_MERGE_FILE_PREFIX}-${id}.${VIDEO_EXTENSION}`
        };

        for (var _iterator = (0, _entries2.default)(tempFileNames), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref2;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref2 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref2 = _i.value;
            }

            const _ref = _ref2;
            const tempFile = _ref[0];
            const tempName = _ref[1];

            tempFileNames[tempFile] = (0, _path.join)(this.path, tempName);
        }return tempFileNames;
    }
}
exports.default = TestRunVideoRecorder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWRlby1yZWNvcmRlci90ZXN0LXJ1bi12aWRlby1yZWNvcmRlci5qcyJdLCJuYW1lcyI6WyJWSURFT19FWFRFTlNJT04iLCJURU1QX1ZJREVPX0ZJTEVfUFJFRklYIiwiVEVNUF9NRVJHRV9GSUxFX1BSRUZJWCIsIlRFTVBfTUVSR0VfQ09ORklHX0ZJTEVfUFJFRklYIiwiVEVNUF9NRVJHRV9DT05GSUdfRklMRV9FWFRFTlNJT04iLCJUZXN0UnVuVmlkZW9SZWNvcmRlciIsImNvbnN0cnVjdG9yIiwidGVzdFJ1biIsInRlc3QiLCJpbmRleCIsInBhdGgiLCJmZm1wZWdQYXRoIiwiZW5jb2RpbmdPcHRpb25zIiwidGVtcEZpbGVzIiwidmlkZW9SZWNvcmRlciIsInRlc3RSdW5JbmZvIiwidGVzdEluZGV4IiwiZml4dHVyZSIsIm5hbWUiLCJhbGlhcyIsIl9jb25uZWN0aW9uIiwiYnJvd3NlckluZm8iLCJwYXJzZWRVc2VyQWdlbnQiLCJoYXNFcnJvcnMiLCJlcnJzIiwibGVuZ3RoIiwiYnJvd3NlckNvbm5lY3Rpb24iLCJzdGFydENhcHR1cmluZyIsImZpbmlzaENhcHR1cmluZyIsImluaXQiLCJfZ2VuZXJhdGVUZW1wTmFtZXMiLCJfY3JlYXRlVmlkZW9SZWNvcmRlclByb2Nlc3MiLCJpc1ZpZGVvU3VwcG9ydGVkIiwiY29ubmVjdGlvbkNhcGFiaWxpdGllcyIsInByb3ZpZGVyIiwiaGFzQ3VzdG9tQWN0aW9uRm9yQnJvd3NlciIsImlkIiwiaGFzR2V0VmlkZW9GcmFtZURhdGEiLCJWaWRlb1JlY29yZGVyUHJvY2VzcyIsInRlbXBWaWRlb1BhdGgiLCJ0ZW1wRmlsZU5hbWVzIiwidGVtcE1lcmdlQ29uZmlnUGF0aCIsInRtcE1lcmdlTmFtZSIsInRlbXBGaWxlIiwidGVtcE5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsa0JBQWtCLEtBQXhCOztBQUVBLE1BQU1DLHlCQUF5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O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLGtCQUFZRyxRQUFaO0FBQUEsa0JBQXNCQyxRQUF0Qjs7QUFDSUosMEJBQWNHLFFBQWQsSUFBMEIsZ0JBQUssS0FBS2pDLElBQVYsRUFBZ0JrQyxRQUFoQixDQUExQjtBQURKLFNBR0EsT0FBT0osYUFBUDtBQUNIO0FBdEVxQztrQkFBckJuQyxvQiIsImZpbGUiOiJ2aWRlby1yZWNvcmRlci90ZXN0LXJ1bi12aWRlby1yZWNvcmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcbmltcG9ydCBWaWRlb1JlY29yZGVyUHJvY2VzcyBmcm9tICcuL3Byb2Nlc3MnO1xuXG5jb25zdCBWSURFT19FWFRFTlNJT04gPSAnbXA0JztcblxuY29uc3QgVEVNUF9WSURFT19GSUxFX1BSRUZJWCA9ICd0bXAtdmlkZW8nO1xuY29uc3QgVEVNUF9NRVJHRV9GSUxFX1BSRUZJWCA9IFRFTVBfVklERU9fRklMRV9QUkVGSVggKyAnLW1lcmdlJztcblxuY29uc3QgVEVNUF9NRVJHRV9DT05GSUdfRklMRV9QUkVGSVggICAgPSAnY29uZmlnJztcbmNvbnN0IFRFTVBfTUVSR0VfQ09ORklHX0ZJTEVfRVhURU5TSU9OID0gJ3R4dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RSdW5WaWRlb1JlY29yZGVyIHtcbiAgICBjb25zdHJ1Y3RvciAoeyB0ZXN0UnVuLCB0ZXN0LCBpbmRleCB9LCB7IHBhdGgsIGZmbXBlZ1BhdGgsIGVuY29kaW5nT3B0aW9ucyB9KSB7XG4gICAgICAgIHRoaXMudGVzdFJ1biAgICA9IHRlc3RSdW47XG4gICAgICAgIHRoaXMudGVzdCAgICAgICA9IHRlc3Q7XG4gICAgICAgIHRoaXMuaW5kZXggICAgICA9IGluZGV4O1xuXG4gICAgICAgIHRoaXMudGVtcEZpbGVzICAgICA9IG51bGw7XG4gICAgICAgIHRoaXMudmlkZW9SZWNvcmRlciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5wYXRoICAgICAgICAgICAgPSBwYXRoO1xuICAgICAgICB0aGlzLmZmbXBlZ1BhdGggICAgICA9IGZmbXBlZ1BhdGg7XG4gICAgICAgIHRoaXMuZW5jb2RpbmdPcHRpb25zID0gZW5jb2RpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGdldCB0ZXN0UnVuSW5mbyAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXN0SW5kZXg6ICAgICAgIHRoaXMuaW5kZXgsXG4gICAgICAgICAgICBmaXh0dXJlOiAgICAgICAgIHRoaXMudGVzdC5maXh0dXJlLm5hbWUsXG4gICAgICAgICAgICB0ZXN0OiAgICAgICAgICAgIHRoaXMudGVzdC5uYW1lLFxuICAgICAgICAgICAgYWxpYXM6ICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmJyb3dzZXJJbmZvLmFsaWFzLFxuICAgICAgICAgICAgcGFyc2VkVXNlckFnZW50OiB0aGlzLl9jb25uZWN0aW9uLmJyb3dzZXJJbmZvLnBhcnNlZFVzZXJBZ2VudFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldCBoYXNFcnJvcnMgKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnRlc3RSdW4uZXJycy5sZW5ndGg7XG4gICAgfVxuXG4gICAgZ2V0IF9jb25uZWN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBhc3luYyBzdGFydENhcHR1cmluZyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudmlkZW9SZWNvcmRlci5zdGFydENhcHR1cmluZygpO1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmlzaENhcHR1cmluZyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudmlkZW9SZWNvcmRlci5maW5pc2hDYXB0dXJpbmcoKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0ICgpIHtcbiAgICAgICAgdGhpcy50ZW1wRmlsZXMgICAgID0gdGhpcy5fZ2VuZXJhdGVUZW1wTmFtZXMoKTtcbiAgICAgICAgdGhpcy52aWRlb1JlY29yZGVyID0gdGhpcy5fY3JlYXRlVmlkZW9SZWNvcmRlclByb2Nlc3MoKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnZpZGVvUmVjb3JkZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGlzVmlkZW9TdXBwb3J0ZWQgKCkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uQ2FwYWJpbGl0aWVzID0gYXdhaXQgdGhpcy5fY29ubmVjdGlvbi5wcm92aWRlci5oYXNDdXN0b21BY3Rpb25Gb3JCcm93c2VyKHRoaXMuX2Nvbm5lY3Rpb24uaWQpO1xuXG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uQ2FwYWJpbGl0aWVzICYmIGNvbm5lY3Rpb25DYXBhYmlsaXRpZXMuaGFzR2V0VmlkZW9GcmFtZURhdGE7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVZpZGVvUmVjb3JkZXJQcm9jZXNzICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWRlb1JlY29yZGVyUHJvY2Vzcyh0aGlzLnRlbXBGaWxlcy50ZW1wVmlkZW9QYXRoLCB0aGlzLmZmbXBlZ1BhdGgsIHRoaXMuX2Nvbm5lY3Rpb24sIHRoaXMuZW5jb2RpbmdPcHRpb25zKTtcbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVUZW1wTmFtZXMgKCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuX2Nvbm5lY3Rpb24uaWQ7XG5cbiAgICAgICAgY29uc3QgdGVtcEZpbGVOYW1lcyA9IHtcbiAgICAgICAgICAgIHRlbXBWaWRlb1BhdGg6ICAgICAgIGAke1RFTVBfVklERU9fRklMRV9QUkVGSVh9LSR7aWR9LiR7VklERU9fRVhURU5TSU9OfWAsXG4gICAgICAgICAgICB0ZW1wTWVyZ2VDb25maWdQYXRoOiBgJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX1BSRUZJWH0tJHtpZH0uJHtURU1QX01FUkdFX0NPTkZJR19GSUxFX0VYVEVOU0lPTn1gLFxuICAgICAgICAgICAgdG1wTWVyZ2VOYW1lOiAgICAgICAgYCR7VEVNUF9NRVJHRV9GSUxFX1BSRUZJWH0tJHtpZH0uJHtWSURFT19FWFRFTlNJT059YFxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAoY29uc3QgW3RlbXBGaWxlLCB0ZW1wTmFtZV0gb2YgT2JqZWN0LmVudHJpZXModGVtcEZpbGVOYW1lcykpXG4gICAgICAgICAgICB0ZW1wRmlsZU5hbWVzW3RlbXBGaWxlXSA9IGpvaW4odGhpcy5wYXRoLCB0ZW1wTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIHRlbXBGaWxlTmFtZXM7XG4gICAgfVxufVxuXG4iXX0=
